// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: metalstack/api/v2/machine.proto

package apiv2

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// IPProtocol defines tcp|udp
type IPProtocol int32

const (
	// IP_PROTOCOL_UNSPECIFIED is not specified
	IPProtocol_IP_PROTOCOL_UNSPECIFIED IPProtocol = 0
	// IP_PROTOCOL_TCP is tcp
	IPProtocol_IP_PROTOCOL_TCP IPProtocol = 1
	// IP_PROTOCOL_UDP is udp
	IPProtocol_IP_PROTOCOL_UDP IPProtocol = 2
)

// Enum value maps for IPProtocol.
var (
	IPProtocol_name = map[int32]string{
		0: "IP_PROTOCOL_UNSPECIFIED",
		1: "IP_PROTOCOL_TCP",
		2: "IP_PROTOCOL_UDP",
	}
	IPProtocol_value = map[string]int32{
		"IP_PROTOCOL_UNSPECIFIED": 0,
		"IP_PROTOCOL_TCP":         1,
		"IP_PROTOCOL_UDP":         2,
	}
)

func (x IPProtocol) Enum() *IPProtocol {
	p := new(IPProtocol)
	*p = x
	return p
}

func (x IPProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_metalstack_api_v2_machine_proto_enumTypes[0].Descriptor()
}

func (IPProtocol) Type() protoreflect.EnumType {
	return &file_metalstack_api_v2_machine_proto_enumTypes[0]
}

func (x IPProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPProtocol.Descriptor instead.
func (IPProtocol) EnumDescriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{0}
}

// MachineState defines if the machine was locked or reserved from a operator
type MachineState int32

const (
	// MACHINE_STATE_UNSPECIFIED is not specified
	MachineState_MACHINE_STATE_UNSPECIFIED MachineState = 0
	// MACHINE_STATE_RESERVED this machine is reserved
	MachineState_MACHINE_STATE_RESERVED MachineState = 1
	// MACHINE_STATE_LOCKED this machine is locked
	MachineState_MACHINE_STATE_LOCKED MachineState = 2
	// MACHINE_STATE_LOCKED this machine is available for all
	MachineState_MACHINE_STATE_AVAILABLE MachineState = 3
)

// Enum value maps for MachineState.
var (
	MachineState_name = map[int32]string{
		0: "MACHINE_STATE_UNSPECIFIED",
		1: "MACHINE_STATE_RESERVED",
		2: "MACHINE_STATE_LOCKED",
		3: "MACHINE_STATE_AVAILABLE",
	}
	MachineState_value = map[string]int32{
		"MACHINE_STATE_UNSPECIFIED": 0,
		"MACHINE_STATE_RESERVED":    1,
		"MACHINE_STATE_LOCKED":      2,
		"MACHINE_STATE_AVAILABLE":   3,
	}
)

func (x MachineState) Enum() *MachineState {
	p := new(MachineState)
	*p = x
	return p
}

func (x MachineState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MachineState) Descriptor() protoreflect.EnumDescriptor {
	return file_metalstack_api_v2_machine_proto_enumTypes[1].Descriptor()
}

func (MachineState) Type() protoreflect.EnumType {
	return &file_metalstack_api_v2_machine_proto_enumTypes[1]
}

func (x MachineState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MachineState.Descriptor instead.
func (MachineState) EnumDescriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{1}
}

// MachineProvisioningEventState possible event states
type MachineProvisioningEventState int32

const (
	// MACHINE_PROVISIONING_EVENT_STATE_UNSPECIFIED is not specified
	MachineProvisioningEventState_MACHINE_PROVISIONING_EVENT_STATE_UNSPECIFIED MachineProvisioningEventState = 0
	// MACHINE_PROVISIONING_EVENT_STATE_CRASHLOOP machine is in crash loop
	MachineProvisioningEventState_MACHINE_PROVISIONING_EVENT_STATE_CRASHLOOP MachineProvisioningEventState = 1
	// MACHINE_PROVISIONING_EVENT_STATE_FAILED_RECLAIM machine is in failed reclaim
	MachineProvisioningEventState_MACHINE_PROVISIONING_EVENT_STATE_FAILED_RECLAIM MachineProvisioningEventState = 2 // FIXME do we need more states here
)

// Enum value maps for MachineProvisioningEventState.
var (
	MachineProvisioningEventState_name = map[int32]string{
		0: "MACHINE_PROVISIONING_EVENT_STATE_UNSPECIFIED",
		1: "MACHINE_PROVISIONING_EVENT_STATE_CRASHLOOP",
		2: "MACHINE_PROVISIONING_EVENT_STATE_FAILED_RECLAIM",
	}
	MachineProvisioningEventState_value = map[string]int32{
		"MACHINE_PROVISIONING_EVENT_STATE_UNSPECIFIED":    0,
		"MACHINE_PROVISIONING_EVENT_STATE_CRASHLOOP":      1,
		"MACHINE_PROVISIONING_EVENT_STATE_FAILED_RECLAIM": 2,
	}
)

func (x MachineProvisioningEventState) Enum() *MachineProvisioningEventState {
	p := new(MachineProvisioningEventState)
	*p = x
	return p
}

func (x MachineProvisioningEventState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MachineProvisioningEventState) Descriptor() protoreflect.EnumDescriptor {
	return file_metalstack_api_v2_machine_proto_enumTypes[2].Descriptor()
}

func (MachineProvisioningEventState) Type() protoreflect.EnumType {
	return &file_metalstack_api_v2_machine_proto_enumTypes[2]
}

func (x MachineProvisioningEventState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MachineProvisioningEventState.Descriptor instead.
func (MachineProvisioningEventState) EnumDescriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{2}
}

// MachineLiveliness specifies the liveliness of a machine
type MachineLiveliness int32

const (
	// MACHINE_LIVELINESS_UNSPECIFIED is not defined
	MachineLiveliness_MACHINE_LIVELINESS_UNSPECIFIED MachineLiveliness = 0
	// MACHINE_LIVELINESS_ALIVE liveliness is alive
	MachineLiveliness_MACHINE_LIVELINESS_ALIVE MachineLiveliness = 1
	// MACHINE_LIVELINESS_DEAD liveliness is dead
	MachineLiveliness_MACHINE_LIVELINESS_DEAD MachineLiveliness = 2
	// MACHINE_LIVELINESS_UNKNOWN liveliness is unknown
	MachineLiveliness_MACHINE_LIVELINESS_UNKNOWN MachineLiveliness = 3
)

// Enum value maps for MachineLiveliness.
var (
	MachineLiveliness_name = map[int32]string{
		0: "MACHINE_LIVELINESS_UNSPECIFIED",
		1: "MACHINE_LIVELINESS_ALIVE",
		2: "MACHINE_LIVELINESS_DEAD",
		3: "MACHINE_LIVELINESS_UNKNOWN",
	}
	MachineLiveliness_value = map[string]int32{
		"MACHINE_LIVELINESS_UNSPECIFIED": 0,
		"MACHINE_LIVELINESS_ALIVE":       1,
		"MACHINE_LIVELINESS_DEAD":        2,
		"MACHINE_LIVELINESS_UNKNOWN":     3,
	}
)

func (x MachineLiveliness) Enum() *MachineLiveliness {
	p := new(MachineLiveliness)
	*p = x
	return p
}

func (x MachineLiveliness) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MachineLiveliness) Descriptor() protoreflect.EnumDescriptor {
	return file_metalstack_api_v2_machine_proto_enumTypes[3].Descriptor()
}

func (MachineLiveliness) Type() protoreflect.EnumType {
	return &file_metalstack_api_v2_machine_proto_enumTypes[3]
}

func (x MachineLiveliness) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MachineLiveliness.Descriptor instead.
func (MachineLiveliness) EnumDescriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{3}
}

// MachineRole defines if this is a machine or a firewall
type MachineRole int32

const (
	// MACHINE_ROLE_UNSPECIFIED is unspecified
	MachineRole_MACHINE_ROLE_UNSPECIFIED MachineRole = 0
	// MACHINE_ROLE_MACHINE is a machine
	MachineRole_MACHINE_ROLE_MACHINE MachineRole = 1
	// MACHINE_ROLE_FIREWALL is a firewall
	MachineRole_MACHINE_ROLE_FIREWALL MachineRole = 2
)

// Enum value maps for MachineRole.
var (
	MachineRole_name = map[int32]string{
		0: "MACHINE_ROLE_UNSPECIFIED",
		1: "MACHINE_ROLE_MACHINE",
		2: "MACHINE_ROLE_FIREWALL",
	}
	MachineRole_value = map[string]int32{
		"MACHINE_ROLE_UNSPECIFIED": 0,
		"MACHINE_ROLE_MACHINE":     1,
		"MACHINE_ROLE_FIREWALL":    2,
	}
)

func (x MachineRole) Enum() *MachineRole {
	p := new(MachineRole)
	*p = x
	return p
}

func (x MachineRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MachineRole) Descriptor() protoreflect.EnumDescriptor {
	return file_metalstack_api_v2_machine_proto_enumTypes[4].Descriptor()
}

func (MachineRole) Type() protoreflect.EnumType {
	return &file_metalstack_api_v2_machine_proto_enumTypes[4]
}

func (x MachineRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MachineRole.Descriptor instead.
func (MachineRole) EnumDescriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{4}
}

// MachineServiceGetRequest is the request payload for a machine get request
type MachineServiceGetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of the machine to get
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Project of the machine
	Project       string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineServiceGetRequest) Reset() {
	*x = MachineServiceGetRequest{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineServiceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineServiceGetRequest) ProtoMessage() {}

func (x *MachineServiceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineServiceGetRequest.ProtoReflect.Descriptor instead.
func (*MachineServiceGetRequest) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{0}
}

func (x *MachineServiceGetRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *MachineServiceGetRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// MachineServiceGetResponse is the request payload for a machine get response
type MachineServiceGetResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Machine is the machine requested
	Machine       *Machine `protobuf:"bytes,1,opt,name=machine,proto3" json:"machine,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineServiceGetResponse) Reset() {
	*x = MachineServiceGetResponse{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineServiceGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineServiceGetResponse) ProtoMessage() {}

func (x *MachineServiceGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineServiceGetResponse.ProtoReflect.Descriptor instead.
func (*MachineServiceGetResponse) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{1}
}

func (x *MachineServiceGetResponse) GetMachine() *Machine {
	if x != nil {
		return x.Machine
	}
	return nil
}

// MachineServiceCreateRequest is the request payload for a machine create request
type MachineServiceCreateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Project of the machine
	Project       string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineServiceCreateRequest) Reset() {
	*x = MachineServiceCreateRequest{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineServiceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineServiceCreateRequest) ProtoMessage() {}

func (x *MachineServiceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineServiceCreateRequest.ProtoReflect.Descriptor instead.
func (*MachineServiceCreateRequest) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{2}
}

func (x *MachineServiceCreateRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// MachineServiceCreateResponse is the request payload for a machine create response
type MachineServiceCreateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineServiceCreateResponse) Reset() {
	*x = MachineServiceCreateResponse{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineServiceCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineServiceCreateResponse) ProtoMessage() {}

func (x *MachineServiceCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineServiceCreateResponse.ProtoReflect.Descriptor instead.
func (*MachineServiceCreateResponse) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{3}
}

// MachineServiceUpdateRequest is the request payload for a machine update request
type MachineServiceUpdateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of the machine to modify
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Project of the machine
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Description of this machine allocation
	Description *string `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Labels to update on this machine allocation
	Labels *UpdateLabels `protobuf:"bytes,6,opt,name=labels,proto3,oneof" json:"labels,omitempty"`
	// SSHPublicKeys which should be update of this machine allocation
	SshPublicKeys []string `protobuf:"bytes,11,rep,name=ssh_public_keys,json=sshPublicKeys,proto3" json:"ssh_public_keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineServiceUpdateRequest) Reset() {
	*x = MachineServiceUpdateRequest{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineServiceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineServiceUpdateRequest) ProtoMessage() {}

func (x *MachineServiceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineServiceUpdateRequest.ProtoReflect.Descriptor instead.
func (*MachineServiceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{4}
}

func (x *MachineServiceUpdateRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *MachineServiceUpdateRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *MachineServiceUpdateRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *MachineServiceUpdateRequest) GetLabels() *UpdateLabels {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MachineServiceUpdateRequest) GetSshPublicKeys() []string {
	if x != nil {
		return x.SshPublicKeys
	}
	return nil
}

// MachineServiceUpdateResponse is the request payload for a machine update response
type MachineServiceUpdateResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Machine which was updated
	Machine       *Machine `protobuf:"bytes,1,opt,name=machine,proto3" json:"machine,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineServiceUpdateResponse) Reset() {
	*x = MachineServiceUpdateResponse{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineServiceUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineServiceUpdateResponse) ProtoMessage() {}

func (x *MachineServiceUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineServiceUpdateResponse.ProtoReflect.Descriptor instead.
func (*MachineServiceUpdateResponse) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{5}
}

func (x *MachineServiceUpdateResponse) GetMachine() *Machine {
	if x != nil {
		return x.Machine
	}
	return nil
}

// MachineServiceListRequest is the request payload for a machine list request
type MachineServiceListRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Project of the machines to list
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Query to list one ore more machines
	Query         *MachineQuery `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineServiceListRequest) Reset() {
	*x = MachineServiceListRequest{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineServiceListRequest) ProtoMessage() {}

func (x *MachineServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineServiceListRequest.ProtoReflect.Descriptor instead.
func (*MachineServiceListRequest) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{6}
}

func (x *MachineServiceListRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *MachineServiceListRequest) GetQuery() *MachineQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

// MachineServiceListResponse is the request payload for a machine list response
type MachineServiceListResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Machines are the machines requested by a list request
	Machines      []*Machine `protobuf:"bytes,1,rep,name=machines,proto3" json:"machines,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineServiceListResponse) Reset() {
	*x = MachineServiceListResponse{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineServiceListResponse) ProtoMessage() {}

func (x *MachineServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineServiceListResponse.ProtoReflect.Descriptor instead.
func (*MachineServiceListResponse) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{7}
}

func (x *MachineServiceListResponse) GetMachines() []*Machine {
	if x != nil {
		return x.Machines
	}
	return nil
}

// MachineServiceDeleteRequest is the request payload for a machine delete request
type MachineServiceDeleteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of the machine to delete
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Project of the machine
	Project       string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineServiceDeleteRequest) Reset() {
	*x = MachineServiceDeleteRequest{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineServiceDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineServiceDeleteRequest) ProtoMessage() {}

func (x *MachineServiceDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineServiceDeleteRequest.ProtoReflect.Descriptor instead.
func (*MachineServiceDeleteRequest) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{8}
}

func (x *MachineServiceDeleteRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *MachineServiceDeleteRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// MachineServiceDeleteResponse is the request payload for a machine delete response
type MachineServiceDeleteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineServiceDeleteResponse) Reset() {
	*x = MachineServiceDeleteResponse{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineServiceDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineServiceDeleteResponse) ProtoMessage() {}

func (x *MachineServiceDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineServiceDeleteResponse.ProtoReflect.Descriptor instead.
func (*MachineServiceDeleteResponse) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{9}
}

// Machine represents a physical bare metal machine.
type Machine struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of this machine
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Meta for this machine
	Meta *Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// Partition where this machine resides
	Partition *Partition `protobuf:"bytes,3,opt,name=partition,proto3" json:"partition,omitempty"`
	// Rack where this machine is located
	Rack string `protobuf:"bytes,4,opt,name=rack,proto3" json:"rack,omitempty"`
	// Size of this machine
	Size *Size `protobuf:"bytes,5,opt,name=size,proto3" json:"size,omitempty"`
	// Hardware specs of this machine
	Hardware *MachineHardware `protobuf:"bytes,6,opt,name=hardware,proto3" json:"hardware,omitempty"`
	// Bios details for this machine
	Bios *MachineBios `protobuf:"bytes,7,opt,name=bios,proto3" json:"bios,omitempty"`
	// Allocation details
	Allocation *MachineAllocation `protobuf:"bytes,8,opt,name=allocation,proto3" json:"allocation,omitempty"`
	// State of this machine
	State *MachineStateDetails `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
	// LEDState indicates the state of the indicator LED on this machine
	LedState *MachineChassisIdentifyLEDState `protobuf:"bytes,10,opt,name=led_state,json=ledState,proto3" json:"led_state,omitempty"`
	// Liveliness of this machine
	Liveliness MachineLiveliness `protobuf:"varint,11,opt,name=liveliness,proto3,enum=metalstack.api.v2.MachineLiveliness" json:"liveliness,omitempty"`
	// MachineRecentProvisioningEvents contains the recent provisioning events
	RecentProvisioningEvents *MachineRecentProvisioningEvents `protobuf:"bytes,12,opt,name=recent_provisioning_events,json=recentProvisioningEvents,proto3" json:"recent_provisioning_events,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *Machine) Reset() {
	*x = Machine{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Machine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Machine) ProtoMessage() {}

func (x *Machine) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Machine.ProtoReflect.Descriptor instead.
func (*Machine) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{10}
}

func (x *Machine) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Machine) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Machine) GetPartition() *Partition {
	if x != nil {
		return x.Partition
	}
	return nil
}

func (x *Machine) GetRack() string {
	if x != nil {
		return x.Rack
	}
	return ""
}

func (x *Machine) GetSize() *Size {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *Machine) GetHardware() *MachineHardware {
	if x != nil {
		return x.Hardware
	}
	return nil
}

func (x *Machine) GetBios() *MachineBios {
	if x != nil {
		return x.Bios
	}
	return nil
}

func (x *Machine) GetAllocation() *MachineAllocation {
	if x != nil {
		return x.Allocation
	}
	return nil
}

func (x *Machine) GetState() *MachineStateDetails {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Machine) GetLedState() *MachineChassisIdentifyLEDState {
	if x != nil {
		return x.LedState
	}
	return nil
}

func (x *Machine) GetLiveliness() MachineLiveliness {
	if x != nil {
		return x.Liveliness
	}
	return MachineLiveliness_MACHINE_LIVELINESS_UNSPECIFIED
}

func (x *Machine) GetRecentProvisioningEvents() *MachineRecentProvisioningEvents {
	if x != nil {
		return x.RecentProvisioningEvents
	}
	return nil
}

// MachineAllocation contains properties if this machine is allocated
type MachineAllocation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of this machine allocation
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Meta for this machine allocation
	Meta *Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// Name of this allocation
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Description of this allocation
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Created By indicates who created this machine allocation
	CreatedBy string `protobuf:"bytes,5,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Project of the allocation
	Project string `protobuf:"bytes,6,opt,name=project,proto3" json:"project,omitempty"`
	// Image to be used to install on this machine
	Image *Image `protobuf:"bytes,7,opt,name=image,proto3" json:"image,omitempty"`
	// FilesystemLayout to create on the disks
	FilesystemLayout *FilesystemLayout `protobuf:"bytes,8,opt,name=filesystem_layout,json=filesystemLayout,proto3" json:"filesystem_layout,omitempty"`
	// Networks this machine should be attached to
	Networks []*MachineNetwork `protobuf:"bytes,9,rep,name=networks,proto3" json:"networks,omitempty"`
	// Hostname of the allocated machine
	Hostname string `protobuf:"bytes,10,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// SSHPublicKeys which should be installed on this machine
	SshPublicKeys []string `protobuf:"bytes,11,rep,name=ssh_public_keys,json=sshPublicKeys,proto3" json:"ssh_public_keys,omitempty"`
	// Userdata contains instructions required to bootstrap the machine
	// AWS limits the max userdata size to 16k, lets allow twice as much
	// TODO must be enforced in the create request
	Userdata string `protobuf:"bytes,12,opt,name=userdata,proto3" json:"userdata,omitempty"`
	// BootInfo contains details which are required the machine from disk // FIXME is this still required
	BootInfo *BootInfo `protobuf:"bytes,13,opt,name=boot_info,json=bootInfo,proto3" json:"boot_info,omitempty"`
	// Role defines if this is machine or a firewall
	Role MachineRole `protobuf:"varint,14,opt,name=role,proto3,enum=metalstack.api.v2.MachineRole" json:"role,omitempty"`
	// FirewallRules to be applied if this is a firewall
	FirewallRules *FirewallRules `protobuf:"bytes,15,opt,name=firewall_rules,json=firewallRules,proto3" json:"firewall_rules,omitempty"`
	// DNSServers for this machine
	DnsServer []*DNSServer `protobuf:"bytes,16,rep,name=dns_server,json=dnsServer,proto3" json:"dns_server,omitempty"`
	// NTPServers for this machine
	NtpServer []*NTPServer `protobuf:"bytes,17,rep,name=ntp_server,json=ntpServer,proto3" json:"ntp_server,omitempty"`
	// VPN connection configuration
	Vpn           *MachineVPN `protobuf:"bytes,18,opt,name=vpn,proto3" json:"vpn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineAllocation) Reset() {
	*x = MachineAllocation{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineAllocation) ProtoMessage() {}

func (x *MachineAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineAllocation.ProtoReflect.Descriptor instead.
func (*MachineAllocation) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{11}
}

func (x *MachineAllocation) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *MachineAllocation) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *MachineAllocation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MachineAllocation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MachineAllocation) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *MachineAllocation) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *MachineAllocation) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *MachineAllocation) GetFilesystemLayout() *FilesystemLayout {
	if x != nil {
		return x.FilesystemLayout
	}
	return nil
}

func (x *MachineAllocation) GetNetworks() []*MachineNetwork {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *MachineAllocation) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *MachineAllocation) GetSshPublicKeys() []string {
	if x != nil {
		return x.SshPublicKeys
	}
	return nil
}

func (x *MachineAllocation) GetUserdata() string {
	if x != nil {
		return x.Userdata
	}
	return ""
}

func (x *MachineAllocation) GetBootInfo() *BootInfo {
	if x != nil {
		return x.BootInfo
	}
	return nil
}

func (x *MachineAllocation) GetRole() MachineRole {
	if x != nil {
		return x.Role
	}
	return MachineRole_MACHINE_ROLE_UNSPECIFIED
}

func (x *MachineAllocation) GetFirewallRules() *FirewallRules {
	if x != nil {
		return x.FirewallRules
	}
	return nil
}

func (x *MachineAllocation) GetDnsServer() []*DNSServer {
	if x != nil {
		return x.DnsServer
	}
	return nil
}

func (x *MachineAllocation) GetNtpServer() []*NTPServer {
	if x != nil {
		return x.NtpServer
	}
	return nil
}

func (x *MachineAllocation) GetVpn() *MachineVPN {
	if x != nil {
		return x.Vpn
	}
	return nil
}

// FirewallRules can be defined during firewall allocation
type FirewallRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Egress list of egress rules to be deployed during firewall allocation
	Egress []*FirewallEgressRule `protobuf:"bytes,1,rep,name=egress,proto3" json:"egress,omitempty"`
	// Ingress list of ingress rules to be deployed during firewall allocation
	Ingress       []*FirewallIngressRule `protobuf:"bytes,2,rep,name=ingress,proto3" json:"ingress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FirewallRules) Reset() {
	*x = FirewallRules{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FirewallRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirewallRules) ProtoMessage() {}

func (x *FirewallRules) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirewallRules.ProtoReflect.Descriptor instead.
func (*FirewallRules) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{12}
}

func (x *FirewallRules) GetEgress() []*FirewallEgressRule {
	if x != nil {
		return x.Egress
	}
	return nil
}

func (x *FirewallRules) GetIngress() []*FirewallIngressRule {
	if x != nil {
		return x.Ingress
	}
	return nil
}

// FirewallEgressRule defines rules for outgoing traffic
type FirewallEgressRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Protocol the protocol for the rule, defaults to tcp
	Protocol IPProtocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=metalstack.api.v2.IPProtocol" json:"protocol,omitempty"`
	// Ports the ports affected by this rule
	Ports []uint32 `protobuf:"varint,2,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// To the destination cidrs affected by this rule
	To []string `protobuf:"bytes,3,rep,name=to,proto3" json:"to,omitempty"`
	// Comment for this rule
	Comment       string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FirewallEgressRule) Reset() {
	*x = FirewallEgressRule{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FirewallEgressRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirewallEgressRule) ProtoMessage() {}

func (x *FirewallEgressRule) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirewallEgressRule.ProtoReflect.Descriptor instead.
func (*FirewallEgressRule) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{13}
}

func (x *FirewallEgressRule) GetProtocol() IPProtocol {
	if x != nil {
		return x.Protocol
	}
	return IPProtocol_IP_PROTOCOL_UNSPECIFIED
}

func (x *FirewallEgressRule) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *FirewallEgressRule) GetTo() []string {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *FirewallEgressRule) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

// FirewallIngressRule defines rules for incoming traffic
type FirewallIngressRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Protocol the protocol for the rule, defaults to tcp
	Protocol IPProtocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=metalstack.api.v2.IPProtocol" json:"protocol,omitempty"`
	// Ports the ports affected by this rule
	Ports []uint32 `protobuf:"varint,2,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// To the destination cidrs affected by this rule
	To []string `protobuf:"bytes,3,rep,name=to,proto3" json:"to,omitempty"`
	// From the source cidrs affected by this rule
	From []string `protobuf:"bytes,4,rep,name=from,proto3" json:"from,omitempty"`
	// Comment for this rule
	Comment       string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FirewallIngressRule) Reset() {
	*x = FirewallIngressRule{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FirewallIngressRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirewallIngressRule) ProtoMessage() {}

func (x *FirewallIngressRule) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirewallIngressRule.ProtoReflect.Descriptor instead.
func (*FirewallIngressRule) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{14}
}

func (x *FirewallIngressRule) GetProtocol() IPProtocol {
	if x != nil {
		return x.Protocol
	}
	return IPProtocol_IP_PROTOCOL_UNSPECIFIED
}

func (x *FirewallIngressRule) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *FirewallIngressRule) GetTo() []string {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *FirewallIngressRule) GetFrom() []string {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *FirewallIngressRule) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

// MachineNetwork contains details which network should be created on a allocated machine
type MachineNetwork struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Network the networkID of the allocated machine in this vrf
	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	// Prefixes the prefixes of this network
	Prefixes []string `protobuf:"bytes,2,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
	// DestinationPrefixes prefixes that are reachable within this network
	DestinationPrefixes []string `protobuf:"bytes,3,rep,name=destination_prefixes,json=destinationPrefixes,proto3" json:"destination_prefixes,omitempty"`
	// IPs the ip addresses of the allocated machine in this vrf
	Ips []string `protobuf:"bytes,4,rep,name=ips,proto3" json:"ips,omitempty"`
	// NetworkType the type of network of this vrf
	NetworkType NetworkType `protobuf:"varint,5,opt,name=network_type,json=networkType,proto3,enum=metalstack.api.v2.NetworkType" json:"network_type,omitempty"`
	// NatType what type of nat if any should be used
	NatType NATType `protobuf:"varint,6,opt,name=nat_type,json=natType,proto3,enum=metalstack.api.v2.NATType" json:"nat_type,omitempty"`
	// VRF the vrf id
	Vrf uint64 `protobuf:"varint,7,opt,name=vrf,proto3" json:"vrf,omitempty"`
	// ASN the autonomous system number for this network
	Asn           uint64 `protobuf:"varint,8,opt,name=asn,proto3" json:"asn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineNetwork) Reset() {
	*x = MachineNetwork{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineNetwork) ProtoMessage() {}

func (x *MachineNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineNetwork.ProtoReflect.Descriptor instead.
func (*MachineNetwork) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{15}
}

func (x *MachineNetwork) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *MachineNetwork) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

func (x *MachineNetwork) GetDestinationPrefixes() []string {
	if x != nil {
		return x.DestinationPrefixes
	}
	return nil
}

func (x *MachineNetwork) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *MachineNetwork) GetNetworkType() NetworkType {
	if x != nil {
		return x.NetworkType
	}
	return NetworkType_NETWORK_TYPE_UNSPECIFIED
}

func (x *MachineNetwork) GetNatType() NATType {
	if x != nil {
		return x.NatType
	}
	return NATType_NAT_TYPE_UNSPECIFIED
}

func (x *MachineNetwork) GetVrf() uint64 {
	if x != nil {
		return x.Vrf
	}
	return 0
}

func (x *MachineNetwork) GetAsn() uint64 {
	if x != nil {
		return x.Asn
	}
	return 0
}

// MachineHardware contains hardware details
type MachineHardware struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Memory the total memory of the machine in bytes
	Memory uint64 `protobuf:"varint,1,opt,name=memory,proto3" json:"memory,omitempty"`
	// Disks the list of block devices of this machine
	Disks []*MachineBlockDevice `protobuf:"bytes,3,rep,name=disks,proto3" json:"disks,omitempty"`
	// CPUs the cpu details
	Cpus []*MetalCPU `protobuf:"bytes,4,rep,name=cpus,proto3" json:"cpus,omitempty"`
	// GPUs the gpu details
	Gpus []*MetalGPU `protobuf:"bytes,5,rep,name=gpus,proto3" json:"gpus,omitempty"`
	// Nics the list of network interfaces of this machine
	Nics          []*MachineNic `protobuf:"bytes,6,rep,name=nics,proto3" json:"nics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineHardware) Reset() {
	*x = MachineHardware{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineHardware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineHardware) ProtoMessage() {}

func (x *MachineHardware) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineHardware.ProtoReflect.Descriptor instead.
func (*MachineHardware) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{16}
}

func (x *MachineHardware) GetMemory() uint64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *MachineHardware) GetDisks() []*MachineBlockDevice {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *MachineHardware) GetCpus() []*MetalCPU {
	if x != nil {
		return x.Cpus
	}
	return nil
}

func (x *MachineHardware) GetGpus() []*MetalGPU {
	if x != nil {
		return x.Gpus
	}
	return nil
}

func (x *MachineHardware) GetNics() []*MachineNic {
	if x != nil {
		return x.Nics
	}
	return nil
}

// MetalCPU contains details of a cpu in this machine
type MetalCPU struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Vendor of this cpu
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Model of this cpu
	Model string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	// Cores of this cpu
	Cores uint32 `protobuf:"varint,3,opt,name=cores,proto3" json:"cores,omitempty"`
	// Threads of this cpu
	Threads       uint32 `protobuf:"varint,4,opt,name=threads,proto3" json:"threads,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetalCPU) Reset() {
	*x = MetalCPU{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetalCPU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetalCPU) ProtoMessage() {}

func (x *MetalCPU) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetalCPU.ProtoReflect.Descriptor instead.
func (*MetalCPU) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{17}
}

func (x *MetalCPU) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *MetalCPU) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *MetalCPU) GetCores() uint32 {
	if x != nil {
		return x.Cores
	}
	return 0
}

func (x *MetalCPU) GetThreads() uint32 {
	if x != nil {
		return x.Threads
	}
	return 0
}

// MetalGPU contains details of a gpu in this machine
type MetalGPU struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Vendor of this gpu
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Model of this gpu
	Model         string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetalGPU) Reset() {
	*x = MetalGPU{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetalGPU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetalGPU) ProtoMessage() {}

func (x *MetalGPU) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetalGPU.ProtoReflect.Descriptor instead.
func (*MetalGPU) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{18}
}

func (x *MetalGPU) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *MetalGPU) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

// MachineNic contains details of a network interface of this machine
type MachineNic struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Mac the macaddress of this interface
	Mac string `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	// Name of this interface
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Identifier the unique identifier of this network interface
	Identifier string `protobuf:"bytes,3,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Neighbors the neighbors visible to this network interface
	Neighbors     []*MachineNic `protobuf:"bytes,4,rep,name=neighbors,proto3" json:"neighbors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineNic) Reset() {
	*x = MachineNic{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineNic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineNic) ProtoMessage() {}

func (x *MachineNic) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineNic.ProtoReflect.Descriptor instead.
func (*MachineNic) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{19}
}

func (x *MachineNic) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *MachineNic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MachineNic) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *MachineNic) GetNeighbors() []*MachineNic {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

// MachineBlockDevice contains details of a block device of this machine
type MachineBlockDevice struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of this block device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Size of this block device in bytes
	Size          uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineBlockDevice) Reset() {
	*x = MachineBlockDevice{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineBlockDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineBlockDevice) ProtoMessage() {}

func (x *MachineBlockDevice) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineBlockDevice.ProtoReflect.Descriptor instead.
func (*MachineBlockDevice) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{20}
}

func (x *MachineBlockDevice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MachineBlockDevice) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// MachineState details about the machine state
type MachineStateDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// State the state of this machine. empty means available for all
	State MachineState `protobuf:"varint,1,opt,name=state,proto3,enum=metalstack.api.v2.MachineState" json:"state,omitempty"`
	// Description a description why this machine is in the given state
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Issuer the user that changed the state
	Issuer string `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// MetalHammerVersion the version of metal hammer which put the machine in waiting state
	MetalHammerVersion string `protobuf:"bytes,4,opt,name=metal_hammer_version,json=metalHammerVersion,proto3" json:"metal_hammer_version,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MachineStateDetails) Reset() {
	*x = MachineStateDetails{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineStateDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineStateDetails) ProtoMessage() {}

func (x *MachineStateDetails) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineStateDetails.ProtoReflect.Descriptor instead.
func (*MachineStateDetails) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{21}
}

func (x *MachineStateDetails) GetState() MachineState {
	if x != nil {
		return x.State
	}
	return MachineState_MACHINE_STATE_UNSPECIFIED
}

func (x *MachineStateDetails) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MachineStateDetails) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *MachineStateDetails) GetMetalHammerVersion() string {
	if x != nil {
		return x.MetalHammerVersion
	}
	return ""
}

// MachineChassisIdentifyLEDState describes the identifier led state
type MachineChassisIdentifyLEDState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Value the state of this chassis identify LED. empty means LED-OFF
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Description a description why this chassis identify LED is in the given state
	Description   string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineChassisIdentifyLEDState) Reset() {
	*x = MachineChassisIdentifyLEDState{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineChassisIdentifyLEDState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineChassisIdentifyLEDState) ProtoMessage() {}

func (x *MachineChassisIdentifyLEDState) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineChassisIdentifyLEDState.ProtoReflect.Descriptor instead.
func (*MachineChassisIdentifyLEDState) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{22}
}

func (x *MachineChassisIdentifyLEDState) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *MachineChassisIdentifyLEDState) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// MachineBios contains BIOS details of this machine
type MachineBios struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version the bios version
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Vendor the bios vendor
	Vendor string `protobuf:"bytes,2,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Date the bios date as string because every vendor has different ideas howto describe the date
	Date          string `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineBios) Reset() {
	*x = MachineBios{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineBios) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineBios) ProtoMessage() {}

func (x *MachineBios) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineBios.ProtoReflect.Descriptor instead.
func (*MachineBios) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{23}
}

func (x *MachineBios) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *MachineBios) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *MachineBios) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

// MachineRecentProvisioningEvents the recent provisioning events for this machine
type MachineRecentProvisioningEvents struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Events the log of recent machine provisioning events
	Events []*MachineProvisioningEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	// LastEventTime the time where the last event was received
	LastEventTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_event_time,json=lastEventTime,proto3" json:"last_event_time,omitempty"`
	// LastErrorEvent the last erroneous event received
	LastErrorEvent *MachineProvisioningEvent `protobuf:"bytes,3,opt,name=last_error_event,json=lastErrorEvent,proto3" json:"last_error_event,omitempty"`
	// State can be either CrashLoop, FailedReclaim or something else
	// FIXME can this be a slice
	State         MachineProvisioningEventState `protobuf:"varint,4,opt,name=state,proto3,enum=metalstack.api.v2.MachineProvisioningEventState" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineRecentProvisioningEvents) Reset() {
	*x = MachineRecentProvisioningEvents{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineRecentProvisioningEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineRecentProvisioningEvents) ProtoMessage() {}

func (x *MachineRecentProvisioningEvents) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineRecentProvisioningEvents.ProtoReflect.Descriptor instead.
func (*MachineRecentProvisioningEvents) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{24}
}

func (x *MachineRecentProvisioningEvents) GetEvents() []*MachineProvisioningEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *MachineRecentProvisioningEvents) GetLastEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEventTime
	}
	return nil
}

func (x *MachineRecentProvisioningEvents) GetLastErrorEvent() *MachineProvisioningEvent {
	if x != nil {
		return x.LastErrorEvent
	}
	return nil
}

func (x *MachineRecentProvisioningEvents) GetState() MachineProvisioningEventState {
	if x != nil {
		return x.State
	}
	return MachineProvisioningEventState_MACHINE_PROVISIONING_EVENT_STATE_UNSPECIFIED
}

// MachineProvisioningEvent is a event which has occurred during provisioning
type MachineProvisioningEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Time the time that this event was received
	Time *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// Event the event emitted by the machine
	Event string `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	// Message an additional message to add to the event
	Message       string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineProvisioningEvent) Reset() {
	*x = MachineProvisioningEvent{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineProvisioningEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineProvisioningEvent) ProtoMessage() {}

func (x *MachineProvisioningEvent) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineProvisioningEvent.ProtoReflect.Descriptor instead.
func (*MachineProvisioningEvent) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{25}
}

func (x *MachineProvisioningEvent) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *MachineProvisioningEvent) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *MachineProvisioningEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// BootInfo
// FIXME is only used for reinstall, can be removed ?
type BootInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BootInfo) Reset() {
	*x = BootInfo{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BootInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootInfo) ProtoMessage() {}

func (x *BootInfo) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootInfo.ProtoReflect.Descriptor instead.
func (*BootInfo) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{26}
}

// MachineVPN contains configuration data for the VPN connection
type MachineVPN struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Address of VPN control plane
	ControlPlaneAddress string `protobuf:"bytes,1,opt,name=control_plane_address,json=controlPlaneAddress,proto3" json:"control_plane_address,omitempty"`
	// Auth key used to connect to VPN
	AuthKey string `protobuf:"bytes,2,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
	// Connected indicate if this machine is connected to the VPN
	Connected     bool `protobuf:"varint,3,opt,name=connected,proto3" json:"connected,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineVPN) Reset() {
	*x = MachineVPN{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineVPN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineVPN) ProtoMessage() {}

func (x *MachineVPN) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineVPN.ProtoReflect.Descriptor instead.
func (*MachineVPN) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{27}
}

func (x *MachineVPN) GetControlPlaneAddress() string {
	if x != nil {
		return x.ControlPlaneAddress
	}
	return ""
}

func (x *MachineVPN) GetAuthKey() string {
	if x != nil {
		return x.AuthKey
	}
	return ""
}

func (x *MachineVPN) GetConnected() bool {
	if x != nil {
		return x.Connected
	}
	return false
}

// MachineQuery contains fields which can be specified to list specific machines.
type MachineQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of the machine to get
	Uuid *string `protobuf:"bytes,1,opt,name=uuid,proto3,oneof" json:"uuid,omitempty"`
	// Name of the machine to get
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Partition of the machine to get
	Partition *string `protobuf:"bytes,3,opt,name=partition,proto3,oneof" json:"partition,omitempty"`
	// Size of the machine to get
	Size *string `protobuf:"bytes,4,opt,name=size,proto3,oneof" json:"size,omitempty"`
	// Rack of the machine to get
	Rack *string `protobuf:"bytes,5,opt,name=rack,proto3,oneof" json:"rack,omitempty"`
	// Labels for which this machine should get filtered
	Labels *Labels `protobuf:"bytes,6,opt,name=labels,proto3,oneof" json:"labels,omitempty"`
	// Allocation specific machine queries
	Allocation *MachineAllocationQuery `protobuf:"bytes,7,opt,name=allocation,proto3,oneof" json:"allocation,omitempty"`
	// Network specific machine queries
	Network *MachineNetworkQuery `protobuf:"bytes,8,opt,name=network,proto3,oneof" json:"network,omitempty"`
	// Nic specific machine queries
	Nic *MachineNicQuery `protobuf:"bytes,9,opt,name=nic,proto3,oneof" json:"nic,omitempty"`
	// Disk specific machine queries
	Disk *MachineDiskQuery `protobuf:"bytes,10,opt,name=disk,proto3,oneof" json:"disk,omitempty"`
	// IPMI specific machine queries
	Ipmi *MachineIPMIQuery `protobuf:"bytes,11,opt,name=ipmi,proto3,oneof" json:"ipmi,omitempty"`
	// FRU specific machine queries
	Fru *MachineFRUQuery `protobuf:"bytes,12,opt,name=fru,proto3,oneof" json:"fru,omitempty"`
	// Hardware specific machine query
	Hardware *MachineHardwareQuery `protobuf:"bytes,13,opt,name=hardware,proto3,oneof" json:"hardware,omitempty"`
	// State this machine has
	State         *MachineState `protobuf:"varint,14,opt,name=state,proto3,enum=metalstack.api.v2.MachineState,oneof" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineQuery) Reset() {
	*x = MachineQuery{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineQuery) ProtoMessage() {}

func (x *MachineQuery) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineQuery.ProtoReflect.Descriptor instead.
func (*MachineQuery) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{28}
}

func (x *MachineQuery) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *MachineQuery) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MachineQuery) GetPartition() string {
	if x != nil && x.Partition != nil {
		return *x.Partition
	}
	return ""
}

func (x *MachineQuery) GetSize() string {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return ""
}

func (x *MachineQuery) GetRack() string {
	if x != nil && x.Rack != nil {
		return *x.Rack
	}
	return ""
}

func (x *MachineQuery) GetLabels() *Labels {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MachineQuery) GetAllocation() *MachineAllocationQuery {
	if x != nil {
		return x.Allocation
	}
	return nil
}

func (x *MachineQuery) GetNetwork() *MachineNetworkQuery {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *MachineQuery) GetNic() *MachineNicQuery {
	if x != nil {
		return x.Nic
	}
	return nil
}

func (x *MachineQuery) GetDisk() *MachineDiskQuery {
	if x != nil {
		return x.Disk
	}
	return nil
}

func (x *MachineQuery) GetIpmi() *MachineIPMIQuery {
	if x != nil {
		return x.Ipmi
	}
	return nil
}

func (x *MachineQuery) GetFru() *MachineFRUQuery {
	if x != nil {
		return x.Fru
	}
	return nil
}

func (x *MachineQuery) GetHardware() *MachineHardwareQuery {
	if x != nil {
		return x.Hardware
	}
	return nil
}

func (x *MachineQuery) GetState() MachineState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return MachineState_MACHINE_STATE_UNSPECIFIED
}

// MachineAllocationQuery allocation specific query parameters
type MachineAllocationQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of the allocation of the machine to get
	Uuid *string `protobuf:"bytes,1,opt,name=uuid,proto3,oneof" json:"uuid,omitempty"`
	// Name of the machine to get
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Project of the machine to get
	Project *string `protobuf:"bytes,3,opt,name=project,proto3,oneof" json:"project,omitempty"`
	// Image of the machine to get
	Image *string `protobuf:"bytes,4,opt,name=image,proto3,oneof" json:"image,omitempty"`
	// FilesystemLayout of the machine to get
	FilesystemLayout *string `protobuf:"bytes,5,opt,name=filesystem_layout,json=filesystemLayout,proto3,oneof" json:"filesystem_layout,omitempty"`
	// Hostname of the machine to get
	Hostname *string `protobuf:"bytes,6,opt,name=hostname,proto3,oneof" json:"hostname,omitempty"`
	// Role of this machine
	Role *MachineRole `protobuf:"varint,7,opt,name=role,proto3,enum=metalstack.api.v2.MachineRole,oneof" json:"role,omitempty"`
	// Succeeded search for machine with succeeded allocation
	Succeeded     *bool `protobuf:"varint,8,opt,name=succeeded,proto3,oneof" json:"succeeded,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineAllocationQuery) Reset() {
	*x = MachineAllocationQuery{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineAllocationQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineAllocationQuery) ProtoMessage() {}

func (x *MachineAllocationQuery) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineAllocationQuery.ProtoReflect.Descriptor instead.
func (*MachineAllocationQuery) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{29}
}

func (x *MachineAllocationQuery) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *MachineAllocationQuery) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MachineAllocationQuery) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *MachineAllocationQuery) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

func (x *MachineAllocationQuery) GetFilesystemLayout() string {
	if x != nil && x.FilesystemLayout != nil {
		return *x.FilesystemLayout
	}
	return ""
}

func (x *MachineAllocationQuery) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *MachineAllocationQuery) GetRole() MachineRole {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return MachineRole_MACHINE_ROLE_UNSPECIFIED
}

func (x *MachineAllocationQuery) GetSucceeded() bool {
	if x != nil && x.Succeeded != nil {
		return *x.Succeeded
	}
	return false
}

// MachineNetworkQuery network specific machine queries
type MachineNetworkQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Networks this machine is connected to
	Networks []string `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
	// Prefixes this machine is connected to
	Prefixes []string `protobuf:"bytes,2,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
	// DestinationPrefixes this machine is connected to
	DestinationPrefixes []string `protobuf:"bytes,3,rep,name=destination_prefixes,json=destinationPrefixes,proto3" json:"destination_prefixes,omitempty"`
	// IPs this machine has
	Ips []string `protobuf:"bytes,4,rep,name=ips,proto3" json:"ips,omitempty"`
	// VRFs this machine is connected to
	Vrfs []uint64 `protobuf:"varint,5,rep,packed,name=vrfs,proto3" json:"vrfs,omitempty"`
	// ASNs this machine is connected to
	Asns          []uint64 `protobuf:"varint,6,rep,packed,name=asns,proto3" json:"asns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineNetworkQuery) Reset() {
	*x = MachineNetworkQuery{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineNetworkQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineNetworkQuery) ProtoMessage() {}

func (x *MachineNetworkQuery) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineNetworkQuery.ProtoReflect.Descriptor instead.
func (*MachineNetworkQuery) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{30}
}

func (x *MachineNetworkQuery) GetNetworks() []string {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *MachineNetworkQuery) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

func (x *MachineNetworkQuery) GetDestinationPrefixes() []string {
	if x != nil {
		return x.DestinationPrefixes
	}
	return nil
}

func (x *MachineNetworkQuery) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *MachineNetworkQuery) GetVrfs() []uint64 {
	if x != nil {
		return x.Vrfs
	}
	return nil
}

func (x *MachineNetworkQuery) GetAsns() []uint64 {
	if x != nil {
		return x.Asns
	}
	return nil
}

// MachineNicQuery nic specific machine queries
type MachineNicQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Macs this machine nic has
	Macs []string `protobuf:"bytes,1,rep,name=macs,proto3" json:"macs,omitempty"`
	// Names this machine nic has
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	// VRFs this machine nic has
	Vrfs []uint64 `protobuf:"varint,3,rep,packed,name=vrfs,proto3" json:"vrfs,omitempty"`
	// NeighborMacs this machine nic has
	NeighborMacs []string `protobuf:"bytes,4,rep,name=neighbor_macs,json=neighborMacs,proto3" json:"neighbor_macs,omitempty"`
	// NeighborNames this machine nic has
	NeighborNames []string `protobuf:"bytes,5,rep,name=neighbor_names,json=neighborNames,proto3" json:"neighbor_names,omitempty"`
	// NeighborVRFs this machine nic has
	NeighborVrfs  []uint64 `protobuf:"varint,6,rep,packed,name=neighbor_vrfs,json=neighborVrfs,proto3" json:"neighbor_vrfs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineNicQuery) Reset() {
	*x = MachineNicQuery{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineNicQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineNicQuery) ProtoMessage() {}

func (x *MachineNicQuery) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineNicQuery.ProtoReflect.Descriptor instead.
func (*MachineNicQuery) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{31}
}

func (x *MachineNicQuery) GetMacs() []string {
	if x != nil {
		return x.Macs
	}
	return nil
}

func (x *MachineNicQuery) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *MachineNicQuery) GetVrfs() []uint64 {
	if x != nil {
		return x.Vrfs
	}
	return nil
}

func (x *MachineNicQuery) GetNeighborMacs() []string {
	if x != nil {
		return x.NeighborMacs
	}
	return nil
}

func (x *MachineNicQuery) GetNeighborNames() []string {
	if x != nil {
		return x.NeighborNames
	}
	return nil
}

func (x *MachineNicQuery) GetNeighborVrfs() []uint64 {
	if x != nil {
		return x.NeighborVrfs
	}
	return nil
}

// MachineDiskQuery disk specific machine queries
type MachineDiskQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Names of disks in this machine
	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	// Sizes of disks in this machine
	Sizes         []uint64 `protobuf:"varint,2,rep,packed,name=sizes,proto3" json:"sizes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineDiskQuery) Reset() {
	*x = MachineDiskQuery{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineDiskQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineDiskQuery) ProtoMessage() {}

func (x *MachineDiskQuery) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineDiskQuery.ProtoReflect.Descriptor instead.
func (*MachineDiskQuery) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{32}
}

func (x *MachineDiskQuery) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *MachineDiskQuery) GetSizes() []uint64 {
	if x != nil {
		return x.Sizes
	}
	return nil
}

// MachineIPMIQuery machine ipmi specific machine queries
type MachineIPMIQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Address of the ipmi system of this machine
	Address *string `protobuf:"bytes,1,opt,name=address,proto3,oneof" json:"address,omitempty"`
	// Mac of the ipmi system of this machine
	Mac *string `protobuf:"bytes,2,opt,name=mac,proto3,oneof" json:"mac,omitempty"`
	// User of the ipmi system of this machine
	User *string `protobuf:"bytes,3,opt,name=user,proto3,oneof" json:"user,omitempty"`
	// Interface of the ipmi system of this machine
	Interface     *string `protobuf:"bytes,4,opt,name=interface,proto3,oneof" json:"interface,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineIPMIQuery) Reset() {
	*x = MachineIPMIQuery{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineIPMIQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineIPMIQuery) ProtoMessage() {}

func (x *MachineIPMIQuery) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineIPMIQuery.ProtoReflect.Descriptor instead.
func (*MachineIPMIQuery) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{33}
}

func (x *MachineIPMIQuery) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *MachineIPMIQuery) GetMac() string {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return ""
}

func (x *MachineIPMIQuery) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *MachineIPMIQuery) GetInterface() string {
	if x != nil && x.Interface != nil {
		return *x.Interface
	}
	return ""
}

// MachineFRUQuery machine fru specific machine queries
type MachineFRUQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ChassisPartNumber of this machine
	ChassisPartNumber *string `protobuf:"bytes,1,opt,name=chassis_part_number,json=chassisPartNumber,proto3,oneof" json:"chassis_part_number,omitempty"`
	// ChassisPartSerial of this machine
	ChassisPartSerial *string `protobuf:"bytes,2,opt,name=chassis_part_serial,json=chassisPartSerial,proto3,oneof" json:"chassis_part_serial,omitempty"`
	// BoardMFG of this machine
	BoardMfg *string `protobuf:"bytes,3,opt,name=board_mfg,json=boardMfg,proto3,oneof" json:"board_mfg,omitempty"`
	// BoardSerial of this machine
	BoardSerial *string `protobuf:"bytes,4,opt,name=board_serial,json=boardSerial,proto3,oneof" json:"board_serial,omitempty"`
	// BoardPartNumber of this machine
	BoardPartNumber *string `protobuf:"bytes,5,opt,name=board_part_number,json=boardPartNumber,proto3,oneof" json:"board_part_number,omitempty"`
	// ProductManufacturer of this machine
	ProductManufacturer *string `protobuf:"bytes,6,opt,name=product_manufacturer,json=productManufacturer,proto3,oneof" json:"product_manufacturer,omitempty"`
	// ProductPartNumber of this machine
	ProductPartNumber *string `protobuf:"bytes,7,opt,name=product_part_number,json=productPartNumber,proto3,oneof" json:"product_part_number,omitempty"`
	// ProductSerial of this machine
	ProductSerial *string `protobuf:"bytes,8,opt,name=product_serial,json=productSerial,proto3,oneof" json:"product_serial,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineFRUQuery) Reset() {
	*x = MachineFRUQuery{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineFRUQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineFRUQuery) ProtoMessage() {}

func (x *MachineFRUQuery) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineFRUQuery.ProtoReflect.Descriptor instead.
func (*MachineFRUQuery) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{34}
}

func (x *MachineFRUQuery) GetChassisPartNumber() string {
	if x != nil && x.ChassisPartNumber != nil {
		return *x.ChassisPartNumber
	}
	return ""
}

func (x *MachineFRUQuery) GetChassisPartSerial() string {
	if x != nil && x.ChassisPartSerial != nil {
		return *x.ChassisPartSerial
	}
	return ""
}

func (x *MachineFRUQuery) GetBoardMfg() string {
	if x != nil && x.BoardMfg != nil {
		return *x.BoardMfg
	}
	return ""
}

func (x *MachineFRUQuery) GetBoardSerial() string {
	if x != nil && x.BoardSerial != nil {
		return *x.BoardSerial
	}
	return ""
}

func (x *MachineFRUQuery) GetBoardPartNumber() string {
	if x != nil && x.BoardPartNumber != nil {
		return *x.BoardPartNumber
	}
	return ""
}

func (x *MachineFRUQuery) GetProductManufacturer() string {
	if x != nil && x.ProductManufacturer != nil {
		return *x.ProductManufacturer
	}
	return ""
}

func (x *MachineFRUQuery) GetProductPartNumber() string {
	if x != nil && x.ProductPartNumber != nil {
		return *x.ProductPartNumber
	}
	return ""
}

func (x *MachineFRUQuery) GetProductSerial() string {
	if x != nil && x.ProductSerial != nil {
		return *x.ProductSerial
	}
	return ""
}

// MachineHardwareQuery machine hardware specific machine queries
type MachineHardwareQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Memory the total memory of the machine in bytes
	Memory *uint64 `protobuf:"varint,1,opt,name=memory,proto3,oneof" json:"memory,omitempty"`
	// CPUCores the number of cpu cores
	CpuCores      *uint32 `protobuf:"varint,2,opt,name=cpu_cores,json=cpuCores,proto3,oneof" json:"cpu_cores,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineHardwareQuery) Reset() {
	*x = MachineHardwareQuery{}
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineHardwareQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineHardwareQuery) ProtoMessage() {}

func (x *MachineHardwareQuery) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_machine_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineHardwareQuery.ProtoReflect.Descriptor instead.
func (*MachineHardwareQuery) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_machine_proto_rawDescGZIP(), []int{35}
}

func (x *MachineHardwareQuery) GetMemory() uint64 {
	if x != nil && x.Memory != nil {
		return *x.Memory
	}
	return 0
}

func (x *MachineHardwareQuery) GetCpuCores() uint32 {
	if x != nil && x.CpuCores != nil {
		return *x.CpuCores
	}
	return 0
}

var File_metalstack_api_v2_machine_proto protoreflect.FileDescriptor

const file_metalstack_api_v2_machine_proto_rawDesc = "" +
	"\n" +
	"\x1fmetalstack/api/v2/machine.proto\x12\x11metalstack.api.v2\x1a\x1bbuf/validate/validate.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1emetalstack/api/v2/common.proto\x1a\"metalstack/api/v2/filesystem.proto\x1a\x1dmetalstack/api/v2/image.proto\x1a\x1fmetalstack/api/v2/network.proto\x1a!metalstack/api/v2/partition.proto\x1a\x1cmetalstack/api/v2/size.proto\"\\\n" +
	"\x18MachineServiceGetRequest\x12\x1c\n" +
	"\x04uuid\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x04uuid\x12\"\n" +
	"\aproject\x18\x02 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\aproject\"Q\n" +
	"\x19MachineServiceGetResponse\x124\n" +
	"\amachine\x18\x01 \x01(\v2\x1a.metalstack.api.v2.MachineR\amachine\"A\n" +
	"\x1bMachineServiceCreateRequest\x12\"\n" +
	"\aproject\x18\x02 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\aproject\"\x1e\n" +
	"\x1cMachineServiceCreateResponse\"\xa4\x02\n" +
	"\x1bMachineServiceUpdateRequest\x12\x1c\n" +
	"\x04uuid\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x04uuid\x12\"\n" +
	"\aproject\x18\x02 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\aproject\x12/\n" +
	"\vdescription\x18\x04 \x01(\tB\b\xbaH\x05r\x03\x18\x80\x01H\x00R\vdescription\x88\x01\x01\x12<\n" +
	"\x06labels\x18\x06 \x01(\v2\x1f.metalstack.api.v2.UpdateLabelsH\x01R\x06labels\x88\x01\x01\x129\n" +
	"\x0fssh_public_keys\x18\v \x03(\tB\x11\xbaH\x0e\x92\x01\v\x102\"\ar\x05\x10\x01\x18\x80@R\rsshPublicKeysB\x0e\n" +
	"\f_descriptionB\t\n" +
	"\a_labels\"T\n" +
	"\x1cMachineServiceUpdateResponse\x124\n" +
	"\amachine\x18\x01 \x01(\v2\x1a.metalstack.api.v2.MachineR\amachine\"v\n" +
	"\x19MachineServiceListRequest\x12\"\n" +
	"\aproject\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\aproject\x125\n" +
	"\x05query\x18\x02 \x01(\v2\x1f.metalstack.api.v2.MachineQueryR\x05query\"T\n" +
	"\x1aMachineServiceListResponse\x126\n" +
	"\bmachines\x18\x01 \x03(\v2\x1a.metalstack.api.v2.MachineR\bmachines\"_\n" +
	"\x1bMachineServiceDeleteRequest\x12\x1c\n" +
	"\x04uuid\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x04uuid\x12\"\n" +
	"\aproject\x18\x02 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\aproject\"\x1e\n" +
	"\x1cMachineServiceDeleteResponse\"\xe5\x05\n" +
	"\aMachine\x12\x1c\n" +
	"\x04uuid\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x04uuid\x12+\n" +
	"\x04meta\x18\x02 \x01(\v2\x17.metalstack.api.v2.MetaR\x04meta\x12:\n" +
	"\tpartition\x18\x03 \x01(\v2\x1c.metalstack.api.v2.PartitionR\tpartition\x12\x1c\n" +
	"\x04rack\x18\x04 \x01(\tB\b\xbaH\x05r\x03\x18\x80\x01R\x04rack\x12+\n" +
	"\x04size\x18\x05 \x01(\v2\x17.metalstack.api.v2.SizeR\x04size\x12>\n" +
	"\bhardware\x18\x06 \x01(\v2\".metalstack.api.v2.MachineHardwareR\bhardware\x122\n" +
	"\x04bios\x18\a \x01(\v2\x1e.metalstack.api.v2.MachineBiosR\x04bios\x12D\n" +
	"\n" +
	"allocation\x18\b \x01(\v2$.metalstack.api.v2.MachineAllocationR\n" +
	"allocation\x12<\n" +
	"\x05state\x18\t \x01(\v2&.metalstack.api.v2.MachineStateDetailsR\x05state\x12N\n" +
	"\tled_state\x18\n" +
	" \x01(\v21.metalstack.api.v2.MachineChassisIdentifyLEDStateR\bledState\x12N\n" +
	"\n" +
	"liveliness\x18\v \x01(\x0e2$.metalstack.api.v2.MachineLivelinessB\b\xbaH\x05\x82\x01\x02\x10\x01R\n" +
	"liveliness\x12p\n" +
	"\x1arecent_provisioning_events\x18\f \x01(\v22.metalstack.api.v2.MachineRecentProvisioningEventsR\x18recentProvisioningEvents\"\xbe\a\n" +
	"\x11MachineAllocation\x12\x1c\n" +
	"\x04uuid\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x04uuid\x12+\n" +
	"\x04meta\x18\x02 \x01(\v2\x17.metalstack.api.v2.MetaR\x04meta\x12\x1c\n" +
	"\x04name\x18\x03 \x01(\tB\b\xbaH\x05r\x03\x18\x80\x01R\x04name\x12*\n" +
	"\vdescription\x18\x04 \x01(\tB\b\xbaH\x05r\x03\x18\x80\x01R\vdescription\x12'\n" +
	"\n" +
	"created_by\x18\x05 \x01(\tB\b\xbaH\x05r\x03\x18\x80\x01R\tcreatedBy\x12\"\n" +
	"\aproject\x18\x06 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\aproject\x12.\n" +
	"\x05image\x18\a \x01(\v2\x18.metalstack.api.v2.ImageR\x05image\x12P\n" +
	"\x11filesystem_layout\x18\b \x01(\v2#.metalstack.api.v2.FilesystemLayoutR\x10filesystemLayout\x12=\n" +
	"\bnetworks\x18\t \x03(\v2!.metalstack.api.v2.MachineNetworkR\bnetworks\x12$\n" +
	"\bhostname\x18\n" +
	" \x01(\tB\b\xbaH\x05r\x03\x18\x80\x01R\bhostname\x129\n" +
	"\x0fssh_public_keys\x18\v \x03(\tB\x11\xbaH\x0e\x92\x01\v\x102\"\ar\x05\x10\x01\x18\x80@R\rsshPublicKeys\x12%\n" +
	"\buserdata\x18\f \x01(\tB\t\xbaH\x06r\x04\x18\x80\x80\x02R\buserdata\x128\n" +
	"\tboot_info\x18\r \x01(\v2\x1b.metalstack.api.v2.BootInfoR\bbootInfo\x12<\n" +
	"\x04role\x18\x0e \x01(\x0e2\x1e.metalstack.api.v2.MachineRoleB\b\xbaH\x05\x82\x01\x02\x10\x01R\x04role\x12G\n" +
	"\x0efirewall_rules\x18\x0f \x01(\v2 .metalstack.api.v2.FirewallRulesR\rfirewallRules\x12E\n" +
	"\n" +
	"dns_server\x18\x10 \x03(\v2\x1c.metalstack.api.v2.DNSServerB\b\xbaH\x05\x92\x01\x02\x10\x03R\tdnsServer\x12E\n" +
	"\n" +
	"ntp_server\x18\x11 \x03(\v2\x1c.metalstack.api.v2.NTPServerB\b\xbaH\x05\x92\x01\x02\x10\n" +
	"R\tntpServer\x12/\n" +
	"\x03vpn\x18\x12 \x01(\v2\x1d.metalstack.api.v2.MachineVPNR\x03vpn\"\x90\x01\n" +
	"\rFirewallRules\x12=\n" +
	"\x06egress\x18\x01 \x03(\v2%.metalstack.api.v2.FirewallEgressRuleR\x06egress\x12@\n" +
	"\aingress\x18\x02 \x03(\v2&.metalstack.api.v2.FirewallIngressRuleR\aingress\"\x87\x02\n" +
	"\x12FirewallEgressRule\x12C\n" +
	"\bprotocol\x18\x01 \x01(\x0e2\x1d.metalstack.api.v2.IPProtocolB\b\xbaH\x05\x82\x01\x02\x10\x01R\bprotocol\x12$\n" +
	"\x05ports\x18\x02 \x03(\rB\x0e\xbaH\v\x92\x01\b\"\x06*\x04\x18\xfc\xff\x03R\x05ports\x12S\n" +
	"\x02to\x18\x03 \x03(\tBC\xbaH@\x92\x01=\";\xba\x018\n" +
	"\bvalid_to\x12\x19to prefixes must be valid\x1a\x11this.isIpPrefix()R\x02to\x121\n" +
	"\acomment\x18\x04 \x01(\tB\x17\xbaH\x14\xd8\x01\x01r\x0f\x18d2\v^[a-z_ -]*$R\acomment\"\xe5\x02\n" +
	"\x13FirewallIngressRule\x12C\n" +
	"\bprotocol\x18\x01 \x01(\x0e2\x1d.metalstack.api.v2.IPProtocolB\b\xbaH\x05\x82\x01\x02\x10\x01R\bprotocol\x12$\n" +
	"\x05ports\x18\x02 \x03(\rB\x0e\xbaH\v\x92\x01\b\"\x06*\x04\x18\xfc\xff\x03R\x05ports\x12S\n" +
	"\x02to\x18\x03 \x03(\tBC\xbaH@\x92\x01=\";\xba\x018\n" +
	"\bvalid_to\x12\x19to prefixes must be valid\x1a\x11this.isIpPrefix()R\x02to\x12[\n" +
	"\x04from\x18\x04 \x03(\tBG\xbaHD\x92\x01A\"?\xba\x01<\n" +
	"\n" +
	"valid_from\x12\x1bfrom prefixes must be valid\x1a\x11this.isIpPrefix()R\x04from\x121\n" +
	"\acomment\x18\x05 \x01(\tB\x17\xbaH\x14\xd8\x01\x01r\x0f\x18d2\v^[a-z_ -]*$R\acomment\"\x9e\x04\n" +
	"\x0eMachineNetwork\x12\x18\n" +
	"\anetwork\x18\x01 \x01(\tR\anetwork\x12b\n" +
	"\bprefixes\x18\x02 \x03(\tBF\xbaHC\x92\x01@\">\xba\x01;\n" +
	"\x0evalid_prefixes\x12\x16prefixes must be valid\x1a\x11this.isIpPrefix()R\bprefixes\x12\x91\x01\n" +
	"\x14destination_prefixes\x18\x03 \x03(\tB^\xbaH[\x92\x01X\"V\xba\x01S\n" +
	"\x1avalid_destination_prefixes\x12\"destination_prefixes must be valid\x1a\x11this.isIpPrefix()R\x13destinationPrefixes\x12H\n" +
	"\x03ips\x18\x04 \x03(\tB6\xbaH3\x92\x010\".\xba\x01+\n" +
	"\tvalid_ips\x12\x11ips must be valid\x1a\vthis.isIp()R\x03ips\x12K\n" +
	"\fnetwork_type\x18\x05 \x01(\x0e2\x1e.metalstack.api.v2.NetworkTypeB\b\xbaH\x05\x82\x01\x02\x10\x01R\vnetworkType\x12?\n" +
	"\bnat_type\x18\x06 \x01(\x0e2\x1a.metalstack.api.v2.NATTypeB\b\xbaH\x05\x82\x01\x02\x10\x01R\anatType\x12\x10\n" +
	"\x03vrf\x18\a \x01(\x04R\x03vrf\x12\x10\n" +
	"\x03asn\x18\b \x01(\x04R\x03asn\"\xfb\x01\n" +
	"\x0fMachineHardware\x12\x16\n" +
	"\x06memory\x18\x01 \x01(\x04R\x06memory\x12;\n" +
	"\x05disks\x18\x03 \x03(\v2%.metalstack.api.v2.MachineBlockDeviceR\x05disks\x12/\n" +
	"\x04cpus\x18\x04 \x03(\v2\x1b.metalstack.api.v2.MetalCPUR\x04cpus\x12/\n" +
	"\x04gpus\x18\x05 \x03(\v2\x1b.metalstack.api.v2.MetalGPUR\x04gpus\x121\n" +
	"\x04nics\x18\x06 \x03(\v2\x1d.metalstack.api.v2.MachineNicR\x04nics\"h\n" +
	"\bMetalCPU\x12\x16\n" +
	"\x06vendor\x18\x01 \x01(\tR\x06vendor\x12\x14\n" +
	"\x05model\x18\x02 \x01(\tR\x05model\x12\x14\n" +
	"\x05cores\x18\x03 \x01(\rR\x05cores\x12\x18\n" +
	"\athreads\x18\x04 \x01(\rR\athreads\"8\n" +
	"\bMetalGPU\x12\x16\n" +
	"\x06vendor\x18\x01 \x01(\tR\x06vendor\x12\x14\n" +
	"\x05model\x18\x02 \x01(\tR\x05model\"\x8f\x01\n" +
	"\n" +
	"MachineNic\x12\x10\n" +
	"\x03mac\x18\x01 \x01(\tR\x03mac\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1e\n" +
	"\n" +
	"identifier\x18\x03 \x01(\tR\n" +
	"identifier\x12;\n" +
	"\tneighbors\x18\x04 \x03(\v2\x1d.metalstack.api.v2.MachineNicR\tneighbors\"<\n" +
	"\x12MachineBlockDevice\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x04R\x04size\"\xc2\x01\n" +
	"\x13MachineStateDetails\x12?\n" +
	"\x05state\x18\x01 \x01(\x0e2\x1f.metalstack.api.v2.MachineStateB\b\xbaH\x05\x82\x01\x02\x10\x01R\x05state\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x16\n" +
	"\x06issuer\x18\x03 \x01(\tR\x06issuer\x120\n" +
	"\x14metal_hammer_version\x18\x04 \x01(\tR\x12metalHammerVersion\"X\n" +
	"\x1eMachineChassisIdentifyLEDState\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\"S\n" +
	"\vMachineBios\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x12\x16\n" +
	"\x06vendor\x18\x02 \x01(\tR\x06vendor\x12\x12\n" +
	"\x04date\x18\x03 \x01(\tR\x04date\"\xd3\x02\n" +
	"\x1fMachineRecentProvisioningEvents\x12C\n" +
	"\x06events\x18\x01 \x03(\v2+.metalstack.api.v2.MachineProvisioningEventR\x06events\x12B\n" +
	"\x0flast_event_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\rlastEventTime\x12U\n" +
	"\x10last_error_event\x18\x03 \x01(\v2+.metalstack.api.v2.MachineProvisioningEventR\x0elastErrorEvent\x12P\n" +
	"\x05state\x18\x04 \x01(\x0e20.metalstack.api.v2.MachineProvisioningEventStateB\b\xbaH\x05\x82\x01\x02\x10\x01R\x05state\"z\n" +
	"\x18MachineProvisioningEvent\x12.\n" +
	"\x04time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x04time\x12\x14\n" +
	"\x05event\x18\x02 \x01(\tR\x05event\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\"\n" +
	"\n" +
	"\bBootInfo\"y\n" +
	"\n" +
	"MachineVPN\x122\n" +
	"\x15control_plane_address\x18\x01 \x01(\tR\x13controlPlaneAddress\x12\x19\n" +
	"\bauth_key\x18\x02 \x01(\tR\aauthKey\x12\x1c\n" +
	"\tconnected\x18\x03 \x01(\bR\tconnected\"\xa7\a\n" +
	"\fMachineQuery\x12!\n" +
	"\x04uuid\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01H\x00R\x04uuid\x88\x01\x01\x12#\n" +
	"\x04name\x18\x02 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\x01R\x04name\x88\x01\x01\x12-\n" +
	"\tpartition\x18\x03 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\x02R\tpartition\x88\x01\x01\x12#\n" +
	"\x04size\x18\x04 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\x03R\x04size\x88\x01\x01\x12#\n" +
	"\x04rack\x18\x05 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\x04R\x04rack\x88\x01\x01\x126\n" +
	"\x06labels\x18\x06 \x01(\v2\x19.metalstack.api.v2.LabelsH\x05R\x06labels\x88\x01\x01\x12N\n" +
	"\n" +
	"allocation\x18\a \x01(\v2).metalstack.api.v2.MachineAllocationQueryH\x06R\n" +
	"allocation\x88\x01\x01\x12E\n" +
	"\anetwork\x18\b \x01(\v2&.metalstack.api.v2.MachineNetworkQueryH\aR\anetwork\x88\x01\x01\x129\n" +
	"\x03nic\x18\t \x01(\v2\".metalstack.api.v2.MachineNicQueryH\bR\x03nic\x88\x01\x01\x12<\n" +
	"\x04disk\x18\n" +
	" \x01(\v2#.metalstack.api.v2.MachineDiskQueryH\tR\x04disk\x88\x01\x01\x12<\n" +
	"\x04ipmi\x18\v \x01(\v2#.metalstack.api.v2.MachineIPMIQueryH\n" +
	"R\x04ipmi\x88\x01\x01\x129\n" +
	"\x03fru\x18\f \x01(\v2\".metalstack.api.v2.MachineFRUQueryH\vR\x03fru\x88\x01\x01\x12H\n" +
	"\bhardware\x18\r \x01(\v2'.metalstack.api.v2.MachineHardwareQueryH\fR\bhardware\x88\x01\x01\x12:\n" +
	"\x05state\x18\x0e \x01(\x0e2\x1f.metalstack.api.v2.MachineStateH\rR\x05state\x88\x01\x01B\a\n" +
	"\x05_uuidB\a\n" +
	"\x05_nameB\f\n" +
	"\n" +
	"_partitionB\a\n" +
	"\x05_sizeB\a\n" +
	"\x05_rackB\t\n" +
	"\a_labelsB\r\n" +
	"\v_allocationB\n" +
	"\n" +
	"\b_networkB\x06\n" +
	"\x04_nicB\a\n" +
	"\x05_diskB\a\n" +
	"\x05_ipmiB\x06\n" +
	"\x04_fruB\v\n" +
	"\t_hardwareB\b\n" +
	"\x06_state\"\xe3\x03\n" +
	"\x16MachineAllocationQuery\x12!\n" +
	"\x04uuid\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01H\x00R\x04uuid\x88\x01\x01\x12#\n" +
	"\x04name\x18\x02 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\x01R\x04name\x88\x01\x01\x12'\n" +
	"\aproject\x18\x03 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01H\x02R\aproject\x88\x01\x01\x12%\n" +
	"\x05image\x18\x04 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\x03R\x05image\x88\x01\x01\x12<\n" +
	"\x11filesystem_layout\x18\x05 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\x04R\x10filesystemLayout\x88\x01\x01\x12+\n" +
	"\bhostname\x18\x06 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\x05R\bhostname\x88\x01\x01\x12A\n" +
	"\x04role\x18\a \x01(\x0e2\x1e.metalstack.api.v2.MachineRoleB\b\xbaH\x05\x82\x01\x02\x10\x01H\x06R\x04role\x88\x01\x01\x12!\n" +
	"\tsucceeded\x18\b \x01(\bH\aR\tsucceeded\x88\x01\x01B\a\n" +
	"\x05_uuidB\a\n" +
	"\x05_nameB\n" +
	"\n" +
	"\b_projectB\b\n" +
	"\x06_imageB\x14\n" +
	"\x12_filesystem_layoutB\v\n" +
	"\t_hostnameB\a\n" +
	"\x05_roleB\f\n" +
	"\n" +
	"_succeeded\"\x9b\x03\n" +
	"\x13MachineNetworkQuery\x12\x1a\n" +
	"\bnetworks\x18\x01 \x03(\tR\bnetworks\x12b\n" +
	"\bprefixes\x18\x02 \x03(\tBF\xbaHC\x92\x01@\">\xba\x01;\n" +
	"\x0evalid_prefixes\x12\x16prefixes must be valid\x1a\x11this.isIpPrefix()R\bprefixes\x12\x91\x01\n" +
	"\x14destination_prefixes\x18\x03 \x03(\tB^\xbaH[\x92\x01X\"V\xba\x01S\n" +
	"\x1avalid_destination_prefixes\x12\"destination_prefixes must be valid\x1a\x11this.isIpPrefix()R\x13destinationPrefixes\x12H\n" +
	"\x03ips\x18\x04 \x03(\tB6\xbaH3\x92\x010\".\xba\x01+\n" +
	"\tvalid_ips\x12\x11ips must be valid\x1a\vthis.isIp()R\x03ips\x12\x12\n" +
	"\x04vrfs\x18\x05 \x03(\x04R\x04vrfs\x12\x12\n" +
	"\x04asns\x18\x06 \x03(\x04R\x04asns\"\xc0\x01\n" +
	"\x0fMachineNicQuery\x12\x12\n" +
	"\x04macs\x18\x01 \x03(\tR\x04macs\x12\x14\n" +
	"\x05names\x18\x02 \x03(\tR\x05names\x12\x12\n" +
	"\x04vrfs\x18\x03 \x03(\x04R\x04vrfs\x12#\n" +
	"\rneighbor_macs\x18\x04 \x03(\tR\fneighborMacs\x12%\n" +
	"\x0eneighbor_names\x18\x05 \x03(\tR\rneighborNames\x12#\n" +
	"\rneighbor_vrfs\x18\x06 \x03(\x04R\fneighborVrfs\">\n" +
	"\x10MachineDiskQuery\x12\x14\n" +
	"\x05names\x18\x01 \x03(\tR\x05names\x12\x14\n" +
	"\x05sizes\x18\x02 \x03(\x04R\x05sizes\"\xaf\x01\n" +
	"\x10MachineIPMIQuery\x12\x1d\n" +
	"\aaddress\x18\x01 \x01(\tH\x00R\aaddress\x88\x01\x01\x12\x15\n" +
	"\x03mac\x18\x02 \x01(\tH\x01R\x03mac\x88\x01\x01\x12\x17\n" +
	"\x04user\x18\x03 \x01(\tH\x02R\x04user\x88\x01\x01\x12!\n" +
	"\tinterface\x18\x04 \x01(\tH\x03R\tinterface\x88\x01\x01B\n" +
	"\n" +
	"\b_addressB\x06\n" +
	"\x04_macB\a\n" +
	"\x05_userB\f\n" +
	"\n" +
	"_interface\"\xb8\x04\n" +
	"\x0fMachineFRUQuery\x123\n" +
	"\x13chassis_part_number\x18\x01 \x01(\tH\x00R\x11chassisPartNumber\x88\x01\x01\x123\n" +
	"\x13chassis_part_serial\x18\x02 \x01(\tH\x01R\x11chassisPartSerial\x88\x01\x01\x12 \n" +
	"\tboard_mfg\x18\x03 \x01(\tH\x02R\bboardMfg\x88\x01\x01\x12&\n" +
	"\fboard_serial\x18\x04 \x01(\tH\x03R\vboardSerial\x88\x01\x01\x12/\n" +
	"\x11board_part_number\x18\x05 \x01(\tH\x04R\x0fboardPartNumber\x88\x01\x01\x126\n" +
	"\x14product_manufacturer\x18\x06 \x01(\tH\x05R\x13productManufacturer\x88\x01\x01\x123\n" +
	"\x13product_part_number\x18\a \x01(\tH\x06R\x11productPartNumber\x88\x01\x01\x12*\n" +
	"\x0eproduct_serial\x18\b \x01(\tH\aR\rproductSerial\x88\x01\x01B\x16\n" +
	"\x14_chassis_part_numberB\x16\n" +
	"\x14_chassis_part_serialB\f\n" +
	"\n" +
	"_board_mfgB\x0f\n" +
	"\r_board_serialB\x14\n" +
	"\x12_board_part_numberB\x17\n" +
	"\x15_product_manufacturerB\x16\n" +
	"\x14_product_part_numberB\x11\n" +
	"\x0f_product_serial\"n\n" +
	"\x14MachineHardwareQuery\x12\x1b\n" +
	"\x06memory\x18\x01 \x01(\x04H\x00R\x06memory\x88\x01\x01\x12 \n" +
	"\tcpu_cores\x18\x02 \x01(\rH\x01R\bcpuCores\x88\x01\x01B\t\n" +
	"\a_memoryB\f\n" +
	"\n" +
	"_cpu_cores*e\n" +
	"\n" +
	"IPProtocol\x12\x1b\n" +
	"\x17IP_PROTOCOL_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x0fIP_PROTOCOL_TCP\x10\x01\x1a\a\x82\xb2\x19\x03tcp\x12\x1c\n" +
	"\x0fIP_PROTOCOL_UDP\x10\x02\x1a\a\x82\xb2\x19\x03udp*\xaf\x01\n" +
	"\fMachineState\x12#\n" +
	"\x19MACHINE_STATE_UNSPECIFIED\x10\x00\x1a\x04\x82\xb2\x19\x00\x12(\n" +
	"\x16MACHINE_STATE_RESERVED\x10\x01\x1a\f\x82\xb2\x19\breserved\x12$\n" +
	"\x14MACHINE_STATE_LOCKED\x10\x02\x1a\n" +
	"\x82\xb2\x19\x06locked\x12*\n" +
	"\x17MACHINE_STATE_AVAILABLE\x10\x03\x1a\r\x82\xb2\x19\tavailable*\xdf\x01\n" +
	"\x1dMachineProvisioningEventState\x126\n" +
	",MACHINE_PROVISIONING_EVENT_STATE_UNSPECIFIED\x10\x00\x1a\x04\x82\xb2\x19\x00\x12=\n" +
	"*MACHINE_PROVISIONING_EVENT_STATE_CRASHLOOP\x10\x01\x1a\r\x82\xb2\x19\tcrashloop\x12G\n" +
	"/MACHINE_PROVISIONING_EVENT_STATE_FAILED_RECLAIM\x10\x02\x1a\x12\x82\xb2\x19\x0efailed-reclaim*\xba\x01\n" +
	"\x11MachineLiveliness\x12(\n" +
	"\x1eMACHINE_LIVELINESS_UNSPECIFIED\x10\x00\x1a\x04\x82\xb2\x19\x00\x12'\n" +
	"\x18MACHINE_LIVELINESS_ALIVE\x10\x01\x1a\t\x82\xb2\x19\x05alive\x12%\n" +
	"\x17MACHINE_LIVELINESS_DEAD\x10\x02\x1a\b\x82\xb2\x19\x04dead\x12+\n" +
	"\x1aMACHINE_LIVELINESS_UNKNOWN\x10\x03\x1a\v\x82\xb2\x19\aunknown*\x81\x01\n" +
	"\vMachineRole\x12\"\n" +
	"\x18MACHINE_ROLE_UNSPECIFIED\x10\x00\x1a\x04\x82\xb2\x19\x00\x12%\n" +
	"\x14MACHINE_ROLE_MACHINE\x10\x01\x1a\v\x82\xb2\x19\amachine\x12'\n" +
	"\x15MACHINE_ROLE_FIREWALL\x10\x02\x1a\f\x82\xb2\x19\bfirewall2\xca\x04\n" +
	"\x0eMachineService\x12m\n" +
	"\x03Get\x12+.metalstack.api.v2.MachineServiceGetRequest\x1a,.metalstack.api.v2.MachineServiceGetResponse\"\v\xca\xf3\x18\x03\x01\x02\x03\xe0\xf3\x18\x02\x12q\n" +
	"\x06Create\x12..metalstack.api.v2.MachineServiceCreateRequest\x1a/.metalstack.api.v2.MachineServiceCreateResponse\"\x06\xca\xf3\x18\x02\x01\x02\x12q\n" +
	"\x06Update\x12..metalstack.api.v2.MachineServiceUpdateRequest\x1a/.metalstack.api.v2.MachineServiceUpdateResponse\"\x06\xca\xf3\x18\x02\x01\x02\x12p\n" +
	"\x04List\x12,.metalstack.api.v2.MachineServiceListRequest\x1a-.metalstack.api.v2.MachineServiceListResponse\"\v\xca\xf3\x18\x03\x01\x02\x03\xe0\xf3\x18\x02\x12q\n" +
	"\x06Delete\x12..metalstack.api.v2.MachineServiceDeleteRequest\x1a/.metalstack.api.v2.MachineServiceDeleteResponse\"\x06\xca\xf3\x18\x02\x01\x02B\xc2\x01\n" +
	"\x15com.metalstack.api.v2B\fMachineProtoP\x01Z5github.com/metal-stack/api/go/metalstack/api/v2;apiv2\xa2\x02\x03MAX\xaa\x02\x11Metalstack.Api.V2\xca\x02\x11Metalstack\\Api\\V2\xe2\x02\x1dMetalstack\\Api\\V2\\GPBMetadata\xea\x02\x13Metalstack::Api::V2b\x06proto3"

var (
	file_metalstack_api_v2_machine_proto_rawDescOnce sync.Once
	file_metalstack_api_v2_machine_proto_rawDescData []byte
)

func file_metalstack_api_v2_machine_proto_rawDescGZIP() []byte {
	file_metalstack_api_v2_machine_proto_rawDescOnce.Do(func() {
		file_metalstack_api_v2_machine_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_metalstack_api_v2_machine_proto_rawDesc), len(file_metalstack_api_v2_machine_proto_rawDesc)))
	})
	return file_metalstack_api_v2_machine_proto_rawDescData
}

var file_metalstack_api_v2_machine_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_metalstack_api_v2_machine_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_metalstack_api_v2_machine_proto_goTypes = []any{
	(IPProtocol)(0),                         // 0: metalstack.api.v2.IPProtocol
	(MachineState)(0),                       // 1: metalstack.api.v2.MachineState
	(MachineProvisioningEventState)(0),      // 2: metalstack.api.v2.MachineProvisioningEventState
	(MachineLiveliness)(0),                  // 3: metalstack.api.v2.MachineLiveliness
	(MachineRole)(0),                        // 4: metalstack.api.v2.MachineRole
	(*MachineServiceGetRequest)(nil),        // 5: metalstack.api.v2.MachineServiceGetRequest
	(*MachineServiceGetResponse)(nil),       // 6: metalstack.api.v2.MachineServiceGetResponse
	(*MachineServiceCreateRequest)(nil),     // 7: metalstack.api.v2.MachineServiceCreateRequest
	(*MachineServiceCreateResponse)(nil),    // 8: metalstack.api.v2.MachineServiceCreateResponse
	(*MachineServiceUpdateRequest)(nil),     // 9: metalstack.api.v2.MachineServiceUpdateRequest
	(*MachineServiceUpdateResponse)(nil),    // 10: metalstack.api.v2.MachineServiceUpdateResponse
	(*MachineServiceListRequest)(nil),       // 11: metalstack.api.v2.MachineServiceListRequest
	(*MachineServiceListResponse)(nil),      // 12: metalstack.api.v2.MachineServiceListResponse
	(*MachineServiceDeleteRequest)(nil),     // 13: metalstack.api.v2.MachineServiceDeleteRequest
	(*MachineServiceDeleteResponse)(nil),    // 14: metalstack.api.v2.MachineServiceDeleteResponse
	(*Machine)(nil),                         // 15: metalstack.api.v2.Machine
	(*MachineAllocation)(nil),               // 16: metalstack.api.v2.MachineAllocation
	(*FirewallRules)(nil),                   // 17: metalstack.api.v2.FirewallRules
	(*FirewallEgressRule)(nil),              // 18: metalstack.api.v2.FirewallEgressRule
	(*FirewallIngressRule)(nil),             // 19: metalstack.api.v2.FirewallIngressRule
	(*MachineNetwork)(nil),                  // 20: metalstack.api.v2.MachineNetwork
	(*MachineHardware)(nil),                 // 21: metalstack.api.v2.MachineHardware
	(*MetalCPU)(nil),                        // 22: metalstack.api.v2.MetalCPU
	(*MetalGPU)(nil),                        // 23: metalstack.api.v2.MetalGPU
	(*MachineNic)(nil),                      // 24: metalstack.api.v2.MachineNic
	(*MachineBlockDevice)(nil),              // 25: metalstack.api.v2.MachineBlockDevice
	(*MachineStateDetails)(nil),             // 26: metalstack.api.v2.MachineStateDetails
	(*MachineChassisIdentifyLEDState)(nil),  // 27: metalstack.api.v2.MachineChassisIdentifyLEDState
	(*MachineBios)(nil),                     // 28: metalstack.api.v2.MachineBios
	(*MachineRecentProvisioningEvents)(nil), // 29: metalstack.api.v2.MachineRecentProvisioningEvents
	(*MachineProvisioningEvent)(nil),        // 30: metalstack.api.v2.MachineProvisioningEvent
	(*BootInfo)(nil),                        // 31: metalstack.api.v2.BootInfo
	(*MachineVPN)(nil),                      // 32: metalstack.api.v2.MachineVPN
	(*MachineQuery)(nil),                    // 33: metalstack.api.v2.MachineQuery
	(*MachineAllocationQuery)(nil),          // 34: metalstack.api.v2.MachineAllocationQuery
	(*MachineNetworkQuery)(nil),             // 35: metalstack.api.v2.MachineNetworkQuery
	(*MachineNicQuery)(nil),                 // 36: metalstack.api.v2.MachineNicQuery
	(*MachineDiskQuery)(nil),                // 37: metalstack.api.v2.MachineDiskQuery
	(*MachineIPMIQuery)(nil),                // 38: metalstack.api.v2.MachineIPMIQuery
	(*MachineFRUQuery)(nil),                 // 39: metalstack.api.v2.MachineFRUQuery
	(*MachineHardwareQuery)(nil),            // 40: metalstack.api.v2.MachineHardwareQuery
	(*UpdateLabels)(nil),                    // 41: metalstack.api.v2.UpdateLabels
	(*Meta)(nil),                            // 42: metalstack.api.v2.Meta
	(*Partition)(nil),                       // 43: metalstack.api.v2.Partition
	(*Size)(nil),                            // 44: metalstack.api.v2.Size
	(*Image)(nil),                           // 45: metalstack.api.v2.Image
	(*FilesystemLayout)(nil),                // 46: metalstack.api.v2.FilesystemLayout
	(*DNSServer)(nil),                       // 47: metalstack.api.v2.DNSServer
	(*NTPServer)(nil),                       // 48: metalstack.api.v2.NTPServer
	(NetworkType)(0),                        // 49: metalstack.api.v2.NetworkType
	(NATType)(0),                            // 50: metalstack.api.v2.NATType
	(*timestamppb.Timestamp)(nil),           // 51: google.protobuf.Timestamp
	(*Labels)(nil),                          // 52: metalstack.api.v2.Labels
}
var file_metalstack_api_v2_machine_proto_depIdxs = []int32{
	15, // 0: metalstack.api.v2.MachineServiceGetResponse.machine:type_name -> metalstack.api.v2.Machine
	41, // 1: metalstack.api.v2.MachineServiceUpdateRequest.labels:type_name -> metalstack.api.v2.UpdateLabels
	15, // 2: metalstack.api.v2.MachineServiceUpdateResponse.machine:type_name -> metalstack.api.v2.Machine
	33, // 3: metalstack.api.v2.MachineServiceListRequest.query:type_name -> metalstack.api.v2.MachineQuery
	15, // 4: metalstack.api.v2.MachineServiceListResponse.machines:type_name -> metalstack.api.v2.Machine
	42, // 5: metalstack.api.v2.Machine.meta:type_name -> metalstack.api.v2.Meta
	43, // 6: metalstack.api.v2.Machine.partition:type_name -> metalstack.api.v2.Partition
	44, // 7: metalstack.api.v2.Machine.size:type_name -> metalstack.api.v2.Size
	21, // 8: metalstack.api.v2.Machine.hardware:type_name -> metalstack.api.v2.MachineHardware
	28, // 9: metalstack.api.v2.Machine.bios:type_name -> metalstack.api.v2.MachineBios
	16, // 10: metalstack.api.v2.Machine.allocation:type_name -> metalstack.api.v2.MachineAllocation
	26, // 11: metalstack.api.v2.Machine.state:type_name -> metalstack.api.v2.MachineStateDetails
	27, // 12: metalstack.api.v2.Machine.led_state:type_name -> metalstack.api.v2.MachineChassisIdentifyLEDState
	3,  // 13: metalstack.api.v2.Machine.liveliness:type_name -> metalstack.api.v2.MachineLiveliness
	29, // 14: metalstack.api.v2.Machine.recent_provisioning_events:type_name -> metalstack.api.v2.MachineRecentProvisioningEvents
	42, // 15: metalstack.api.v2.MachineAllocation.meta:type_name -> metalstack.api.v2.Meta
	45, // 16: metalstack.api.v2.MachineAllocation.image:type_name -> metalstack.api.v2.Image
	46, // 17: metalstack.api.v2.MachineAllocation.filesystem_layout:type_name -> metalstack.api.v2.FilesystemLayout
	20, // 18: metalstack.api.v2.MachineAllocation.networks:type_name -> metalstack.api.v2.MachineNetwork
	31, // 19: metalstack.api.v2.MachineAllocation.boot_info:type_name -> metalstack.api.v2.BootInfo
	4,  // 20: metalstack.api.v2.MachineAllocation.role:type_name -> metalstack.api.v2.MachineRole
	17, // 21: metalstack.api.v2.MachineAllocation.firewall_rules:type_name -> metalstack.api.v2.FirewallRules
	47, // 22: metalstack.api.v2.MachineAllocation.dns_server:type_name -> metalstack.api.v2.DNSServer
	48, // 23: metalstack.api.v2.MachineAllocation.ntp_server:type_name -> metalstack.api.v2.NTPServer
	32, // 24: metalstack.api.v2.MachineAllocation.vpn:type_name -> metalstack.api.v2.MachineVPN
	18, // 25: metalstack.api.v2.FirewallRules.egress:type_name -> metalstack.api.v2.FirewallEgressRule
	19, // 26: metalstack.api.v2.FirewallRules.ingress:type_name -> metalstack.api.v2.FirewallIngressRule
	0,  // 27: metalstack.api.v2.FirewallEgressRule.protocol:type_name -> metalstack.api.v2.IPProtocol
	0,  // 28: metalstack.api.v2.FirewallIngressRule.protocol:type_name -> metalstack.api.v2.IPProtocol
	49, // 29: metalstack.api.v2.MachineNetwork.network_type:type_name -> metalstack.api.v2.NetworkType
	50, // 30: metalstack.api.v2.MachineNetwork.nat_type:type_name -> metalstack.api.v2.NATType
	25, // 31: metalstack.api.v2.MachineHardware.disks:type_name -> metalstack.api.v2.MachineBlockDevice
	22, // 32: metalstack.api.v2.MachineHardware.cpus:type_name -> metalstack.api.v2.MetalCPU
	23, // 33: metalstack.api.v2.MachineHardware.gpus:type_name -> metalstack.api.v2.MetalGPU
	24, // 34: metalstack.api.v2.MachineHardware.nics:type_name -> metalstack.api.v2.MachineNic
	24, // 35: metalstack.api.v2.MachineNic.neighbors:type_name -> metalstack.api.v2.MachineNic
	1,  // 36: metalstack.api.v2.MachineStateDetails.state:type_name -> metalstack.api.v2.MachineState
	30, // 37: metalstack.api.v2.MachineRecentProvisioningEvents.events:type_name -> metalstack.api.v2.MachineProvisioningEvent
	51, // 38: metalstack.api.v2.MachineRecentProvisioningEvents.last_event_time:type_name -> google.protobuf.Timestamp
	30, // 39: metalstack.api.v2.MachineRecentProvisioningEvents.last_error_event:type_name -> metalstack.api.v2.MachineProvisioningEvent
	2,  // 40: metalstack.api.v2.MachineRecentProvisioningEvents.state:type_name -> metalstack.api.v2.MachineProvisioningEventState
	51, // 41: metalstack.api.v2.MachineProvisioningEvent.time:type_name -> google.protobuf.Timestamp
	52, // 42: metalstack.api.v2.MachineQuery.labels:type_name -> metalstack.api.v2.Labels
	34, // 43: metalstack.api.v2.MachineQuery.allocation:type_name -> metalstack.api.v2.MachineAllocationQuery
	35, // 44: metalstack.api.v2.MachineQuery.network:type_name -> metalstack.api.v2.MachineNetworkQuery
	36, // 45: metalstack.api.v2.MachineQuery.nic:type_name -> metalstack.api.v2.MachineNicQuery
	37, // 46: metalstack.api.v2.MachineQuery.disk:type_name -> metalstack.api.v2.MachineDiskQuery
	38, // 47: metalstack.api.v2.MachineQuery.ipmi:type_name -> metalstack.api.v2.MachineIPMIQuery
	39, // 48: metalstack.api.v2.MachineQuery.fru:type_name -> metalstack.api.v2.MachineFRUQuery
	40, // 49: metalstack.api.v2.MachineQuery.hardware:type_name -> metalstack.api.v2.MachineHardwareQuery
	1,  // 50: metalstack.api.v2.MachineQuery.state:type_name -> metalstack.api.v2.MachineState
	4,  // 51: metalstack.api.v2.MachineAllocationQuery.role:type_name -> metalstack.api.v2.MachineRole
	5,  // 52: metalstack.api.v2.MachineService.Get:input_type -> metalstack.api.v2.MachineServiceGetRequest
	7,  // 53: metalstack.api.v2.MachineService.Create:input_type -> metalstack.api.v2.MachineServiceCreateRequest
	9,  // 54: metalstack.api.v2.MachineService.Update:input_type -> metalstack.api.v2.MachineServiceUpdateRequest
	11, // 55: metalstack.api.v2.MachineService.List:input_type -> metalstack.api.v2.MachineServiceListRequest
	13, // 56: metalstack.api.v2.MachineService.Delete:input_type -> metalstack.api.v2.MachineServiceDeleteRequest
	6,  // 57: metalstack.api.v2.MachineService.Get:output_type -> metalstack.api.v2.MachineServiceGetResponse
	8,  // 58: metalstack.api.v2.MachineService.Create:output_type -> metalstack.api.v2.MachineServiceCreateResponse
	10, // 59: metalstack.api.v2.MachineService.Update:output_type -> metalstack.api.v2.MachineServiceUpdateResponse
	12, // 60: metalstack.api.v2.MachineService.List:output_type -> metalstack.api.v2.MachineServiceListResponse
	14, // 61: metalstack.api.v2.MachineService.Delete:output_type -> metalstack.api.v2.MachineServiceDeleteResponse
	57, // [57:62] is the sub-list for method output_type
	52, // [52:57] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_metalstack_api_v2_machine_proto_init() }
func file_metalstack_api_v2_machine_proto_init() {
	if File_metalstack_api_v2_machine_proto != nil {
		return
	}
	file_metalstack_api_v2_common_proto_init()
	file_metalstack_api_v2_filesystem_proto_init()
	file_metalstack_api_v2_image_proto_init()
	file_metalstack_api_v2_network_proto_init()
	file_metalstack_api_v2_partition_proto_init()
	file_metalstack_api_v2_size_proto_init()
	file_metalstack_api_v2_machine_proto_msgTypes[4].OneofWrappers = []any{}
	file_metalstack_api_v2_machine_proto_msgTypes[28].OneofWrappers = []any{}
	file_metalstack_api_v2_machine_proto_msgTypes[29].OneofWrappers = []any{}
	file_metalstack_api_v2_machine_proto_msgTypes[33].OneofWrappers = []any{}
	file_metalstack_api_v2_machine_proto_msgTypes[34].OneofWrappers = []any{}
	file_metalstack_api_v2_machine_proto_msgTypes[35].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_metalstack_api_v2_machine_proto_rawDesc), len(file_metalstack_api_v2_machine_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_metalstack_api_v2_machine_proto_goTypes,
		DependencyIndexes: file_metalstack_api_v2_machine_proto_depIdxs,
		EnumInfos:         file_metalstack_api_v2_machine_proto_enumTypes,
		MessageInfos:      file_metalstack_api_v2_machine_proto_msgTypes,
	}.Build()
	File_metalstack_api_v2_machine_proto = out.File
	file_metalstack_api_v2_machine_proto_goTypes = nil
	file_metalstack_api_v2_machine_proto_depIdxs = nil
}
