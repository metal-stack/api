// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: metalstack/api/v2/filesystem.proto

package apiv2

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// LVMType
type LVMType int32

const (
	// LVM_TYPE_UNSPECIFIED is not specified
	LVMType_LVM_TYPE_UNSPECIFIED LVMType = 0
	// LVM_TYPE_LINEAR append across all physical volumes
	LVMType_LVM_TYPE_LINEAR LVMType = 1
	// LVM_TYPE_STRIPED stripe across all physical volumes
	LVMType_LVM_TYPE_STRIPED LVMType = 2
	// LVM_TYPE_RAID1 mirror with raid across all physical volumes
	LVMType_LVM_TYPE_RAID1 LVMType = 3
)

// Enum value maps for LVMType.
var (
	LVMType_name = map[int32]string{
		0: "LVM_TYPE_UNSPECIFIED",
		1: "LVM_TYPE_LINEAR",
		2: "LVM_TYPE_STRIPED",
		3: "LVM_TYPE_RAID1",
	}
	LVMType_value = map[string]int32{
		"LVM_TYPE_UNSPECIFIED": 0,
		"LVM_TYPE_LINEAR":      1,
		"LVM_TYPE_STRIPED":     2,
		"LVM_TYPE_RAID1":       3,
	}
)

func (x LVMType) Enum() *LVMType {
	p := new(LVMType)
	*p = x
	return p
}

func (x LVMType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LVMType) Descriptor() protoreflect.EnumDescriptor {
	return file_metalstack_api_v2_filesystem_proto_enumTypes[0].Descriptor()
}

func (LVMType) Type() protoreflect.EnumType {
	return &file_metalstack_api_v2_filesystem_proto_enumTypes[0]
}

func (x LVMType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LVMType.Descriptor instead.
func (LVMType) EnumDescriptor() ([]byte, []int) {
	return file_metalstack_api_v2_filesystem_proto_rawDescGZIP(), []int{0}
}

// Format specifies the filesystem to use on a volume
type Format int32

const (
	// FORMAT_UNSPECIFIED
	Format_FORMAT_UNSPECIFIED Format = 0
	// FORMAT_VFAT is used for the UEFI boot partition
	Format_FORMAT_VFAT Format = 1
	// FORMAT_EXT3 is usually only used for /boot
	Format_FORMAT_EXT3 Format = 2
	// FORMAT_EXT4 is the default fs
	Format_FORMAT_EXT4 Format = 3
	// FORMAT_SWAP is for the swap partition
	Format_FORMAT_SWAP Format = 4
	// FORMAT_TMPFS is used for a memory filesystem typically /tmp
	Format_FORMAT_TMPFS Format = 5
	// FORMAT_NONE
	Format_FORMAT_NONE Format = 6
)

// Enum value maps for Format.
var (
	Format_name = map[int32]string{
		0: "FORMAT_UNSPECIFIED",
		1: "FORMAT_VFAT",
		2: "FORMAT_EXT3",
		3: "FORMAT_EXT4",
		4: "FORMAT_SWAP",
		5: "FORMAT_TMPFS",
		6: "FORMAT_NONE",
	}
	Format_value = map[string]int32{
		"FORMAT_UNSPECIFIED": 0,
		"FORMAT_VFAT":        1,
		"FORMAT_EXT3":        2,
		"FORMAT_EXT4":        3,
		"FORMAT_SWAP":        4,
		"FORMAT_TMPFS":       5,
		"FORMAT_NONE":        6,
	}
)

func (x Format) Enum() *Format {
	p := new(Format)
	*p = x
	return p
}

func (x Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Format) Descriptor() protoreflect.EnumDescriptor {
	return file_metalstack_api_v2_filesystem_proto_enumTypes[1].Descriptor()
}

func (Format) Type() protoreflect.EnumType {
	return &file_metalstack_api_v2_filesystem_proto_enumTypes[1]
}

func (x Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Format.Descriptor instead.
func (Format) EnumDescriptor() ([]byte, []int) {
	return file_metalstack_api_v2_filesystem_proto_rawDescGZIP(), []int{1}
}

// GPTType specifies the partition type in uefi systems
type GPTType int32

const (
	// GPT_TYPE_UNSPECIFIED is no specified
	GPTType_GPT_TYPE_UNSPECIFIED GPTType = 0
	// GPT_TYPE_BOOT EFI Boot Partition
	GPTType_GPT_TYPE_BOOT GPTType = 1
	// GPT_TYPE_LINUX Linux Partition
	GPTType_GPT_TYPE_LINUX GPTType = 2
	// GPT_TYPE_LINUX_RAID Linux Raid Partition
	GPTType_GPT_TYPE_LINUX_RAID GPTType = 3
	// GPT_TYPE_LINUX_LVM Linux LVM Partition
	GPTType_GPT_TYPE_LINUX_LVM GPTType = 4
)

// Enum value maps for GPTType.
var (
	GPTType_name = map[int32]string{
		0: "GPT_TYPE_UNSPECIFIED",
		1: "GPT_TYPE_BOOT",
		2: "GPT_TYPE_LINUX",
		3: "GPT_TYPE_LINUX_RAID",
		4: "GPT_TYPE_LINUX_LVM",
	}
	GPTType_value = map[string]int32{
		"GPT_TYPE_UNSPECIFIED": 0,
		"GPT_TYPE_BOOT":        1,
		"GPT_TYPE_LINUX":       2,
		"GPT_TYPE_LINUX_RAID":  3,
		"GPT_TYPE_LINUX_LVM":   4,
	}
)

func (x GPTType) Enum() *GPTType {
	p := new(GPTType)
	*p = x
	return p
}

func (x GPTType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GPTType) Descriptor() protoreflect.EnumDescriptor {
	return file_metalstack_api_v2_filesystem_proto_enumTypes[2].Descriptor()
}

func (GPTType) Type() protoreflect.EnumType {
	return &file_metalstack_api_v2_filesystem_proto_enumTypes[2]
}

func (x GPTType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GPTType.Descriptor instead.
func (GPTType) EnumDescriptor() ([]byte, []int) {
	return file_metalstack_api_v2_filesystem_proto_rawDescGZIP(), []int{2}
}

// RaidLevel defines howto mirror two or more block devices
type RaidLevel int32

const (
	// RAID_LEVEL_UNSPECIFIED is not specified
	RaidLevel_RAID_LEVEL_UNSPECIFIED RaidLevel = 0
	// RAID_LEVEL_0 is a stripe of two or more disks
	RaidLevel_RAID_LEVEL_0 RaidLevel = 1
	// RAID_LEVEL_1 is a mirror of two disks
	RaidLevel_RAID_LEVEL_1 RaidLevel = 2
)

// Enum value maps for RaidLevel.
var (
	RaidLevel_name = map[int32]string{
		0: "RAID_LEVEL_UNSPECIFIED",
		1: "RAID_LEVEL_0",
		2: "RAID_LEVEL_1",
	}
	RaidLevel_value = map[string]int32{
		"RAID_LEVEL_UNSPECIFIED": 0,
		"RAID_LEVEL_0":           1,
		"RAID_LEVEL_1":           2,
	}
)

func (x RaidLevel) Enum() *RaidLevel {
	p := new(RaidLevel)
	*p = x
	return p
}

func (x RaidLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RaidLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_metalstack_api_v2_filesystem_proto_enumTypes[3].Descriptor()
}

func (RaidLevel) Type() protoreflect.EnumType {
	return &file_metalstack_api_v2_filesystem_proto_enumTypes[3]
}

func (x RaidLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RaidLevel.Descriptor instead.
func (RaidLevel) EnumDescriptor() ([]byte, []int) {
	return file_metalstack_api_v2_filesystem_proto_rawDescGZIP(), []int{3}
}

// FilesystemServiceGetRequest is the request payload for a filesystem get request
type FilesystemServiceGetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the filesystem to get
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilesystemServiceGetRequest) Reset() {
	*x = FilesystemServiceGetRequest{}
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilesystemServiceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemServiceGetRequest) ProtoMessage() {}

func (x *FilesystemServiceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemServiceGetRequest.ProtoReflect.Descriptor instead.
func (*FilesystemServiceGetRequest) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_filesystem_proto_rawDescGZIP(), []int{0}
}

func (x *FilesystemServiceGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// FilesystemServiceListRequest is the request payload for a filesystem list request
type FilesystemServiceListRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the filesystem to get
	Id            *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilesystemServiceListRequest) Reset() {
	*x = FilesystemServiceListRequest{}
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilesystemServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemServiceListRequest) ProtoMessage() {}

func (x *FilesystemServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemServiceListRequest.ProtoReflect.Descriptor instead.
func (*FilesystemServiceListRequest) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_filesystem_proto_rawDescGZIP(), []int{1}
}

func (x *FilesystemServiceListRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

// FilesystemServiceGetResponse is the response payload for a filesystem get request
type FilesystemServiceGetResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filesystem the filesystem
	Filesystem    *Filesystem `protobuf:"bytes,1,opt,name=filesystem,proto3" json:"filesystem,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilesystemServiceGetResponse) Reset() {
	*x = FilesystemServiceGetResponse{}
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilesystemServiceGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemServiceGetResponse) ProtoMessage() {}

func (x *FilesystemServiceGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemServiceGetResponse.ProtoReflect.Descriptor instead.
func (*FilesystemServiceGetResponse) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_filesystem_proto_rawDescGZIP(), []int{2}
}

func (x *FilesystemServiceGetResponse) GetFilesystem() *Filesystem {
	if x != nil {
		return x.Filesystem
	}
	return nil
}

// FilesystemServiceListResponse is the response payload for a filesystem list request
type FilesystemServiceListResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filesystems the filesystems
	Filesystems   []*Filesystem `protobuf:"bytes,1,rep,name=filesystems,proto3" json:"filesystems,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilesystemServiceListResponse) Reset() {
	*x = FilesystemServiceListResponse{}
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilesystemServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemServiceListResponse) ProtoMessage() {}

func (x *FilesystemServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemServiceListResponse.ProtoReflect.Descriptor instead.
func (*FilesystemServiceListResponse) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_filesystem_proto_rawDescGZIP(), []int{3}
}

func (x *FilesystemServiceListResponse) GetFilesystems() []*Filesystem {
	if x != nil {
		return x.Filesystems
	}
	return nil
}

// FilesystemServiceTryRequest
type FilesystemServiceTryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Size, machine size to try
	Size string `protobuf:"bytes,1,opt,name=size,proto3" json:"size,omitempty"`
	// Image machine image to try
	Image         string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilesystemServiceTryRequest) Reset() {
	*x = FilesystemServiceTryRequest{}
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilesystemServiceTryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemServiceTryRequest) ProtoMessage() {}

func (x *FilesystemServiceTryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemServiceTryRequest.ProtoReflect.Descriptor instead.
func (*FilesystemServiceTryRequest) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_filesystem_proto_rawDescGZIP(), []int{4}
}

func (x *FilesystemServiceTryRequest) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *FilesystemServiceTryRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

// FilesystemServiceMatchRequest
type FilesystemServiceMatchRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Machine to check
	Machine string `protobuf:"bytes,1,opt,name=machine,proto3" json:"machine,omitempty"`
	// FilesystemLayoutId to check
	FilesystemLayoutId string `protobuf:"bytes,2,opt,name=filesystem_layout_id,json=filesystemLayoutId,proto3" json:"filesystem_layout_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *FilesystemServiceMatchRequest) Reset() {
	*x = FilesystemServiceMatchRequest{}
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilesystemServiceMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemServiceMatchRequest) ProtoMessage() {}

func (x *FilesystemServiceMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemServiceMatchRequest.ProtoReflect.Descriptor instead.
func (*FilesystemServiceMatchRequest) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_filesystem_proto_rawDescGZIP(), []int{5}
}

func (x *FilesystemServiceMatchRequest) GetMachine() string {
	if x != nil {
		return x.Machine
	}
	return ""
}

func (x *FilesystemServiceMatchRequest) GetFilesystemLayoutId() string {
	if x != nil {
		return x.FilesystemLayoutId
	}
	return ""
}

// FilesystemServiceTryResponse
type FilesystemServiceTryResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filesystem the filesystem
	Filesystem    *Filesystem `protobuf:"bytes,1,opt,name=filesystem,proto3" json:"filesystem,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilesystemServiceTryResponse) Reset() {
	*x = FilesystemServiceTryResponse{}
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilesystemServiceTryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemServiceTryResponse) ProtoMessage() {}

func (x *FilesystemServiceTryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemServiceTryResponse.ProtoReflect.Descriptor instead.
func (*FilesystemServiceTryResponse) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_filesystem_proto_rawDescGZIP(), []int{6}
}

func (x *FilesystemServiceTryResponse) GetFilesystem() *Filesystem {
	if x != nil {
		return x.Filesystem
	}
	return nil
}

// FilesystemServiceMatchResponse
type FilesystemServiceMatchResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filesystem the filesystem
	Filesystem    *Filesystem `protobuf:"bytes,1,opt,name=filesystem,proto3" json:"filesystem,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilesystemServiceMatchResponse) Reset() {
	*x = FilesystemServiceMatchResponse{}
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilesystemServiceMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemServiceMatchResponse) ProtoMessage() {}

func (x *FilesystemServiceMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemServiceMatchResponse.ProtoReflect.Descriptor instead.
func (*FilesystemServiceMatchResponse) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_filesystem_proto_rawDescGZIP(), []int{7}
}

func (x *FilesystemServiceMatchResponse) GetFilesystem() *Filesystem {
	if x != nil {
		return x.Filesystem
	}
	return nil
}

// FilesystemLayout
type FilesystemLayout struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filesystems is a list of filesystems to create on a machine
	Filesystems []*Filesystem `protobuf:"bytes,1,rep,name=filesystems,proto3" json:"filesystems,omitempty"`
	// Disks list of disks that belong to this layout
	Disks []*Disk `protobuf:"bytes,2,rep,name=disks,proto3" json:"disks,omitempty"`
	// raid arrays to create
	Raid []*Raid `protobuf:"bytes,3,rep,name=raid,proto3" json:"raid,omitempty"`
	// VolumeGroups list of volumegroups to create
	VolumeGroups []*VolumeGroup `protobuf:"bytes,4,rep,name=volume_groups,json=volumeGroups,proto3" json:"volume_groups,omitempty"`
	// LogicalVolumes list of logicalvolumes to create
	LogicalVolumes []*LogicalVolume `protobuf:"bytes,5,rep,name=logical_volumes,json=logicalVolumes,proto3" json:"logical_volumes,omitempty"`
	// Constraints which must match that this layout is taken, if sizes and images are empty these are develop layouts
	Constraints   *FilesystemLayoutConstraints `protobuf:"bytes,6,opt,name=constraints,proto3" json:"constraints,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilesystemLayout) Reset() {
	*x = FilesystemLayout{}
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilesystemLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemLayout) ProtoMessage() {}

func (x *FilesystemLayout) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemLayout.ProtoReflect.Descriptor instead.
func (*FilesystemLayout) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_filesystem_proto_rawDescGZIP(), []int{8}
}

func (x *FilesystemLayout) GetFilesystems() []*Filesystem {
	if x != nil {
		return x.Filesystems
	}
	return nil
}

func (x *FilesystemLayout) GetDisks() []*Disk {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *FilesystemLayout) GetRaid() []*Raid {
	if x != nil {
		return x.Raid
	}
	return nil
}

func (x *FilesystemLayout) GetVolumeGroups() []*VolumeGroup {
	if x != nil {
		return x.VolumeGroups
	}
	return nil
}

func (x *FilesystemLayout) GetLogicalVolumes() []*LogicalVolume {
	if x != nil {
		return x.LogicalVolumes
	}
	return nil
}

func (x *FilesystemLayout) GetConstraints() *FilesystemLayoutConstraints {
	if x != nil {
		return x.Constraints
	}
	return nil
}

// FilesystemLayoutConstraints
type FilesystemLayoutConstraints struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Sizes list of sizes this layout applies to
	Sizes []string `protobuf:"bytes,1,rep,name=sizes,proto3" json:"sizes,omitempty"`
	// Images list of images this layout applies to
	Images        map[string]string `protobuf:"bytes,2,rep,name=images,proto3" json:"images,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilesystemLayoutConstraints) Reset() {
	*x = FilesystemLayoutConstraints{}
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilesystemLayoutConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemLayoutConstraints) ProtoMessage() {}

func (x *FilesystemLayoutConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemLayoutConstraints.ProtoReflect.Descriptor instead.
func (*FilesystemLayoutConstraints) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_filesystem_proto_rawDescGZIP(), []int{9}
}

func (x *FilesystemLayoutConstraints) GetSizes() []string {
	if x != nil {
		return x.Sizes
	}
	return nil
}

func (x *FilesystemLayoutConstraints) GetImages() map[string]string {
	if x != nil {
		return x.Images
	}
	return nil
}

// Filesystem
type Filesystem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id of this filesystem
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of this filesystem
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Description of this filesystem
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Path the mountpoint where this filesystem should be mounted on
	Path *string `protobuf:"bytes,4,opt,name=path,proto3,oneof" json:"path,omitempty"`
	// Device the underlying device where this filesystem should be created
	Device string `protobuf:"bytes,5,opt,name=device,proto3" json:"device,omitempty"`
	// Format of the filesystem format
	Format Format `protobuf:"varint,6,opt,name=format,proto3,enum=metalstack.api.v2.Format" json:"format,omitempty"`
	// Label optional label for this this filesystem
	Label *string `protobuf:"bytes,7,opt,name=label,proto3,oneof" json:"label,omitempty"`
	// MountOptions the options to use to mount this filesystem
	MountOptions []string `protobuf:"bytes,8,rep,name=mount_options,json=mountOptions,proto3" json:"mount_options,omitempty"`
	// CreateOptions the options to use to create (mkfs) this filesystem
	CreateOptions []string `protobuf:"bytes,9,rep,name=create_options,json=createOptions,proto3" json:"create_options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Filesystem) Reset() {
	*x = Filesystem{}
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Filesystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filesystem) ProtoMessage() {}

func (x *Filesystem) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filesystem.ProtoReflect.Descriptor instead.
func (*Filesystem) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_filesystem_proto_rawDescGZIP(), []int{10}
}

func (x *Filesystem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Filesystem) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Filesystem) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Filesystem) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *Filesystem) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *Filesystem) GetFormat() Format {
	if x != nil {
		return x.Format
	}
	return Format_FORMAT_UNSPECIFIED
}

func (x *Filesystem) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *Filesystem) GetMountOptions() []string {
	if x != nil {
		return x.MountOptions
	}
	return nil
}

func (x *Filesystem) GetCreateOptions() []string {
	if x != nil {
		return x.CreateOptions
	}
	return nil
}

// Disk
type Disk struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Device the device to create the partitions
	Device string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	// Partitions list of partitions to create on this disk
	Partitions []*DiskPartition `protobuf:"bytes,2,rep,name=partitions,proto3" json:"partitions,omitempty"`
	// WipeOnReinstall if set to true, this disk will be wiped before reinstallation
	WipeOnReinstall bool `protobuf:"varint,3,opt,name=wipe_on_reinstall,json=wipeOnReinstall,proto3" json:"wipe_on_reinstall,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Disk) Reset() {
	*x = Disk{}
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Disk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disk) ProtoMessage() {}

func (x *Disk) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disk.ProtoReflect.Descriptor instead.
func (*Disk) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_filesystem_proto_rawDescGZIP(), []int{11}
}

func (x *Disk) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *Disk) GetPartitions() []*DiskPartition {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *Disk) GetWipeOnReinstall() bool {
	if x != nil {
		return x.WipeOnReinstall
	}
	return false
}

// Raid
type Raid struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ArrayName the name of the resulting array device
	ArrayName string `protobuf:"bytes,1,opt,name=array_name,json=arrayName,proto3" json:"array_name,omitempty"`
	// Devices list of devices to form the raid array from
	Devices []string `protobuf:"bytes,2,rep,name=devices,proto3" json:"devices,omitempty"`
	// Level raid level to create, should be 0 or 1
	Level RaidLevel `protobuf:"varint,3,opt,name=level,proto3,enum=metalstack.api.v2.RaidLevel" json:"level,omitempty"`
	// CreateOptions the options to use to create the raid array
	CreateOptions []string `protobuf:"bytes,4,rep,name=create_options,json=createOptions,proto3" json:"create_options,omitempty"`
	// Spares number of spares for the raid array
	Spares        int32 `protobuf:"varint,5,opt,name=spares,proto3" json:"spares,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Raid) Reset() {
	*x = Raid{}
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Raid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raid) ProtoMessage() {}

func (x *Raid) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raid.ProtoReflect.Descriptor instead.
func (*Raid) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_filesystem_proto_rawDescGZIP(), []int{12}
}

func (x *Raid) GetArrayName() string {
	if x != nil {
		return x.ArrayName
	}
	return ""
}

func (x *Raid) GetDevices() []string {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *Raid) GetLevel() RaidLevel {
	if x != nil {
		return x.Level
	}
	return RaidLevel_RAID_LEVEL_UNSPECIFIED
}

func (x *Raid) GetCreateOptions() []string {
	if x != nil {
		return x.CreateOptions
	}
	return nil
}

func (x *Raid) GetSpares() int32 {
	if x != nil {
		return x.Spares
	}
	return 0
}

// DiskPartition
type DiskPartition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Number partition number, will be appended to partitionprefix to create the final devicename
	Number uint32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// optional label for this this partition
	Label *string `protobuf:"bytes,2,opt,name=label,proto3,oneof" json:"label,omitempty"`
	// Size size in mebibytes (MiB) of this partition"
	Size uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// GPTType the gpt partition table type of this partition
	GptType       *GPTType `protobuf:"varint,4,opt,name=gpt_type,json=gptType,proto3,enum=metalstack.api.v2.GPTType,oneof" json:"gpt_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiskPartition) Reset() {
	*x = DiskPartition{}
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskPartition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskPartition) ProtoMessage() {}

func (x *DiskPartition) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskPartition.ProtoReflect.Descriptor instead.
func (*DiskPartition) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_filesystem_proto_rawDescGZIP(), []int{13}
}

func (x *DiskPartition) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *DiskPartition) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *DiskPartition) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DiskPartition) GetGptType() GPTType {
	if x != nil && x.GptType != nil {
		return *x.GptType
	}
	return GPTType_GPT_TYPE_UNSPECIFIED
}

// VolumeGroup
type VolumeGroup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name the name of the resulting volume group
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Devices list of devices to form the volume group from
	Devices []string `protobuf:"bytes,2,rep,name=devices,proto3" json:"devices,omitempty"`
	// Tags list of tags to add to the volume group
	Tags          []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeGroup) Reset() {
	*x = VolumeGroup{}
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeGroup) ProtoMessage() {}

func (x *VolumeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeGroup.ProtoReflect.Descriptor instead.
func (*VolumeGroup) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_filesystem_proto_rawDescGZIP(), []int{14}
}

func (x *VolumeGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumeGroup) GetDevices() []string {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *VolumeGroup) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// LogicalVolume
type LogicalVolume struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name the name of the logical volume
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// VolumeGroup the name of the volume group where to create the logical volume onto
	VolumeGroup string `protobuf:"bytes,2,opt,name=volume_group,json=volumeGroup,proto3" json:"volume_group,omitempty"`
	// Size size in mebibytes (MiB) of this volume
	Size uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// LVMType the type of this logical volume can be either linear|striped|raid1
	LvmType       LVMType `protobuf:"varint,4,opt,name=lvm_type,json=lvmType,proto3,enum=metalstack.api.v2.LVMType" json:"lvm_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogicalVolume) Reset() {
	*x = LogicalVolume{}
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogicalVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalVolume) ProtoMessage() {}

func (x *LogicalVolume) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_filesystem_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalVolume.ProtoReflect.Descriptor instead.
func (*LogicalVolume) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_filesystem_proto_rawDescGZIP(), []int{15}
}

func (x *LogicalVolume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LogicalVolume) GetVolumeGroup() string {
	if x != nil {
		return x.VolumeGroup
	}
	return ""
}

func (x *LogicalVolume) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *LogicalVolume) GetLvmType() LVMType {
	if x != nil {
		return x.LvmType
	}
	return LVMType_LVM_TYPE_UNSPECIFIED
}

var File_metalstack_api_v2_filesystem_proto protoreflect.FileDescriptor

var file_metalstack_api_v2_filesystem_proto_rawDesc = string([]byte{
	0x0a, 0x22, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x32, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x39, 0x0a, 0x1b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0x80, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x46, 0x0a, 0x1c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07,
	0x72, 0x05, 0x10, 0x02, 0x18, 0x80, 0x01, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x5d, 0x0a, 0x1c, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x60, 0x0a, 0x1d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x5f, 0x0a, 0x1b, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0x80,
	0x01, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18,
	0x80, 0x01, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x1d, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x07, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48,
	0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12,
	0x3c, 0x0a, 0x14, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba,
	0x48, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0x80, 0x01, 0x52, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x22, 0x5d, 0x0a,
	0x1c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x5f, 0x0a, 0x1e,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x91, 0x03,
	0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x05, 0x64, 0x69, 0x73,
	0x6b, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x61, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x61, 0x69, 0x64, 0x52, 0x04, 0x72, 0x61, 0x69, 0x64, 0x12,
	0x43, 0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x49, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x32, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12,
	0x50, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x22, 0xc2, 0x01, 0x0a, 0x1b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcf, 0x03, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0x80, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0x80, 0x01, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07,
	0x72, 0x05, 0x10, 0x02, 0x18, 0x80, 0x01, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x02,
	0x18, 0x80, 0x20, 0x48, 0x02, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0x80, 0x01, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x25, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0x80, 0x01, 0x48, 0x03, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0d, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x13, 0xba,
	0x48, 0x10, 0x92, 0x01, 0x0d, 0x10, 0x20, 0x18, 0x01, 0x22, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18,
	0x80, 0x01, 0x52, 0x0c, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3a, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42, 0x13, 0xba, 0x48, 0x10, 0x92, 0x01, 0x0d,
	0x10, 0x20, 0x18, 0x01, 0x22, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x01, 0x52, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x8c, 0x01, 0x0a, 0x04, 0x44, 0x69, 0x73,
	0x6b, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x32, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x77,
	0x69, 0x70, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x77, 0x69, 0x70, 0x65, 0x4f, 0x6e, 0x52, 0x65,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x22, 0xd1, 0x01, 0x0a, 0x04, 0x52, 0x61, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x61, 0x69,
	0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3a, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x13, 0xba, 0x48, 0x10, 0x92, 0x01, 0x0d, 0x10, 0x20, 0x18, 0x01, 0x22, 0x07, 0x72, 0x05, 0x10,
	0x01, 0x18, 0x80, 0x01, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x70, 0x61, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x70, 0x61, 0x72, 0x65, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x0d,
	0x44, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x67, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x50, 0x54, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x01, 0x52, 0x07,
	0x67, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x4f, 0x0a, 0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x3f, 0x0a, 0x08, 0x6c, 0x76, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x56, 0x4d, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6c, 0x76, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x2a, 0x62, 0x0a, 0x07, 0x4c, 0x56, 0x4d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4c,
	0x56, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x56, 0x4d, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x56,
	0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x50, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x56, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x49,
	0x44, 0x31, 0x10, 0x03, 0x2a, 0x87, 0x01, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x16, 0x0a, 0x12, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x5f, 0x56, 0x46, 0x41, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x5f, 0x45, 0x58, 0x54, 0x33, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x5f, 0x45, 0x58, 0x54, 0x34, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x54, 0x4d, 0x50, 0x46, 0x53, 0x10, 0x05, 0x12, 0x0f, 0x0a,
	0x0b, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x06, 0x2a, 0x7b,
	0x0a, 0x07, 0x47, 0x50, 0x54, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x50, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x50, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x4f, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x50, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x50,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x5f, 0x52, 0x41, 0x49,
	0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x50, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x49, 0x4e, 0x55, 0x58, 0x5f, 0x4c, 0x56, 0x4d, 0x10, 0x04, 0x2a, 0x4b, 0x0a, 0x09, 0x52,
	0x61, 0x69, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x41, 0x49, 0x44,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x30, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x10, 0x02, 0x32, 0xe4, 0x03, 0x0a, 0x11, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x70,
	0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x2e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0xd8, 0xf3, 0x18, 0x03, 0xe0, 0xf3, 0x18, 0x02,
	0x12, 0x73, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0xd8, 0xf3, 0x18,
	0x03, 0xe0, 0xf3, 0x18, 0x02, 0x12, 0x70, 0x0a, 0x03, 0x54, 0x72, 0x79, 0x12, 0x2e, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0xd8,
	0xf3, 0x18, 0x03, 0xe0, 0xf3, 0x18, 0x02, 0x12, 0x76, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x30, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0xd8, 0xf3, 0x18, 0x03, 0xe0, 0xf3, 0x18, 0x02, 0x42,
	0xc5, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x42, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x35, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2d, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x3b, 0x61, 0x70,
	0x69, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x4d, 0x41, 0x58, 0xaa, 0x02, 0x11, 0x4d, 0x65, 0x74, 0x61,
	0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x11,
	0x4d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x56,
	0x32, 0xe2, 0x02, 0x1d, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5c, 0x41,
	0x70, 0x69, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x13, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x3a, 0x3a,
	0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_metalstack_api_v2_filesystem_proto_rawDescOnce sync.Once
	file_metalstack_api_v2_filesystem_proto_rawDescData []byte
)

func file_metalstack_api_v2_filesystem_proto_rawDescGZIP() []byte {
	file_metalstack_api_v2_filesystem_proto_rawDescOnce.Do(func() {
		file_metalstack_api_v2_filesystem_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_metalstack_api_v2_filesystem_proto_rawDesc), len(file_metalstack_api_v2_filesystem_proto_rawDesc)))
	})
	return file_metalstack_api_v2_filesystem_proto_rawDescData
}

var file_metalstack_api_v2_filesystem_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_metalstack_api_v2_filesystem_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_metalstack_api_v2_filesystem_proto_goTypes = []any{
	(LVMType)(0),                           // 0: metalstack.api.v2.LVMType
	(Format)(0),                            // 1: metalstack.api.v2.Format
	(GPTType)(0),                           // 2: metalstack.api.v2.GPTType
	(RaidLevel)(0),                         // 3: metalstack.api.v2.RaidLevel
	(*FilesystemServiceGetRequest)(nil),    // 4: metalstack.api.v2.FilesystemServiceGetRequest
	(*FilesystemServiceListRequest)(nil),   // 5: metalstack.api.v2.FilesystemServiceListRequest
	(*FilesystemServiceGetResponse)(nil),   // 6: metalstack.api.v2.FilesystemServiceGetResponse
	(*FilesystemServiceListResponse)(nil),  // 7: metalstack.api.v2.FilesystemServiceListResponse
	(*FilesystemServiceTryRequest)(nil),    // 8: metalstack.api.v2.FilesystemServiceTryRequest
	(*FilesystemServiceMatchRequest)(nil),  // 9: metalstack.api.v2.FilesystemServiceMatchRequest
	(*FilesystemServiceTryResponse)(nil),   // 10: metalstack.api.v2.FilesystemServiceTryResponse
	(*FilesystemServiceMatchResponse)(nil), // 11: metalstack.api.v2.FilesystemServiceMatchResponse
	(*FilesystemLayout)(nil),               // 12: metalstack.api.v2.FilesystemLayout
	(*FilesystemLayoutConstraints)(nil),    // 13: metalstack.api.v2.FilesystemLayoutConstraints
	(*Filesystem)(nil),                     // 14: metalstack.api.v2.Filesystem
	(*Disk)(nil),                           // 15: metalstack.api.v2.Disk
	(*Raid)(nil),                           // 16: metalstack.api.v2.Raid
	(*DiskPartition)(nil),                  // 17: metalstack.api.v2.DiskPartition
	(*VolumeGroup)(nil),                    // 18: metalstack.api.v2.VolumeGroup
	(*LogicalVolume)(nil),                  // 19: metalstack.api.v2.LogicalVolume
	nil,                                    // 20: metalstack.api.v2.FilesystemLayoutConstraints.ImagesEntry
}
var file_metalstack_api_v2_filesystem_proto_depIdxs = []int32{
	14, // 0: metalstack.api.v2.FilesystemServiceGetResponse.filesystem:type_name -> metalstack.api.v2.Filesystem
	14, // 1: metalstack.api.v2.FilesystemServiceListResponse.filesystems:type_name -> metalstack.api.v2.Filesystem
	14, // 2: metalstack.api.v2.FilesystemServiceTryResponse.filesystem:type_name -> metalstack.api.v2.Filesystem
	14, // 3: metalstack.api.v2.FilesystemServiceMatchResponse.filesystem:type_name -> metalstack.api.v2.Filesystem
	14, // 4: metalstack.api.v2.FilesystemLayout.filesystems:type_name -> metalstack.api.v2.Filesystem
	15, // 5: metalstack.api.v2.FilesystemLayout.disks:type_name -> metalstack.api.v2.Disk
	16, // 6: metalstack.api.v2.FilesystemLayout.raid:type_name -> metalstack.api.v2.Raid
	18, // 7: metalstack.api.v2.FilesystemLayout.volume_groups:type_name -> metalstack.api.v2.VolumeGroup
	19, // 8: metalstack.api.v2.FilesystemLayout.logical_volumes:type_name -> metalstack.api.v2.LogicalVolume
	13, // 9: metalstack.api.v2.FilesystemLayout.constraints:type_name -> metalstack.api.v2.FilesystemLayoutConstraints
	20, // 10: metalstack.api.v2.FilesystemLayoutConstraints.images:type_name -> metalstack.api.v2.FilesystemLayoutConstraints.ImagesEntry
	1,  // 11: metalstack.api.v2.Filesystem.format:type_name -> metalstack.api.v2.Format
	17, // 12: metalstack.api.v2.Disk.partitions:type_name -> metalstack.api.v2.DiskPartition
	3,  // 13: metalstack.api.v2.Raid.level:type_name -> metalstack.api.v2.RaidLevel
	2,  // 14: metalstack.api.v2.DiskPartition.gpt_type:type_name -> metalstack.api.v2.GPTType
	0,  // 15: metalstack.api.v2.LogicalVolume.lvm_type:type_name -> metalstack.api.v2.LVMType
	4,  // 16: metalstack.api.v2.FilesystemService.Get:input_type -> metalstack.api.v2.FilesystemServiceGetRequest
	5,  // 17: metalstack.api.v2.FilesystemService.List:input_type -> metalstack.api.v2.FilesystemServiceListRequest
	8,  // 18: metalstack.api.v2.FilesystemService.Try:input_type -> metalstack.api.v2.FilesystemServiceTryRequest
	9,  // 19: metalstack.api.v2.FilesystemService.Match:input_type -> metalstack.api.v2.FilesystemServiceMatchRequest
	6,  // 20: metalstack.api.v2.FilesystemService.Get:output_type -> metalstack.api.v2.FilesystemServiceGetResponse
	7,  // 21: metalstack.api.v2.FilesystemService.List:output_type -> metalstack.api.v2.FilesystemServiceListResponse
	10, // 22: metalstack.api.v2.FilesystemService.Try:output_type -> metalstack.api.v2.FilesystemServiceTryResponse
	11, // 23: metalstack.api.v2.FilesystemService.Match:output_type -> metalstack.api.v2.FilesystemServiceMatchResponse
	20, // [20:24] is the sub-list for method output_type
	16, // [16:20] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_metalstack_api_v2_filesystem_proto_init() }
func file_metalstack_api_v2_filesystem_proto_init() {
	if File_metalstack_api_v2_filesystem_proto != nil {
		return
	}
	file_metalstack_api_v2_common_proto_init()
	file_metalstack_api_v2_filesystem_proto_msgTypes[1].OneofWrappers = []any{}
	file_metalstack_api_v2_filesystem_proto_msgTypes[10].OneofWrappers = []any{}
	file_metalstack_api_v2_filesystem_proto_msgTypes[13].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_metalstack_api_v2_filesystem_proto_rawDesc), len(file_metalstack_api_v2_filesystem_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_metalstack_api_v2_filesystem_proto_goTypes,
		DependencyIndexes: file_metalstack_api_v2_filesystem_proto_depIdxs,
		EnumInfos:         file_metalstack_api_v2_filesystem_proto_enumTypes,
		MessageInfos:      file_metalstack_api_v2_filesystem_proto_msgTypes,
	}.Build()
	File_metalstack_api_v2_filesystem_proto = out.File
	file_metalstack_api_v2_filesystem_proto_goTypes = nil
	file_metalstack_api_v2_filesystem_proto_depIdxs = nil
}
