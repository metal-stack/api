// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: metalstack/api/v2/network.proto

package apiv2

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NATType defines how and if outgoing traffic is translated
type NATType int32

const (
	// NAT_TYPE_UNSPECIFIED indicates a unspecified nat type
	NATType_NAT_TYPE_UNSPECIFIED NATType = 0
	// NAT_TYPE_NONE indicates that no nat is configured
	NATType_NAT_TYPE_NONE NATType = 1
	// NAT_TYPE_IPV4_MASQUERADE masquerade ipv4 behind gateway ip when traffic enters this network
	NATType_NAT_TYPE_IPV4_MASQUERADE NATType = 2
)

// Enum value maps for NATType.
var (
	NATType_name = map[int32]string{
		0: "NAT_TYPE_UNSPECIFIED",
		1: "NAT_TYPE_NONE",
		2: "NAT_TYPE_IPV4_MASQUERADE",
	}
	NATType_value = map[string]int32{
		"NAT_TYPE_UNSPECIFIED":     0,
		"NAT_TYPE_NONE":            1,
		"NAT_TYPE_IPV4_MASQUERADE": 2,
	}
)

func (x NATType) Enum() *NATType {
	p := new(NATType)
	*p = x
	return p
}

func (x NATType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NATType) Descriptor() protoreflect.EnumDescriptor {
	return file_metalstack_api_v2_network_proto_enumTypes[0].Descriptor()
}

func (NATType) Type() protoreflect.EnumType {
	return &file_metalstack_api_v2_network_proto_enumTypes[0]
}

func (x NATType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NATType.Descriptor instead.
func (NATType) EnumDescriptor() ([]byte, []int) {
	return file_metalstack_api_v2_network_proto_rawDescGZIP(), []int{0}
}

// NetworkType indicates the purpose of the network, it cannot be changed after creation
type NetworkType int32

const (
	// NETWORK_TYPE_UNSPECIFIED indicates a unknown network type
	NetworkType_NETWORK_TYPE_UNSPECIFIED NetworkType = 0
	// NETWORK_TYPE_EXTERNAL indicates network where multiple projects can allocate ips, it offers connectivity to other external networks
	// In most cases this is the internet network or a network which offers connectivity to legacy datacenter networks.
	// If it is not project scoped everyone can allocate Ips in this network, otherwise only from the same project ip allocation is possible.
	NetworkType_NETWORK_TYPE_EXTERNAL NetworkType = 1
	// NETWORK_TYPE_UNDERLAY indicates a underlay network
	// The underlay network connects all switches and the firewalls to build a EVPN dataplane
	// It is not project scoped. Is part of the dataplane and reserved for administrative purposes.
	NetworkType_NETWORK_TYPE_UNDERLAY NetworkType = 2
	// NETWORK_TYPE_SUPER indicates a super network which is only used to create child networks
	// If the vrf id is given, child networks will inherit this vrf.
	// If the vrf id is nil in this network, child vrf is taken from the pool.
	// If the partition is given, child networks inherit the partition.
	// If the partition is nil, child networks also do not have a partition (i.e. requires vrf is distributed across all partitions).
	// If the partition is given, only one super network in that partition can be created.
	// If the partition is nil, multiple super networks can exist. Then, for child network creation the network id must be specified (base networks can be queried by label selector).
	// For child creation destination prefixes will be inherited
	// If this is project scoped, the child project must match, otherwise can be freely specified.
	NetworkType_NETWORK_TYPE_SUPER NetworkType = 3
	// NETWORK_TYPE_SUPER_NAMESPACED indicates a super network which is only used to create child networks.
	// All rules from NETWORK_TYPE_SUPER apply for them as well.
	// In addition, a network namespace will be created for every project. Child networks per project will have disjunct prefixes.
	// Prefix allocation will start again with the same base cidr for every project / namespace.
	// This will allow the creation of much more child networks from a given super network size.
	NetworkType_NETWORK_TYPE_SUPER_NAMESPACED NetworkType = 4
	// NETWORK_TYPE_CHILD indicates a child network of a project.
	// This is the only network type that can be created by a user.
	// Connectivity to external networks is not possible without going through an additional firewall in this network which creates connectivity to other networks.
	// Such a network will be created either from a super, or super namespaced.
	NetworkType_NETWORK_TYPE_CHILD NetworkType = 5
	// NETWORK_TYPE_CHILD_SHARED indicates a child network of a project which allows the allocation of ips from different projects.
	// Connectivity to external networks is not possible, as for normal child networks.
	// These networks are usually used to provide connectivity to shared services which are created in child networks, e.g. storage.
	// With this approach the number of hops can be reduced to the bare minimum in order to increase availability and performance.
	NetworkType_NETWORK_TYPE_CHILD_SHARED NetworkType = 6
)

// Enum value maps for NetworkType.
var (
	NetworkType_name = map[int32]string{
		0: "NETWORK_TYPE_UNSPECIFIED",
		1: "NETWORK_TYPE_EXTERNAL",
		2: "NETWORK_TYPE_UNDERLAY",
		3: "NETWORK_TYPE_SUPER",
		4: "NETWORK_TYPE_SUPER_NAMESPACED",
		5: "NETWORK_TYPE_CHILD",
		6: "NETWORK_TYPE_CHILD_SHARED",
	}
	NetworkType_value = map[string]int32{
		"NETWORK_TYPE_UNSPECIFIED":      0,
		"NETWORK_TYPE_EXTERNAL":         1,
		"NETWORK_TYPE_UNDERLAY":         2,
		"NETWORK_TYPE_SUPER":            3,
		"NETWORK_TYPE_SUPER_NAMESPACED": 4,
		"NETWORK_TYPE_CHILD":            5,
		"NETWORK_TYPE_CHILD_SHARED":     6,
	}
)

func (x NetworkType) Enum() *NetworkType {
	p := new(NetworkType)
	*p = x
	return p
}

func (x NetworkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkType) Descriptor() protoreflect.EnumDescriptor {
	return file_metalstack_api_v2_network_proto_enumTypes[1].Descriptor()
}

func (NetworkType) Type() protoreflect.EnumType {
	return &file_metalstack_api_v2_network_proto_enumTypes[1]
}

func (x NetworkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkType.Descriptor instead.
func (NetworkType) EnumDescriptor() ([]byte, []int) {
	return file_metalstack_api_v2_network_proto_rawDescGZIP(), []int{1}
}

// NetworkAddressFamily defines the address family of a network
type NetworkAddressFamily int32

const (
	// NETWORK_ADDRESS_FAMILY_UNSPECIFIED is not specified
	NetworkAddressFamily_NETWORK_ADDRESS_FAMILY_UNSPECIFIED NetworkAddressFamily = 0
	// NETWORK_ADDRESS_FAMILY_V4 defines a network with IPv4 address prefixes
	NetworkAddressFamily_NETWORK_ADDRESS_FAMILY_V4 NetworkAddressFamily = 1
	// NETWORK_ADDRESS_FAMILY_V6 defines a network with IPv6 address prefixes
	NetworkAddressFamily_NETWORK_ADDRESS_FAMILY_V6 NetworkAddressFamily = 2
	// NETWORK_ADDRESS_FAMILY_DUAL_STACK defines a network with both IPv4 and IPv6 address prefixes
	NetworkAddressFamily_NETWORK_ADDRESS_FAMILY_DUAL_STACK NetworkAddressFamily = 3
)

// Enum value maps for NetworkAddressFamily.
var (
	NetworkAddressFamily_name = map[int32]string{
		0: "NETWORK_ADDRESS_FAMILY_UNSPECIFIED",
		1: "NETWORK_ADDRESS_FAMILY_V4",
		2: "NETWORK_ADDRESS_FAMILY_V6",
		3: "NETWORK_ADDRESS_FAMILY_DUAL_STACK",
	}
	NetworkAddressFamily_value = map[string]int32{
		"NETWORK_ADDRESS_FAMILY_UNSPECIFIED": 0,
		"NETWORK_ADDRESS_FAMILY_V4":          1,
		"NETWORK_ADDRESS_FAMILY_V6":          2,
		"NETWORK_ADDRESS_FAMILY_DUAL_STACK":  3,
	}
)

func (x NetworkAddressFamily) Enum() *NetworkAddressFamily {
	p := new(NetworkAddressFamily)
	*p = x
	return p
}

func (x NetworkAddressFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkAddressFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_metalstack_api_v2_network_proto_enumTypes[2].Descriptor()
}

func (NetworkAddressFamily) Type() protoreflect.EnumType {
	return &file_metalstack_api_v2_network_proto_enumTypes[2]
}

func (x NetworkAddressFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkAddressFamily.Descriptor instead.
func (NetworkAddressFamily) EnumDescriptor() ([]byte, []int) {
	return file_metalstack_api_v2_network_proto_rawDescGZIP(), []int{2}
}

// NetworkServiceGetRequest
type NetworkServiceGetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the network to get
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Project of the network
	Project       string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkServiceGetRequest) Reset() {
	*x = NetworkServiceGetRequest{}
	mi := &file_metalstack_api_v2_network_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkServiceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkServiceGetRequest) ProtoMessage() {}

func (x *NetworkServiceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_network_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkServiceGetRequest.ProtoReflect.Descriptor instead.
func (*NetworkServiceGetRequest) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_network_proto_rawDescGZIP(), []int{0}
}

func (x *NetworkServiceGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NetworkServiceGetRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// NetworkServiceGetResponse
type NetworkServiceGetResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Network which was requested to get
	Network       *Network `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkServiceGetResponse) Reset() {
	*x = NetworkServiceGetResponse{}
	mi := &file_metalstack_api_v2_network_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkServiceGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkServiceGetResponse) ProtoMessage() {}

func (x *NetworkServiceGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_network_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkServiceGetResponse.ProtoReflect.Descriptor instead.
func (*NetworkServiceGetResponse) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_network_proto_rawDescGZIP(), []int{1}
}

func (x *NetworkServiceGetResponse) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

// NetworkServiceCreateRequest
type NetworkServiceCreateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Project where this network belongs to
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Name of this network
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Description of this network
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Partition where this network will be created
	Partition *string `protobuf:"bytes,4,opt,name=partition,proto3,oneof" json:"partition,omitempty"`
	// Labels on this network
	Labels *Labels `protobuf:"bytes,5,opt,name=labels,proto3" json:"labels,omitempty"`
	// Parent Network points to the id of the parent network if any
	ParentNetwork *string `protobuf:"bytes,6,opt,name=parent_network,json=parentNetwork,proto3,oneof" json:"parent_network,omitempty"`
	// Length per addressfamily
	Length *ChildPrefixLength `protobuf:"bytes,7,opt,name=length,proto3,oneof" json:"length,omitempty"`
	// AddressFamily to create, defaults to the same as the parent
	AddressFamily *NetworkAddressFamily `protobuf:"varint,8,opt,name=address_family,json=addressFamily,proto3,enum=metalstack.api.v2.NetworkAddressFamily,oneof" json:"address_family,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkServiceCreateRequest) Reset() {
	*x = NetworkServiceCreateRequest{}
	mi := &file_metalstack_api_v2_network_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkServiceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkServiceCreateRequest) ProtoMessage() {}

func (x *NetworkServiceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_network_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkServiceCreateRequest.ProtoReflect.Descriptor instead.
func (*NetworkServiceCreateRequest) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_network_proto_rawDescGZIP(), []int{2}
}

func (x *NetworkServiceCreateRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *NetworkServiceCreateRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetworkServiceCreateRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *NetworkServiceCreateRequest) GetPartition() string {
	if x != nil && x.Partition != nil {
		return *x.Partition
	}
	return ""
}

func (x *NetworkServiceCreateRequest) GetLabels() *Labels {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *NetworkServiceCreateRequest) GetParentNetwork() string {
	if x != nil && x.ParentNetwork != nil {
		return *x.ParentNetwork
	}
	return ""
}

func (x *NetworkServiceCreateRequest) GetLength() *ChildPrefixLength {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *NetworkServiceCreateRequest) GetAddressFamily() NetworkAddressFamily {
	if x != nil && x.AddressFamily != nil {
		return *x.AddressFamily
	}
	return NetworkAddressFamily_NETWORK_ADDRESS_FAMILY_UNSPECIFIED
}

// NetworkServiceCreateResponse
type NetworkServiceCreateResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Network is the created network
	Network       *Network `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkServiceCreateResponse) Reset() {
	*x = NetworkServiceCreateResponse{}
	mi := &file_metalstack_api_v2_network_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkServiceCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkServiceCreateResponse) ProtoMessage() {}

func (x *NetworkServiceCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_network_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkServiceCreateResponse.ProtoReflect.Descriptor instead.
func (*NetworkServiceCreateResponse) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_network_proto_rawDescGZIP(), []int{3}
}

func (x *NetworkServiceCreateResponse) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

// NetworkServiceUpdateRequest
type NetworkServiceUpdateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the network to get
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// UpdateMeta contains the timestamp and strategy to be used in this update request
	UpdateMeta *UpdateMeta `protobuf:"bytes,2,opt,name=update_meta,json=updateMeta,proto3" json:"update_meta,omitempty"`
	// Project of the network
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	// Name of this network
	Name *string `protobuf:"bytes,4,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Description of this network
	Description *string `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Labels on this network
	Labels        *UpdateLabels `protobuf:"bytes,6,opt,name=labels,proto3,oneof" json:"labels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkServiceUpdateRequest) Reset() {
	*x = NetworkServiceUpdateRequest{}
	mi := &file_metalstack_api_v2_network_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkServiceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkServiceUpdateRequest) ProtoMessage() {}

func (x *NetworkServiceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_network_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkServiceUpdateRequest.ProtoReflect.Descriptor instead.
func (*NetworkServiceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_network_proto_rawDescGZIP(), []int{4}
}

func (x *NetworkServiceUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NetworkServiceUpdateRequest) GetUpdateMeta() *UpdateMeta {
	if x != nil {
		return x.UpdateMeta
	}
	return nil
}

func (x *NetworkServiceUpdateRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *NetworkServiceUpdateRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetworkServiceUpdateRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *NetworkServiceUpdateRequest) GetLabels() *UpdateLabels {
	if x != nil {
		return x.Labels
	}
	return nil
}

// NetworkServiceUpdateResponse
type NetworkServiceUpdateResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Network is the updated network
	Network       *Network `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkServiceUpdateResponse) Reset() {
	*x = NetworkServiceUpdateResponse{}
	mi := &file_metalstack_api_v2_network_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkServiceUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkServiceUpdateResponse) ProtoMessage() {}

func (x *NetworkServiceUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_network_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkServiceUpdateResponse.ProtoReflect.Descriptor instead.
func (*NetworkServiceUpdateResponse) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_network_proto_rawDescGZIP(), []int{5}
}

func (x *NetworkServiceUpdateResponse) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

// NetworkServiceListRequest
type NetworkServiceListRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Project of the networks to list
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Query which specifies which networks to return
	Query         *NetworkQuery `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkServiceListRequest) Reset() {
	*x = NetworkServiceListRequest{}
	mi := &file_metalstack_api_v2_network_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkServiceListRequest) ProtoMessage() {}

func (x *NetworkServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_network_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkServiceListRequest.ProtoReflect.Descriptor instead.
func (*NetworkServiceListRequest) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_network_proto_rawDescGZIP(), []int{6}
}

func (x *NetworkServiceListRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *NetworkServiceListRequest) GetQuery() *NetworkQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

// NetworkServiceListResponse
type NetworkServiceListResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Networks are the requested networks
	Networks      []*Network `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkServiceListResponse) Reset() {
	*x = NetworkServiceListResponse{}
	mi := &file_metalstack_api_v2_network_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkServiceListResponse) ProtoMessage() {}

func (x *NetworkServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_network_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkServiceListResponse.ProtoReflect.Descriptor instead.
func (*NetworkServiceListResponse) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_network_proto_rawDescGZIP(), []int{7}
}

func (x *NetworkServiceListResponse) GetNetworks() []*Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

// NetworkServiceListRequest
type NetworkServiceListBaseNetworksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Project of the base networks to list
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Query which specifies which networks to return
	Query         *NetworkQuery `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkServiceListBaseNetworksRequest) Reset() {
	*x = NetworkServiceListBaseNetworksRequest{}
	mi := &file_metalstack_api_v2_network_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkServiceListBaseNetworksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkServiceListBaseNetworksRequest) ProtoMessage() {}

func (x *NetworkServiceListBaseNetworksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_network_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkServiceListBaseNetworksRequest.ProtoReflect.Descriptor instead.
func (*NetworkServiceListBaseNetworksRequest) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_network_proto_rawDescGZIP(), []int{8}
}

func (x *NetworkServiceListBaseNetworksRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *NetworkServiceListBaseNetworksRequest) GetQuery() *NetworkQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

// NetworkServiceListResponse
type NetworkServiceListBaseNetworksResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Networks are the requested networks
	Networks      []*Network `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkServiceListBaseNetworksResponse) Reset() {
	*x = NetworkServiceListBaseNetworksResponse{}
	mi := &file_metalstack_api_v2_network_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkServiceListBaseNetworksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkServiceListBaseNetworksResponse) ProtoMessage() {}

func (x *NetworkServiceListBaseNetworksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_network_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkServiceListBaseNetworksResponse.ProtoReflect.Descriptor instead.
func (*NetworkServiceListBaseNetworksResponse) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_network_proto_rawDescGZIP(), []int{9}
}

func (x *NetworkServiceListBaseNetworksResponse) GetNetworks() []*Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

// NetworkServiceDeleteRequest
type NetworkServiceDeleteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the network to get
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Project of the network
	Project       string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkServiceDeleteRequest) Reset() {
	*x = NetworkServiceDeleteRequest{}
	mi := &file_metalstack_api_v2_network_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkServiceDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkServiceDeleteRequest) ProtoMessage() {}

func (x *NetworkServiceDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_network_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkServiceDeleteRequest.ProtoReflect.Descriptor instead.
func (*NetworkServiceDeleteRequest) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_network_proto_rawDescGZIP(), []int{10}
}

func (x *NetworkServiceDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NetworkServiceDeleteRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// NetworkServiceDeleteResponse
type NetworkServiceDeleteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Network is the deleted network
	Network       *Network `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkServiceDeleteResponse) Reset() {
	*x = NetworkServiceDeleteResponse{}
	mi := &file_metalstack_api_v2_network_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkServiceDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkServiceDeleteResponse) ProtoMessage() {}

func (x *NetworkServiceDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_network_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkServiceDeleteResponse.ProtoReflect.Descriptor instead.
func (*NetworkServiceDeleteResponse) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_network_proto_rawDescGZIP(), []int{11}
}

func (x *NetworkServiceDeleteResponse) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

// Network
type Network struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id of this network
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Meta for this network
	Meta *Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// Name of this network
	Name *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Description of this network
	Description *string `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Partition where this network will be created
	Partition *string `protobuf:"bytes,5,opt,name=partition,proto3,oneof" json:"partition,omitempty"`
	// Project where this network belongs to
	Project *string `protobuf:"bytes,6,opt,name=project,proto3,oneof" json:"project,omitempty"`
	// Namespace if specified, this network is namespaced and can therefore overlap with others
	// Will be equal with project most of the time
	Namespace *string `protobuf:"bytes,7,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
	// Prefixes in this network
	Prefixes []string `protobuf:"bytes,8,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
	// Destination Prefixes in this network
	DestinationPrefixes []string `protobuf:"bytes,9,rep,name=destination_prefixes,json=destinationPrefixes,proto3" json:"destination_prefixes,omitempty"`
	// Default Child Prefix length defines the bitlength of a child network created per addressfamily, of not specified during the allocate request
	DefaultChildPrefixLength *ChildPrefixLength `protobuf:"bytes,10,opt,name=default_child_prefix_length,json=defaultChildPrefixLength,proto3" json:"default_child_prefix_length,omitempty"`
	// Min Child Prefix length asserts that during child network creation the requested bit length is greater or equal the min child prefix length
	MinChildPrefixLength *ChildPrefixLength `protobuf:"bytes,11,opt,name=min_child_prefix_length,json=minChildPrefixLength,proto3" json:"min_child_prefix_length,omitempty"`
	// Type of the network
	Type *NetworkType `protobuf:"varint,12,opt,name=type,proto3,enum=metalstack.api.v2.NetworkType,oneof" json:"type,omitempty"`
	// NATType of this network
	NatType *NATType `protobuf:"varint,13,opt,name=nat_type,json=natType,proto3,enum=metalstack.api.v2.NATType,oneof" json:"nat_type,omitempty"`
	// VRF of this network has this VNI.
	Vrf *uint32 `protobuf:"varint,14,opt,name=vrf,proto3,oneof" json:"vrf,omitempty"`
	// Parent Network points to the id of the parent network if any
	ParentNetwork *string `protobuf:"bytes,15,opt,name=parent_network,json=parentNetwork,proto3,oneof" json:"parent_network,omitempty"`
	// AdditionalAnnouncableCidrs will be added to the allow list on the switch which prefixes might be announced
	AdditionalAnnouncableCidrs []string `protobuf:"bytes,16,rep,name=additional_announcable_cidrs,json=additionalAnnouncableCidrs,proto3" json:"additional_announcable_cidrs,omitempty"`
	// Consumption of ips and prefixes in this networks
	Consumption   *NetworkConsumption `protobuf:"bytes,17,opt,name=consumption,proto3" json:"consumption,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Network) Reset() {
	*x = Network{}
	mi := &file_metalstack_api_v2_network_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_network_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_network_proto_rawDescGZIP(), []int{12}
}

func (x *Network) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Network) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Network) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Network) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Network) GetPartition() string {
	if x != nil && x.Partition != nil {
		return *x.Partition
	}
	return ""
}

func (x *Network) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *Network) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *Network) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

func (x *Network) GetDestinationPrefixes() []string {
	if x != nil {
		return x.DestinationPrefixes
	}
	return nil
}

func (x *Network) GetDefaultChildPrefixLength() *ChildPrefixLength {
	if x != nil {
		return x.DefaultChildPrefixLength
	}
	return nil
}

func (x *Network) GetMinChildPrefixLength() *ChildPrefixLength {
	if x != nil {
		return x.MinChildPrefixLength
	}
	return nil
}

func (x *Network) GetType() NetworkType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return NetworkType_NETWORK_TYPE_UNSPECIFIED
}

func (x *Network) GetNatType() NATType {
	if x != nil && x.NatType != nil {
		return *x.NatType
	}
	return NATType_NAT_TYPE_UNSPECIFIED
}

func (x *Network) GetVrf() uint32 {
	if x != nil && x.Vrf != nil {
		return *x.Vrf
	}
	return 0
}

func (x *Network) GetParentNetwork() string {
	if x != nil && x.ParentNetwork != nil {
		return *x.ParentNetwork
	}
	return ""
}

func (x *Network) GetAdditionalAnnouncableCidrs() []string {
	if x != nil {
		return x.AdditionalAnnouncableCidrs
	}
	return nil
}

func (x *Network) GetConsumption() *NetworkConsumption {
	if x != nil {
		return x.Consumption
	}
	return nil
}

// NetworkQuery defines which networks to query
type NetworkQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id of the network to query
	Id *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// Name of this network
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Description of this network
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Partition where this network will be created
	Partition *string `protobuf:"bytes,4,opt,name=partition,proto3,oneof" json:"partition,omitempty"`
	// Project where this network belongs to
	Project *string `protobuf:"bytes,5,opt,name=project,proto3,oneof" json:"project,omitempty"`
	// Namespace where this network belongs to
	Namespace *string `protobuf:"bytes,6,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
	// Prefixes in this network
	Prefixes []string `protobuf:"bytes,7,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
	// Destination Prefixes in this network
	DestinationPrefixes []string `protobuf:"bytes,8,rep,name=destination_prefixes,json=destinationPrefixes,proto3" json:"destination_prefixes,omitempty"`
	// VRF of this network has this VNI.
	Vrf *uint32 `protobuf:"varint,9,opt,name=vrf,proto3,oneof" json:"vrf,omitempty"`
	// Parent Network points to the id of the parent network if any
	ParentNetwork *string `protobuf:"bytes,10,opt,name=parent_network,json=parentNetwork,proto3,oneof" json:"parent_network,omitempty"`
	// Addressfamily to query
	AddressFamily *NetworkAddressFamily `protobuf:"varint,11,opt,name=address_family,json=addressFamily,proto3,enum=metalstack.api.v2.NetworkAddressFamily,oneof" json:"address_family,omitempty"`
	// Type of the network to query for
	Type *NetworkType `protobuf:"varint,12,opt,name=type,proto3,enum=metalstack.api.v2.NetworkType,oneof" json:"type,omitempty"`
	// NATType configured
	NatType *NATType `protobuf:"varint,13,opt,name=nat_type,json=natType,proto3,enum=metalstack.api.v2.NATType,oneof" json:"nat_type,omitempty"`
	// Labels on this network
	Labels        *Labels `protobuf:"bytes,14,opt,name=labels,proto3,oneof" json:"labels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkQuery) Reset() {
	*x = NetworkQuery{}
	mi := &file_metalstack_api_v2_network_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkQuery) ProtoMessage() {}

func (x *NetworkQuery) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_network_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkQuery.ProtoReflect.Descriptor instead.
func (*NetworkQuery) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_network_proto_rawDescGZIP(), []int{13}
}

func (x *NetworkQuery) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *NetworkQuery) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetworkQuery) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *NetworkQuery) GetPartition() string {
	if x != nil && x.Partition != nil {
		return *x.Partition
	}
	return ""
}

func (x *NetworkQuery) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *NetworkQuery) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *NetworkQuery) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

func (x *NetworkQuery) GetDestinationPrefixes() []string {
	if x != nil {
		return x.DestinationPrefixes
	}
	return nil
}

func (x *NetworkQuery) GetVrf() uint32 {
	if x != nil && x.Vrf != nil {
		return *x.Vrf
	}
	return 0
}

func (x *NetworkQuery) GetParentNetwork() string {
	if x != nil && x.ParentNetwork != nil {
		return *x.ParentNetwork
	}
	return ""
}

func (x *NetworkQuery) GetAddressFamily() NetworkAddressFamily {
	if x != nil && x.AddressFamily != nil {
		return *x.AddressFamily
	}
	return NetworkAddressFamily_NETWORK_ADDRESS_FAMILY_UNSPECIFIED
}

func (x *NetworkQuery) GetType() NetworkType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return NetworkType_NETWORK_TYPE_UNSPECIFIED
}

func (x *NetworkQuery) GetNatType() NATType {
	if x != nil && x.NatType != nil {
		return *x.NatType
	}
	return NATType_NAT_TYPE_UNSPECIFIED
}

func (x *NetworkQuery) GetLabels() *Labels {
	if x != nil {
		return x.Labels
	}
	return nil
}

// ChildPrefixLength
type ChildPrefixLength struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IPv4 bit length of this network in this addressfamily
	Ipv4 *uint32 `protobuf:"varint,1,opt,name=ipv4,proto3,oneof" json:"ipv4,omitempty"`
	// IPv6 bit length of this network in this addressfamily
	Ipv6          *uint32 `protobuf:"varint,2,opt,name=ipv6,proto3,oneof" json:"ipv6,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChildPrefixLength) Reset() {
	*x = ChildPrefixLength{}
	mi := &file_metalstack_api_v2_network_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChildPrefixLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildPrefixLength) ProtoMessage() {}

func (x *ChildPrefixLength) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_network_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildPrefixLength.ProtoReflect.Descriptor instead.
func (*ChildPrefixLength) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_network_proto_rawDescGZIP(), []int{14}
}

func (x *ChildPrefixLength) GetIpv4() uint32 {
	if x != nil && x.Ipv4 != nil {
		return *x.Ipv4
	}
	return 0
}

func (x *ChildPrefixLength) GetIpv6() uint32 {
	if x != nil && x.Ipv6 != nil {
		return *x.Ipv6
	}
	return 0
}

// NetworkConsumption contains ip and prefix usage by addressfamily
type NetworkConsumption struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IPv4 network usage
	Ipv4 *NetworkUsage `protobuf:"bytes,1,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	// IPv6 network usage, this can be approximated for high numbers
	Ipv6          *NetworkUsage `protobuf:"bytes,2,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkConsumption) Reset() {
	*x = NetworkConsumption{}
	mi := &file_metalstack_api_v2_network_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkConsumption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkConsumption) ProtoMessage() {}

func (x *NetworkConsumption) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_network_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkConsumption.ProtoReflect.Descriptor instead.
func (*NetworkConsumption) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_network_proto_rawDescGZIP(), []int{15}
}

func (x *NetworkConsumption) GetIpv4() *NetworkUsage {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

func (x *NetworkConsumption) GetIpv6() *NetworkUsage {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

// NetworkUsage reports core metrics about available and used IPs or Prefixes in a Network.
type NetworkUsage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the total available IPs
	AvailableIps uint64 `protobuf:"varint,2,opt,name=available_ips,json=availableIps,proto3" json:"available_ips,omitempty"`
	// the total used IPs
	UsedIps uint64 `protobuf:"varint,3,opt,name=used_ips,json=usedIps,proto3" json:"used_ips,omitempty"`
	// the total available 2 bit Prefixes
	AvailablePrefixes uint64 `protobuf:"varint,4,opt,name=available_prefixes,json=availablePrefixes,proto3" json:"available_prefixes,omitempty"`
	// the total used Prefixes
	UsedPrefixes  uint64 `protobuf:"varint,5,opt,name=used_prefixes,json=usedPrefixes,proto3" json:"used_prefixes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkUsage) Reset() {
	*x = NetworkUsage{}
	mi := &file_metalstack_api_v2_network_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkUsage) ProtoMessage() {}

func (x *NetworkUsage) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_network_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkUsage.ProtoReflect.Descriptor instead.
func (*NetworkUsage) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_network_proto_rawDescGZIP(), []int{16}
}

func (x *NetworkUsage) GetAvailableIps() uint64 {
	if x != nil {
		return x.AvailableIps
	}
	return 0
}

func (x *NetworkUsage) GetUsedIps() uint64 {
	if x != nil {
		return x.UsedIps
	}
	return 0
}

func (x *NetworkUsage) GetAvailablePrefixes() uint64 {
	if x != nil {
		return x.AvailablePrefixes
	}
	return 0
}

func (x *NetworkUsage) GetUsedPrefixes() uint64 {
	if x != nil {
		return x.UsedPrefixes
	}
	return 0
}

var File_metalstack_api_v2_network_proto protoreflect.FileDescriptor

const file_metalstack_api_v2_network_proto_rawDesc = "" +
	"\n" +
	"\x1fmetalstack/api/v2/network.proto\x12\x11metalstack.api.v2\x1a\x1bbuf/validate/validate.proto\x1a\x1emetalstack/api/v2/common.proto\"Z\n" +
	"\x18NetworkServiceGetRequest\x12\x1a\n" +
	"\x02id\x18\x01 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01R\x02id\x12\"\n" +
	"\aproject\x18\x02 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\aproject\"Q\n" +
	"\x19NetworkServiceGetResponse\x124\n" +
	"\anetwork\x18\x01 \x01(\v2\x1a.metalstack.api.v2.NetworkR\anetwork\"\xad\x04\n" +
	"\x1bNetworkServiceCreateRequest\x12\"\n" +
	"\aproject\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\aproject\x12#\n" +
	"\x04name\x18\x02 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\x00R\x04name\x88\x01\x01\x121\n" +
	"\vdescription\x18\x03 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\x01R\vdescription\x88\x01\x01\x12-\n" +
	"\tpartition\x18\x04 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\x02R\tpartition\x88\x01\x01\x121\n" +
	"\x06labels\x18\x05 \x01(\v2\x19.metalstack.api.v2.LabelsR\x06labels\x126\n" +
	"\x0eparent_network\x18\x06 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\x03R\rparentNetwork\x88\x01\x01\x12A\n" +
	"\x06length\x18\a \x01(\v2$.metalstack.api.v2.ChildPrefixLengthH\x04R\x06length\x88\x01\x01\x12]\n" +
	"\x0eaddress_family\x18\b \x01(\x0e2'.metalstack.api.v2.NetworkAddressFamilyB\b\xbaH\x05\x82\x01\x02\x10\x01H\x05R\raddressFamily\x88\x01\x01B\a\n" +
	"\x05_nameB\x0e\n" +
	"\f_descriptionB\f\n" +
	"\n" +
	"_partitionB\x11\n" +
	"\x0f_parent_networkB\t\n" +
	"\a_lengthB\x11\n" +
	"\x0f_address_family\"T\n" +
	"\x1cNetworkServiceCreateResponse\x124\n" +
	"\anetwork\x18\x01 \x01(\v2\x1a.metalstack.api.v2.NetworkR\anetwork\"\xdf\x02\n" +
	"\x1bNetworkServiceUpdateRequest\x12\x1a\n" +
	"\x02id\x18\x01 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01R\x02id\x12F\n" +
	"\vupdate_meta\x18\x02 \x01(\v2\x1d.metalstack.api.v2.UpdateMetaB\x06\xbaH\x03\xc8\x01\x01R\n" +
	"updateMeta\x12\"\n" +
	"\aproject\x18\x03 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\aproject\x12#\n" +
	"\x04name\x18\x04 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\x00R\x04name\x88\x01\x01\x121\n" +
	"\vdescription\x18\x05 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\x01R\vdescription\x88\x01\x01\x12<\n" +
	"\x06labels\x18\x06 \x01(\v2\x1f.metalstack.api.v2.UpdateLabelsH\x02R\x06labels\x88\x01\x01B\a\n" +
	"\x05_nameB\x0e\n" +
	"\f_descriptionB\t\n" +
	"\a_labels\"T\n" +
	"\x1cNetworkServiceUpdateResponse\x124\n" +
	"\anetwork\x18\x01 \x01(\v2\x1a.metalstack.api.v2.NetworkR\anetwork\"v\n" +
	"\x19NetworkServiceListRequest\x12\"\n" +
	"\aproject\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\aproject\x125\n" +
	"\x05query\x18\x02 \x01(\v2\x1f.metalstack.api.v2.NetworkQueryR\x05query\"T\n" +
	"\x1aNetworkServiceListResponse\x126\n" +
	"\bnetworks\x18\x01 \x03(\v2\x1a.metalstack.api.v2.NetworkR\bnetworks\"\x82\x01\n" +
	"%NetworkServiceListBaseNetworksRequest\x12\"\n" +
	"\aproject\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\aproject\x125\n" +
	"\x05query\x18\x02 \x01(\v2\x1f.metalstack.api.v2.NetworkQueryR\x05query\"`\n" +
	"&NetworkServiceListBaseNetworksResponse\x126\n" +
	"\bnetworks\x18\x01 \x03(\v2\x1a.metalstack.api.v2.NetworkR\bnetworks\"]\n" +
	"\x1bNetworkServiceDeleteRequest\x12\x1a\n" +
	"\x02id\x18\x01 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01R\x02id\x12\"\n" +
	"\aproject\x18\x02 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\aproject\"T\n" +
	"\x1cNetworkServiceDeleteResponse\x124\n" +
	"\anetwork\x18\x01 \x01(\v2\x1a.metalstack.api.v2.NetworkR\anetwork\"\xed\n" +
	"\n" +
	"\aNetwork\x12\x1a\n" +
	"\x02id\x18\x01 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01R\x02id\x12+\n" +
	"\x04meta\x18\x02 \x01(\v2\x17.metalstack.api.v2.MetaR\x04meta\x12#\n" +
	"\x04name\x18\x03 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\x00R\x04name\x88\x01\x01\x121\n" +
	"\vdescription\x18\x04 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\x01R\vdescription\x88\x01\x01\x12-\n" +
	"\tpartition\x18\x05 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\x02R\tpartition\x88\x01\x01\x12'\n" +
	"\aproject\x18\x06 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01H\x03R\aproject\x88\x01\x01\x12+\n" +
	"\tnamespace\x18\a \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01H\x04R\tnamespace\x88\x01\x01\x12\x1a\n" +
	"\bprefixes\x18\b \x03(\tR\bprefixes\x121\n" +
	"\x14destination_prefixes\x18\t \x03(\tR\x13destinationPrefixes\x12c\n" +
	"\x1bdefault_child_prefix_length\x18\n" +
	" \x01(\v2$.metalstack.api.v2.ChildPrefixLengthR\x18defaultChildPrefixLength\x12[\n" +
	"\x17min_child_prefix_length\x18\v \x01(\v2$.metalstack.api.v2.ChildPrefixLengthR\x14minChildPrefixLength\x12A\n" +
	"\x04type\x18\f \x01(\x0e2\x1e.metalstack.api.v2.NetworkTypeB\b\xbaH\x05\x82\x01\x02\x10\x01H\x05R\x04type\x88\x01\x01\x12D\n" +
	"\bnat_type\x18\r \x01(\x0e2\x1a.metalstack.api.v2.NATTypeB\b\xbaH\x05\x82\x01\x02\x10\x01H\x06R\anatType\x88\x01\x01\x12\x15\n" +
	"\x03vrf\x18\x0e \x01(\rH\aR\x03vrf\x88\x01\x01\x126\n" +
	"\x0eparent_network\x18\x0f \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\bR\rparentNetwork\x88\x01\x01\x12@\n" +
	"\x1cadditional_announcable_cidrs\x18\x10 \x03(\tR\x1aadditionalAnnouncableCidrs\x12G\n" +
	"\vconsumption\x18\x11 \x01(\v2%.metalstack.api.v2.NetworkConsumptionR\vconsumption:\xd5\x02\xbaH\xd1\x02\x1aN\n" +
	"\bprefixes\x12\x1cgiven prefixes must be valid\x1a$this.prefixes.all(m, m.isIpPrefix())\x1ar\n" +
	"\x14destination_prefixes\x12(given destination_prefixes must be valid\x1a0this.destination_prefixes.all(m, m.isIpPrefix())\x1a\x8a\x01\n" +
	"\x1cadditional_announcable_cidrs\x120given additional_announcable_cidrs must be valid\x1a8this.additional_announcable_cidrs.all(m, m.isIpPrefix())B\a\n" +
	"\x05_nameB\x0e\n" +
	"\f_descriptionB\f\n" +
	"\n" +
	"_partitionB\n" +
	"\n" +
	"\b_projectB\f\n" +
	"\n" +
	"_namespaceB\a\n" +
	"\x05_typeB\v\n" +
	"\t_nat_typeB\x06\n" +
	"\x04_vrfB\x11\n" +
	"\x0f_parent_network\"\xac\b\n" +
	"\fNetworkQuery\x12\x1f\n" +
	"\x02id\x18\x01 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\x00R\x02id\x88\x01\x01\x12#\n" +
	"\x04name\x18\x02 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\x01R\x04name\x88\x01\x01\x121\n" +
	"\vdescription\x18\x03 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\x02R\vdescription\x88\x01\x01\x12-\n" +
	"\tpartition\x18\x04 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\x03R\tpartition\x88\x01\x01\x12'\n" +
	"\aproject\x18\x05 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01H\x04R\aproject\x88\x01\x01\x12+\n" +
	"\tnamespace\x18\x06 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01H\x05R\tnamespace\x88\x01\x01\x12\x1a\n" +
	"\bprefixes\x18\a \x03(\tR\bprefixes\x121\n" +
	"\x14destination_prefixes\x18\b \x03(\tR\x13destinationPrefixes\x12\x15\n" +
	"\x03vrf\x18\t \x01(\rH\x06R\x03vrf\x88\x01\x01\x126\n" +
	"\x0eparent_network\x18\n" +
	" \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\aR\rparentNetwork\x88\x01\x01\x12]\n" +
	"\x0eaddress_family\x18\v \x01(\x0e2'.metalstack.api.v2.NetworkAddressFamilyB\b\xbaH\x05\x82\x01\x02\x10\x01H\bR\raddressFamily\x88\x01\x01\x12A\n" +
	"\x04type\x18\f \x01(\x0e2\x1e.metalstack.api.v2.NetworkTypeB\b\xbaH\x05\x82\x01\x02\x10\x01H\tR\x04type\x88\x01\x01\x12D\n" +
	"\bnat_type\x18\r \x01(\x0e2\x1a.metalstack.api.v2.NATTypeB\b\xbaH\x05\x82\x01\x02\x10\x01H\n" +
	"R\anatType\x88\x01\x01\x126\n" +
	"\x06labels\x18\x0e \x01(\v2\x19.metalstack.api.v2.LabelsH\vR\x06labels\x88\x01\x01:\xc8\x01\xbaH\xc4\x01\x1aN\n" +
	"\bprefixes\x12\x1cgiven prefixes must be valid\x1a$this.prefixes.all(m, m.isIpPrefix())\x1ar\n" +
	"\x14destination_prefixes\x12(given destination_prefixes must be valid\x1a0this.destination_prefixes.all(m, m.isIpPrefix())B\x05\n" +
	"\x03_idB\a\n" +
	"\x05_nameB\x0e\n" +
	"\f_descriptionB\f\n" +
	"\n" +
	"_partitionB\n" +
	"\n" +
	"\b_projectB\f\n" +
	"\n" +
	"_namespaceB\x06\n" +
	"\x04_vrfB\x11\n" +
	"\x0f_parent_networkB\x11\n" +
	"\x0f_address_familyB\a\n" +
	"\x05_typeB\v\n" +
	"\t_nat_typeB\t\n" +
	"\a_labels\"n\n" +
	"\x11ChildPrefixLength\x12\"\n" +
	"\x04ipv4\x18\x01 \x01(\rB\t\xbaH\x06*\x04\x18  \x00H\x00R\x04ipv4\x88\x01\x01\x12#\n" +
	"\x04ipv6\x18\x02 \x01(\rB\n" +
	"\xbaH\a*\x05\x18\x80\x01 \x00H\x01R\x04ipv6\x88\x01\x01B\a\n" +
	"\x05_ipv4B\a\n" +
	"\x05_ipv6\"~\n" +
	"\x12NetworkConsumption\x123\n" +
	"\x04ipv4\x18\x01 \x01(\v2\x1f.metalstack.api.v2.NetworkUsageR\x04ipv4\x123\n" +
	"\x04ipv6\x18\x02 \x01(\v2\x1f.metalstack.api.v2.NetworkUsageR\x04ipv6\"\xa2\x01\n" +
	"\fNetworkUsage\x12#\n" +
	"\ravailable_ips\x18\x02 \x01(\x04R\favailableIps\x12\x19\n" +
	"\bused_ips\x18\x03 \x01(\x04R\ausedIps\x12-\n" +
	"\x12available_prefixes\x18\x04 \x01(\x04R\x11availablePrefixes\x12#\n" +
	"\rused_prefixes\x18\x05 \x01(\x04R\fusedPrefixes*m\n" +
	"\aNATType\x12\x18\n" +
	"\x14NAT_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\rNAT_TYPE_NONE\x10\x01\x1a\b\x82\xb2\x19\x04none\x12+\n" +
	"\x18NAT_TYPE_IPV4_MASQUERADE\x10\x02\x1a\r\x82\xb2\x19\tipv4-masq*\xad\x02\n" +
	"\vNetworkType\x12\x1c\n" +
	"\x18NETWORK_TYPE_UNSPECIFIED\x10\x00\x12'\n" +
	"\x15NETWORK_TYPE_EXTERNAL\x10\x01\x1a\f\x82\xb2\x19\bexternal\x12'\n" +
	"\x15NETWORK_TYPE_UNDERLAY\x10\x02\x1a\f\x82\xb2\x19\bunderlay\x12!\n" +
	"\x12NETWORK_TYPE_SUPER\x10\x03\x1a\t\x82\xb2\x19\x05super\x127\n" +
	"\x1dNETWORK_TYPE_SUPER_NAMESPACED\x10\x04\x1a\x14\x82\xb2\x19\x10super-namespaced\x12!\n" +
	"\x12NETWORK_TYPE_CHILD\x10\x05\x1a\t\x82\xb2\x19\x05child\x12/\n" +
	"\x19NETWORK_TYPE_CHILD_SHARED\x10\x06\x1a\x10\x82\xb2\x19\fchild-shared*\xc7\x01\n" +
	"\x14NetworkAddressFamily\x12&\n" +
	"\"NETWORK_ADDRESS_FAMILY_UNSPECIFIED\x10\x00\x12'\n" +
	"\x19NETWORK_ADDRESS_FAMILY_V4\x10\x01\x1a\b\x82\xb2\x19\x04ipv4\x12'\n" +
	"\x19NETWORK_ADDRESS_FAMILY_V6\x10\x02\x1a\b\x82\xb2\x19\x04ipv6\x125\n" +
	"!NETWORK_ADDRESS_FAMILY_DUAL_STACK\x10\x03\x1a\x0e\x82\xb2\x19\n" +
	"dual-stack2\xe1\x05\n" +
	"\x0eNetworkService\x12m\n" +
	"\x03Get\x12+.metalstack.api.v2.NetworkServiceGetRequest\x1a,.metalstack.api.v2.NetworkServiceGetResponse\"\v\xca\xf3\x18\x03\x01\x02\x03\xe0\xf3\x18\x02\x12q\n" +
	"\x06Create\x12..metalstack.api.v2.NetworkServiceCreateRequest\x1a/.metalstack.api.v2.NetworkServiceCreateResponse\"\x06\xca\xf3\x18\x02\x01\x02\x12q\n" +
	"\x06Update\x12..metalstack.api.v2.NetworkServiceUpdateRequest\x1a/.metalstack.api.v2.NetworkServiceUpdateResponse\"\x06\xca\xf3\x18\x02\x01\x02\x12p\n" +
	"\x04List\x12,.metalstack.api.v2.NetworkServiceListRequest\x1a-.metalstack.api.v2.NetworkServiceListResponse\"\v\xca\xf3\x18\x03\x01\x02\x03\xe0\xf3\x18\x02\x12\x94\x01\n" +
	"\x10ListBaseNetworks\x128.metalstack.api.v2.NetworkServiceListBaseNetworksRequest\x1a9.metalstack.api.v2.NetworkServiceListBaseNetworksResponse\"\v\xca\xf3\x18\x03\x01\x02\x03\xe0\xf3\x18\x02\x12q\n" +
	"\x06Delete\x12..metalstack.api.v2.NetworkServiceDeleteRequest\x1a/.metalstack.api.v2.NetworkServiceDeleteResponse\"\x06\xca\xf3\x18\x02\x01\x02B\xc2\x01\n" +
	"\x15com.metalstack.api.v2B\fNetworkProtoP\x01Z5github.com/metal-stack/api/go/metalstack/api/v2;apiv2\xa2\x02\x03MAX\xaa\x02\x11Metalstack.Api.V2\xca\x02\x11Metalstack\\Api\\V2\xe2\x02\x1dMetalstack\\Api\\V2\\GPBMetadata\xea\x02\x13Metalstack::Api::V2b\x06proto3"

var (
	file_metalstack_api_v2_network_proto_rawDescOnce sync.Once
	file_metalstack_api_v2_network_proto_rawDescData []byte
)

func file_metalstack_api_v2_network_proto_rawDescGZIP() []byte {
	file_metalstack_api_v2_network_proto_rawDescOnce.Do(func() {
		file_metalstack_api_v2_network_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_metalstack_api_v2_network_proto_rawDesc), len(file_metalstack_api_v2_network_proto_rawDesc)))
	})
	return file_metalstack_api_v2_network_proto_rawDescData
}

var file_metalstack_api_v2_network_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_metalstack_api_v2_network_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_metalstack_api_v2_network_proto_goTypes = []any{
	(NATType)(0),                                   // 0: metalstack.api.v2.NATType
	(NetworkType)(0),                               // 1: metalstack.api.v2.NetworkType
	(NetworkAddressFamily)(0),                      // 2: metalstack.api.v2.NetworkAddressFamily
	(*NetworkServiceGetRequest)(nil),               // 3: metalstack.api.v2.NetworkServiceGetRequest
	(*NetworkServiceGetResponse)(nil),              // 4: metalstack.api.v2.NetworkServiceGetResponse
	(*NetworkServiceCreateRequest)(nil),            // 5: metalstack.api.v2.NetworkServiceCreateRequest
	(*NetworkServiceCreateResponse)(nil),           // 6: metalstack.api.v2.NetworkServiceCreateResponse
	(*NetworkServiceUpdateRequest)(nil),            // 7: metalstack.api.v2.NetworkServiceUpdateRequest
	(*NetworkServiceUpdateResponse)(nil),           // 8: metalstack.api.v2.NetworkServiceUpdateResponse
	(*NetworkServiceListRequest)(nil),              // 9: metalstack.api.v2.NetworkServiceListRequest
	(*NetworkServiceListResponse)(nil),             // 10: metalstack.api.v2.NetworkServiceListResponse
	(*NetworkServiceListBaseNetworksRequest)(nil),  // 11: metalstack.api.v2.NetworkServiceListBaseNetworksRequest
	(*NetworkServiceListBaseNetworksResponse)(nil), // 12: metalstack.api.v2.NetworkServiceListBaseNetworksResponse
	(*NetworkServiceDeleteRequest)(nil),            // 13: metalstack.api.v2.NetworkServiceDeleteRequest
	(*NetworkServiceDeleteResponse)(nil),           // 14: metalstack.api.v2.NetworkServiceDeleteResponse
	(*Network)(nil),                                // 15: metalstack.api.v2.Network
	(*NetworkQuery)(nil),                           // 16: metalstack.api.v2.NetworkQuery
	(*ChildPrefixLength)(nil),                      // 17: metalstack.api.v2.ChildPrefixLength
	(*NetworkConsumption)(nil),                     // 18: metalstack.api.v2.NetworkConsumption
	(*NetworkUsage)(nil),                           // 19: metalstack.api.v2.NetworkUsage
	(*Labels)(nil),                                 // 20: metalstack.api.v2.Labels
	(*UpdateMeta)(nil),                             // 21: metalstack.api.v2.UpdateMeta
	(*UpdateLabels)(nil),                           // 22: metalstack.api.v2.UpdateLabels
	(*Meta)(nil),                                   // 23: metalstack.api.v2.Meta
}
var file_metalstack_api_v2_network_proto_depIdxs = []int32{
	15, // 0: metalstack.api.v2.NetworkServiceGetResponse.network:type_name -> metalstack.api.v2.Network
	20, // 1: metalstack.api.v2.NetworkServiceCreateRequest.labels:type_name -> metalstack.api.v2.Labels
	17, // 2: metalstack.api.v2.NetworkServiceCreateRequest.length:type_name -> metalstack.api.v2.ChildPrefixLength
	2,  // 3: metalstack.api.v2.NetworkServiceCreateRequest.address_family:type_name -> metalstack.api.v2.NetworkAddressFamily
	15, // 4: metalstack.api.v2.NetworkServiceCreateResponse.network:type_name -> metalstack.api.v2.Network
	21, // 5: metalstack.api.v2.NetworkServiceUpdateRequest.update_meta:type_name -> metalstack.api.v2.UpdateMeta
	22, // 6: metalstack.api.v2.NetworkServiceUpdateRequest.labels:type_name -> metalstack.api.v2.UpdateLabels
	15, // 7: metalstack.api.v2.NetworkServiceUpdateResponse.network:type_name -> metalstack.api.v2.Network
	16, // 8: metalstack.api.v2.NetworkServiceListRequest.query:type_name -> metalstack.api.v2.NetworkQuery
	15, // 9: metalstack.api.v2.NetworkServiceListResponse.networks:type_name -> metalstack.api.v2.Network
	16, // 10: metalstack.api.v2.NetworkServiceListBaseNetworksRequest.query:type_name -> metalstack.api.v2.NetworkQuery
	15, // 11: metalstack.api.v2.NetworkServiceListBaseNetworksResponse.networks:type_name -> metalstack.api.v2.Network
	15, // 12: metalstack.api.v2.NetworkServiceDeleteResponse.network:type_name -> metalstack.api.v2.Network
	23, // 13: metalstack.api.v2.Network.meta:type_name -> metalstack.api.v2.Meta
	17, // 14: metalstack.api.v2.Network.default_child_prefix_length:type_name -> metalstack.api.v2.ChildPrefixLength
	17, // 15: metalstack.api.v2.Network.min_child_prefix_length:type_name -> metalstack.api.v2.ChildPrefixLength
	1,  // 16: metalstack.api.v2.Network.type:type_name -> metalstack.api.v2.NetworkType
	0,  // 17: metalstack.api.v2.Network.nat_type:type_name -> metalstack.api.v2.NATType
	18, // 18: metalstack.api.v2.Network.consumption:type_name -> metalstack.api.v2.NetworkConsumption
	2,  // 19: metalstack.api.v2.NetworkQuery.address_family:type_name -> metalstack.api.v2.NetworkAddressFamily
	1,  // 20: metalstack.api.v2.NetworkQuery.type:type_name -> metalstack.api.v2.NetworkType
	0,  // 21: metalstack.api.v2.NetworkQuery.nat_type:type_name -> metalstack.api.v2.NATType
	20, // 22: metalstack.api.v2.NetworkQuery.labels:type_name -> metalstack.api.v2.Labels
	19, // 23: metalstack.api.v2.NetworkConsumption.ipv4:type_name -> metalstack.api.v2.NetworkUsage
	19, // 24: metalstack.api.v2.NetworkConsumption.ipv6:type_name -> metalstack.api.v2.NetworkUsage
	3,  // 25: metalstack.api.v2.NetworkService.Get:input_type -> metalstack.api.v2.NetworkServiceGetRequest
	5,  // 26: metalstack.api.v2.NetworkService.Create:input_type -> metalstack.api.v2.NetworkServiceCreateRequest
	7,  // 27: metalstack.api.v2.NetworkService.Update:input_type -> metalstack.api.v2.NetworkServiceUpdateRequest
	9,  // 28: metalstack.api.v2.NetworkService.List:input_type -> metalstack.api.v2.NetworkServiceListRequest
	11, // 29: metalstack.api.v2.NetworkService.ListBaseNetworks:input_type -> metalstack.api.v2.NetworkServiceListBaseNetworksRequest
	13, // 30: metalstack.api.v2.NetworkService.Delete:input_type -> metalstack.api.v2.NetworkServiceDeleteRequest
	4,  // 31: metalstack.api.v2.NetworkService.Get:output_type -> metalstack.api.v2.NetworkServiceGetResponse
	6,  // 32: metalstack.api.v2.NetworkService.Create:output_type -> metalstack.api.v2.NetworkServiceCreateResponse
	8,  // 33: metalstack.api.v2.NetworkService.Update:output_type -> metalstack.api.v2.NetworkServiceUpdateResponse
	10, // 34: metalstack.api.v2.NetworkService.List:output_type -> metalstack.api.v2.NetworkServiceListResponse
	12, // 35: metalstack.api.v2.NetworkService.ListBaseNetworks:output_type -> metalstack.api.v2.NetworkServiceListBaseNetworksResponse
	14, // 36: metalstack.api.v2.NetworkService.Delete:output_type -> metalstack.api.v2.NetworkServiceDeleteResponse
	31, // [31:37] is the sub-list for method output_type
	25, // [25:31] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_metalstack_api_v2_network_proto_init() }
func file_metalstack_api_v2_network_proto_init() {
	if File_metalstack_api_v2_network_proto != nil {
		return
	}
	file_metalstack_api_v2_common_proto_init()
	file_metalstack_api_v2_network_proto_msgTypes[2].OneofWrappers = []any{}
	file_metalstack_api_v2_network_proto_msgTypes[4].OneofWrappers = []any{}
	file_metalstack_api_v2_network_proto_msgTypes[12].OneofWrappers = []any{}
	file_metalstack_api_v2_network_proto_msgTypes[13].OneofWrappers = []any{}
	file_metalstack_api_v2_network_proto_msgTypes[14].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_metalstack_api_v2_network_proto_rawDesc), len(file_metalstack_api_v2_network_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_metalstack_api_v2_network_proto_goTypes,
		DependencyIndexes: file_metalstack_api_v2_network_proto_depIdxs,
		EnumInfos:         file_metalstack_api_v2_network_proto_enumTypes,
		MessageInfos:      file_metalstack_api_v2_network_proto_msgTypes,
	}.Build()
	File_metalstack_api_v2_network_proto = out.File
	file_metalstack_api_v2_network_proto_goTypes = nil
	file_metalstack_api_v2_network_proto_depIdxs = nil
}
