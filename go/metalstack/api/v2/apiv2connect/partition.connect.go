// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: metalstack/api/v2/partition.proto

package apiv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/metal-stack/api/go/metalstack/api/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PartitionServiceName is the fully-qualified name of the PartitionService service.
	PartitionServiceName = "metalstack.api.v2.PartitionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PartitionServiceGetProcedure is the fully-qualified name of the PartitionService's Get RPC.
	PartitionServiceGetProcedure = "/metalstack.api.v2.PartitionService/Get"
	// PartitionServiceListProcedure is the fully-qualified name of the PartitionService's List RPC.
	PartitionServiceListProcedure = "/metalstack.api.v2.PartitionService/List"
)

// PartitionServiceClient is a client for the metalstack.api.v2.PartitionService service.
type PartitionServiceClient interface {
	// Get a partition
	Get(context.Context, *connect.Request[v2.PartitionServiceGetRequest]) (*connect.Response[v2.PartitionServiceGetResponse], error)
	// List all partitions
	List(context.Context, *connect.Request[v2.PartitionServiceListRequest]) (*connect.Response[v2.PartitionServiceListResponse], error)
}

// NewPartitionServiceClient constructs a client for the metalstack.api.v2.PartitionService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPartitionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PartitionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	partitionServiceMethods := v2.File_metalstack_api_v2_partition_proto.Services().ByName("PartitionService").Methods()
	return &partitionServiceClient{
		get: connect.NewClient[v2.PartitionServiceGetRequest, v2.PartitionServiceGetResponse](
			httpClient,
			baseURL+PartitionServiceGetProcedure,
			connect.WithSchema(partitionServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v2.PartitionServiceListRequest, v2.PartitionServiceListResponse](
			httpClient,
			baseURL+PartitionServiceListProcedure,
			connect.WithSchema(partitionServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
	}
}

// partitionServiceClient implements PartitionServiceClient.
type partitionServiceClient struct {
	get  *connect.Client[v2.PartitionServiceGetRequest, v2.PartitionServiceGetResponse]
	list *connect.Client[v2.PartitionServiceListRequest, v2.PartitionServiceListResponse]
}

// Get calls metalstack.api.v2.PartitionService.Get.
func (c *partitionServiceClient) Get(ctx context.Context, req *connect.Request[v2.PartitionServiceGetRequest]) (*connect.Response[v2.PartitionServiceGetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls metalstack.api.v2.PartitionService.List.
func (c *partitionServiceClient) List(ctx context.Context, req *connect.Request[v2.PartitionServiceListRequest]) (*connect.Response[v2.PartitionServiceListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// PartitionServiceHandler is an implementation of the metalstack.api.v2.PartitionService service.
type PartitionServiceHandler interface {
	// Get a partition
	Get(context.Context, *connect.Request[v2.PartitionServiceGetRequest]) (*connect.Response[v2.PartitionServiceGetResponse], error)
	// List all partitions
	List(context.Context, *connect.Request[v2.PartitionServiceListRequest]) (*connect.Response[v2.PartitionServiceListResponse], error)
}

// NewPartitionServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPartitionServiceHandler(svc PartitionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	partitionServiceMethods := v2.File_metalstack_api_v2_partition_proto.Services().ByName("PartitionService").Methods()
	partitionServiceGetHandler := connect.NewUnaryHandler(
		PartitionServiceGetProcedure,
		svc.Get,
		connect.WithSchema(partitionServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	partitionServiceListHandler := connect.NewUnaryHandler(
		PartitionServiceListProcedure,
		svc.List,
		connect.WithSchema(partitionServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	return "/metalstack.api.v2.PartitionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PartitionServiceGetProcedure:
			partitionServiceGetHandler.ServeHTTP(w, r)
		case PartitionServiceListProcedure:
			partitionServiceListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPartitionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPartitionServiceHandler struct{}

func (UnimplementedPartitionServiceHandler) Get(context.Context, *connect.Request[v2.PartitionServiceGetRequest]) (*connect.Response[v2.PartitionServiceGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.PartitionService.Get is not implemented"))
}

func (UnimplementedPartitionServiceHandler) List(context.Context, *connect.Request[v2.PartitionServiceListRequest]) (*connect.Response[v2.PartitionServiceListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.PartitionService.List is not implemented"))
}
