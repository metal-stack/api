// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: metalstack/api/v2/size.proto

package apiv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/metal-stack/api/go/metalstack/api/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SizeServiceName is the fully-qualified name of the SizeService service.
	SizeServiceName = "metalstack.api.v2.SizeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SizeServiceGetProcedure is the fully-qualified name of the SizeService's Get RPC.
	SizeServiceGetProcedure = "/metalstack.api.v2.SizeService/Get"
	// SizeServiceListProcedure is the fully-qualified name of the SizeService's List RPC.
	SizeServiceListProcedure = "/metalstack.api.v2.SizeService/List"
)

// SizeServiceClient is a client for the metalstack.api.v2.SizeService service.
type SizeServiceClient interface {
	// Get a size
	Get(context.Context, *v2.SizeServiceGetRequest) (*v2.SizeServiceGetResponse, error)
	// List all sizes
	List(context.Context, *v2.SizeServiceListRequest) (*v2.SizeServiceListResponse, error)
}

// NewSizeServiceClient constructs a client for the metalstack.api.v2.SizeService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSizeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SizeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	sizeServiceMethods := v2.File_metalstack_api_v2_size_proto.Services().ByName("SizeService").Methods()
	return &sizeServiceClient{
		get: connect.NewClient[v2.SizeServiceGetRequest, v2.SizeServiceGetResponse](
			httpClient,
			baseURL+SizeServiceGetProcedure,
			connect.WithSchema(sizeServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v2.SizeServiceListRequest, v2.SizeServiceListResponse](
			httpClient,
			baseURL+SizeServiceListProcedure,
			connect.WithSchema(sizeServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
	}
}

// sizeServiceClient implements SizeServiceClient.
type sizeServiceClient struct {
	get  *connect.Client[v2.SizeServiceGetRequest, v2.SizeServiceGetResponse]
	list *connect.Client[v2.SizeServiceListRequest, v2.SizeServiceListResponse]
}

// Get calls metalstack.api.v2.SizeService.Get.
func (c *sizeServiceClient) Get(ctx context.Context, req *v2.SizeServiceGetRequest) (*v2.SizeServiceGetResponse, error) {
	response, err := c.get.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// List calls metalstack.api.v2.SizeService.List.
func (c *sizeServiceClient) List(ctx context.Context, req *v2.SizeServiceListRequest) (*v2.SizeServiceListResponse, error) {
	response, err := c.list.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// SizeServiceHandler is an implementation of the metalstack.api.v2.SizeService service.
type SizeServiceHandler interface {
	// Get a size
	Get(context.Context, *v2.SizeServiceGetRequest) (*v2.SizeServiceGetResponse, error)
	// List all sizes
	List(context.Context, *v2.SizeServiceListRequest) (*v2.SizeServiceListResponse, error)
}

// NewSizeServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSizeServiceHandler(svc SizeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sizeServiceMethods := v2.File_metalstack_api_v2_size_proto.Services().ByName("SizeService").Methods()
	sizeServiceGetHandler := connect.NewUnaryHandlerSimple(
		SizeServiceGetProcedure,
		svc.Get,
		connect.WithSchema(sizeServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	sizeServiceListHandler := connect.NewUnaryHandlerSimple(
		SizeServiceListProcedure,
		svc.List,
		connect.WithSchema(sizeServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	return "/metalstack.api.v2.SizeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SizeServiceGetProcedure:
			sizeServiceGetHandler.ServeHTTP(w, r)
		case SizeServiceListProcedure:
			sizeServiceListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSizeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSizeServiceHandler struct{}

func (UnimplementedSizeServiceHandler) Get(context.Context, *v2.SizeServiceGetRequest) (*v2.SizeServiceGetResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.SizeService.Get is not implemented"))
}

func (UnimplementedSizeServiceHandler) List(context.Context, *v2.SizeServiceListRequest) (*v2.SizeServiceListResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.SizeService.List is not implemented"))
}
