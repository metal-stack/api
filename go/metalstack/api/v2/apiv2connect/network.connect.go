// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: metalstack/api/v2/network.proto

package apiv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/metal-stack/api/go/metalstack/api/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NetworkServiceName is the fully-qualified name of the NetworkService service.
	NetworkServiceName = "metalstack.api.v2.NetworkService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NetworkServiceGetProcedure is the fully-qualified name of the NetworkService's Get RPC.
	NetworkServiceGetProcedure = "/metalstack.api.v2.NetworkService/Get"
	// NetworkServiceCreateProcedure is the fully-qualified name of the NetworkService's Create RPC.
	NetworkServiceCreateProcedure = "/metalstack.api.v2.NetworkService/Create"
	// NetworkServiceUpdateProcedure is the fully-qualified name of the NetworkService's Update RPC.
	NetworkServiceUpdateProcedure = "/metalstack.api.v2.NetworkService/Update"
	// NetworkServiceListProcedure is the fully-qualified name of the NetworkService's List RPC.
	NetworkServiceListProcedure = "/metalstack.api.v2.NetworkService/List"
	// NetworkServiceListBaseNetworksProcedure is the fully-qualified name of the NetworkService's
	// ListBaseNetworks RPC.
	NetworkServiceListBaseNetworksProcedure = "/metalstack.api.v2.NetworkService/ListBaseNetworks"
	// NetworkServiceDeleteProcedure is the fully-qualified name of the NetworkService's Delete RPC.
	NetworkServiceDeleteProcedure = "/metalstack.api.v2.NetworkService/Delete"
)

// NetworkServiceClient is a client for the metalstack.api.v2.NetworkService service.
type NetworkServiceClient interface {
	// Get a network
	Get(context.Context, *connect.Request[v2.NetworkServiceGetRequest]) (*connect.Response[v2.NetworkServiceGetResponse], error)
	// Create a child network from a super network.
	Create(context.Context, *connect.Request[v2.NetworkServiceCreateRequest]) (*connect.Response[v2.NetworkServiceCreateResponse], error)
	// Update a network
	Update(context.Context, *connect.Request[v2.NetworkServiceUpdateRequest]) (*connect.Response[v2.NetworkServiceUpdateResponse], error)
	// List all project networks
	List(context.Context, *connect.Request[v2.NetworkServiceListRequest]) (*connect.Response[v2.NetworkServiceListResponse], error)
	// ListBaseNetworks all unscoped networks
	ListBaseNetworks(context.Context, *connect.Request[v2.NetworkServiceListBaseNetworksRequest]) (*connect.Response[v2.NetworkServiceListBaseNetworksResponse], error)
	// Delete a network
	Delete(context.Context, *connect.Request[v2.NetworkServiceDeleteRequest]) (*connect.Response[v2.NetworkServiceDeleteResponse], error)
}

// NewNetworkServiceClient constructs a client for the metalstack.api.v2.NetworkService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNetworkServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NetworkServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	networkServiceMethods := v2.File_metalstack_api_v2_network_proto.Services().ByName("NetworkService").Methods()
	return &networkServiceClient{
		get: connect.NewClient[v2.NetworkServiceGetRequest, v2.NetworkServiceGetResponse](
			httpClient,
			baseURL+NetworkServiceGetProcedure,
			connect.WithSchema(networkServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		create: connect.NewClient[v2.NetworkServiceCreateRequest, v2.NetworkServiceCreateResponse](
			httpClient,
			baseURL+NetworkServiceCreateProcedure,
			connect.WithSchema(networkServiceMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v2.NetworkServiceUpdateRequest, v2.NetworkServiceUpdateResponse](
			httpClient,
			baseURL+NetworkServiceUpdateProcedure,
			connect.WithSchema(networkServiceMethods.ByName("Update")),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v2.NetworkServiceListRequest, v2.NetworkServiceListResponse](
			httpClient,
			baseURL+NetworkServiceListProcedure,
			connect.WithSchema(networkServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
		listBaseNetworks: connect.NewClient[v2.NetworkServiceListBaseNetworksRequest, v2.NetworkServiceListBaseNetworksResponse](
			httpClient,
			baseURL+NetworkServiceListBaseNetworksProcedure,
			connect.WithSchema(networkServiceMethods.ByName("ListBaseNetworks")),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v2.NetworkServiceDeleteRequest, v2.NetworkServiceDeleteResponse](
			httpClient,
			baseURL+NetworkServiceDeleteProcedure,
			connect.WithSchema(networkServiceMethods.ByName("Delete")),
			connect.WithClientOptions(opts...),
		),
	}
}

// networkServiceClient implements NetworkServiceClient.
type networkServiceClient struct {
	get              *connect.Client[v2.NetworkServiceGetRequest, v2.NetworkServiceGetResponse]
	create           *connect.Client[v2.NetworkServiceCreateRequest, v2.NetworkServiceCreateResponse]
	update           *connect.Client[v2.NetworkServiceUpdateRequest, v2.NetworkServiceUpdateResponse]
	list             *connect.Client[v2.NetworkServiceListRequest, v2.NetworkServiceListResponse]
	listBaseNetworks *connect.Client[v2.NetworkServiceListBaseNetworksRequest, v2.NetworkServiceListBaseNetworksResponse]
	delete           *connect.Client[v2.NetworkServiceDeleteRequest, v2.NetworkServiceDeleteResponse]
}

// Get calls metalstack.api.v2.NetworkService.Get.
func (c *networkServiceClient) Get(ctx context.Context, req *connect.Request[v2.NetworkServiceGetRequest]) (*connect.Response[v2.NetworkServiceGetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Create calls metalstack.api.v2.NetworkService.Create.
func (c *networkServiceClient) Create(ctx context.Context, req *connect.Request[v2.NetworkServiceCreateRequest]) (*connect.Response[v2.NetworkServiceCreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls metalstack.api.v2.NetworkService.Update.
func (c *networkServiceClient) Update(ctx context.Context, req *connect.Request[v2.NetworkServiceUpdateRequest]) (*connect.Response[v2.NetworkServiceUpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// List calls metalstack.api.v2.NetworkService.List.
func (c *networkServiceClient) List(ctx context.Context, req *connect.Request[v2.NetworkServiceListRequest]) (*connect.Response[v2.NetworkServiceListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// ListBaseNetworks calls metalstack.api.v2.NetworkService.ListBaseNetworks.
func (c *networkServiceClient) ListBaseNetworks(ctx context.Context, req *connect.Request[v2.NetworkServiceListBaseNetworksRequest]) (*connect.Response[v2.NetworkServiceListBaseNetworksResponse], error) {
	return c.listBaseNetworks.CallUnary(ctx, req)
}

// Delete calls metalstack.api.v2.NetworkService.Delete.
func (c *networkServiceClient) Delete(ctx context.Context, req *connect.Request[v2.NetworkServiceDeleteRequest]) (*connect.Response[v2.NetworkServiceDeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// NetworkServiceHandler is an implementation of the metalstack.api.v2.NetworkService service.
type NetworkServiceHandler interface {
	// Get a network
	Get(context.Context, *connect.Request[v2.NetworkServiceGetRequest]) (*connect.Response[v2.NetworkServiceGetResponse], error)
	// Create a child network from a super network.
	Create(context.Context, *connect.Request[v2.NetworkServiceCreateRequest]) (*connect.Response[v2.NetworkServiceCreateResponse], error)
	// Update a network
	Update(context.Context, *connect.Request[v2.NetworkServiceUpdateRequest]) (*connect.Response[v2.NetworkServiceUpdateResponse], error)
	// List all project networks
	List(context.Context, *connect.Request[v2.NetworkServiceListRequest]) (*connect.Response[v2.NetworkServiceListResponse], error)
	// ListBaseNetworks all unscoped networks
	ListBaseNetworks(context.Context, *connect.Request[v2.NetworkServiceListBaseNetworksRequest]) (*connect.Response[v2.NetworkServiceListBaseNetworksResponse], error)
	// Delete a network
	Delete(context.Context, *connect.Request[v2.NetworkServiceDeleteRequest]) (*connect.Response[v2.NetworkServiceDeleteResponse], error)
}

// NewNetworkServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNetworkServiceHandler(svc NetworkServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	networkServiceMethods := v2.File_metalstack_api_v2_network_proto.Services().ByName("NetworkService").Methods()
	networkServiceGetHandler := connect.NewUnaryHandler(
		NetworkServiceGetProcedure,
		svc.Get,
		connect.WithSchema(networkServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceCreateHandler := connect.NewUnaryHandler(
		NetworkServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(networkServiceMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceUpdateHandler := connect.NewUnaryHandler(
		NetworkServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(networkServiceMethods.ByName("Update")),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceListHandler := connect.NewUnaryHandler(
		NetworkServiceListProcedure,
		svc.List,
		connect.WithSchema(networkServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceListBaseNetworksHandler := connect.NewUnaryHandler(
		NetworkServiceListBaseNetworksProcedure,
		svc.ListBaseNetworks,
		connect.WithSchema(networkServiceMethods.ByName("ListBaseNetworks")),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceDeleteHandler := connect.NewUnaryHandler(
		NetworkServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(networkServiceMethods.ByName("Delete")),
		connect.WithHandlerOptions(opts...),
	)
	return "/metalstack.api.v2.NetworkService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NetworkServiceGetProcedure:
			networkServiceGetHandler.ServeHTTP(w, r)
		case NetworkServiceCreateProcedure:
			networkServiceCreateHandler.ServeHTTP(w, r)
		case NetworkServiceUpdateProcedure:
			networkServiceUpdateHandler.ServeHTTP(w, r)
		case NetworkServiceListProcedure:
			networkServiceListHandler.ServeHTTP(w, r)
		case NetworkServiceListBaseNetworksProcedure:
			networkServiceListBaseNetworksHandler.ServeHTTP(w, r)
		case NetworkServiceDeleteProcedure:
			networkServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNetworkServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNetworkServiceHandler struct{}

func (UnimplementedNetworkServiceHandler) Get(context.Context, *connect.Request[v2.NetworkServiceGetRequest]) (*connect.Response[v2.NetworkServiceGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.NetworkService.Get is not implemented"))
}

func (UnimplementedNetworkServiceHandler) Create(context.Context, *connect.Request[v2.NetworkServiceCreateRequest]) (*connect.Response[v2.NetworkServiceCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.NetworkService.Create is not implemented"))
}

func (UnimplementedNetworkServiceHandler) Update(context.Context, *connect.Request[v2.NetworkServiceUpdateRequest]) (*connect.Response[v2.NetworkServiceUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.NetworkService.Update is not implemented"))
}

func (UnimplementedNetworkServiceHandler) List(context.Context, *connect.Request[v2.NetworkServiceListRequest]) (*connect.Response[v2.NetworkServiceListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.NetworkService.List is not implemented"))
}

func (UnimplementedNetworkServiceHandler) ListBaseNetworks(context.Context, *connect.Request[v2.NetworkServiceListBaseNetworksRequest]) (*connect.Response[v2.NetworkServiceListBaseNetworksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.NetworkService.ListBaseNetworks is not implemented"))
}

func (UnimplementedNetworkServiceHandler) Delete(context.Context, *connect.Request[v2.NetworkServiceDeleteRequest]) (*connect.Response[v2.NetworkServiceDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.NetworkService.Delete is not implemented"))
}
