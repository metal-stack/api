// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: metalstack/api/v2/health.proto

package apiv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/metal-stack/api/go/metalstack/api/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HealthServiceName is the fully-qualified name of the HealthService service.
	HealthServiceName = "metalstack.api.v2.HealthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HealthServiceGetProcedure is the fully-qualified name of the HealthService's Get RPC.
	HealthServiceGetProcedure = "/metalstack.api.v2.HealthService/Get"
)

// HealthServiceClient is a client for the metalstack.api.v2.HealthService service.
type HealthServiceClient interface {
	// Get the health of the platform
	Get(context.Context, *connect.Request[v2.HealthServiceGetRequest]) (*connect.Response[v2.HealthServiceGetResponse], error)
}

// NewHealthServiceClient constructs a client for the metalstack.api.v2.HealthService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHealthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HealthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	healthServiceMethods := v2.File_metalstack_api_v2_health_proto.Services().ByName("HealthService").Methods()
	return &healthServiceClient{
		get: connect.NewClient[v2.HealthServiceGetRequest, v2.HealthServiceGetResponse](
			httpClient,
			baseURL+HealthServiceGetProcedure,
			connect.WithSchema(healthServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
	}
}

// healthServiceClient implements HealthServiceClient.
type healthServiceClient struct {
	get *connect.Client[v2.HealthServiceGetRequest, v2.HealthServiceGetResponse]
}

// Get calls metalstack.api.v2.HealthService.Get.
func (c *healthServiceClient) Get(ctx context.Context, req *connect.Request[v2.HealthServiceGetRequest]) (*connect.Response[v2.HealthServiceGetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// HealthServiceHandler is an implementation of the metalstack.api.v2.HealthService service.
type HealthServiceHandler interface {
	// Get the health of the platform
	Get(context.Context, *connect.Request[v2.HealthServiceGetRequest]) (*connect.Response[v2.HealthServiceGetResponse], error)
}

// NewHealthServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHealthServiceHandler(svc HealthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	healthServiceMethods := v2.File_metalstack_api_v2_health_proto.Services().ByName("HealthService").Methods()
	healthServiceGetHandler := connect.NewUnaryHandler(
		HealthServiceGetProcedure,
		svc.Get,
		connect.WithSchema(healthServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	return "/metalstack.api.v2.HealthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HealthServiceGetProcedure:
			healthServiceGetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHealthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHealthServiceHandler struct{}

func (UnimplementedHealthServiceHandler) Get(context.Context, *connect.Request[v2.HealthServiceGetRequest]) (*connect.Response[v2.HealthServiceGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.HealthService.Get is not implemented"))
}
