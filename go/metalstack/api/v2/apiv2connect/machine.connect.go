// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: metalstack/api/v2/machine.proto

package apiv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/metal-stack/api/go/metalstack/api/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MachineServiceName is the fully-qualified name of the MachineService service.
	MachineServiceName = "metalstack.api.v2.MachineService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MachineServiceGetProcedure is the fully-qualified name of the MachineService's Get RPC.
	MachineServiceGetProcedure = "/metalstack.api.v2.MachineService/Get"
	// MachineServiceCreateProcedure is the fully-qualified name of the MachineService's Create RPC.
	MachineServiceCreateProcedure = "/metalstack.api.v2.MachineService/Create"
	// MachineServiceUpdateProcedure is the fully-qualified name of the MachineService's Update RPC.
	MachineServiceUpdateProcedure = "/metalstack.api.v2.MachineService/Update"
	// MachineServiceListProcedure is the fully-qualified name of the MachineService's List RPC.
	MachineServiceListProcedure = "/metalstack.api.v2.MachineService/List"
	// MachineServiceDeleteProcedure is the fully-qualified name of the MachineService's Delete RPC.
	MachineServiceDeleteProcedure = "/metalstack.api.v2.MachineService/Delete"
)

// MachineServiceClient is a client for the metalstack.api.v2.MachineService service.
type MachineServiceClient interface {
	// Get a machine
	Get(context.Context, *v2.MachineServiceGetRequest) (*v2.MachineServiceGetResponse, error)
	// Create a machine
	Create(context.Context, *v2.MachineServiceCreateRequest) (*v2.MachineServiceCreateResponse, error)
	// Update a machine
	Update(context.Context, *v2.MachineServiceUpdateRequest) (*v2.MachineServiceUpdateResponse, error)
	// List all machines
	List(context.Context, *v2.MachineServiceListRequest) (*v2.MachineServiceListResponse, error)
	// Delete a machine
	Delete(context.Context, *v2.MachineServiceDeleteRequest) (*v2.MachineServiceDeleteResponse, error)
}

// NewMachineServiceClient constructs a client for the metalstack.api.v2.MachineService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMachineServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MachineServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	machineServiceMethods := v2.File_metalstack_api_v2_machine_proto.Services().ByName("MachineService").Methods()
	return &machineServiceClient{
		get: connect.NewClient[v2.MachineServiceGetRequest, v2.MachineServiceGetResponse](
			httpClient,
			baseURL+MachineServiceGetProcedure,
			connect.WithSchema(machineServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		create: connect.NewClient[v2.MachineServiceCreateRequest, v2.MachineServiceCreateResponse](
			httpClient,
			baseURL+MachineServiceCreateProcedure,
			connect.WithSchema(machineServiceMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v2.MachineServiceUpdateRequest, v2.MachineServiceUpdateResponse](
			httpClient,
			baseURL+MachineServiceUpdateProcedure,
			connect.WithSchema(machineServiceMethods.ByName("Update")),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v2.MachineServiceListRequest, v2.MachineServiceListResponse](
			httpClient,
			baseURL+MachineServiceListProcedure,
			connect.WithSchema(machineServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v2.MachineServiceDeleteRequest, v2.MachineServiceDeleteResponse](
			httpClient,
			baseURL+MachineServiceDeleteProcedure,
			connect.WithSchema(machineServiceMethods.ByName("Delete")),
			connect.WithClientOptions(opts...),
		),
	}
}

// machineServiceClient implements MachineServiceClient.
type machineServiceClient struct {
	get    *connect.Client[v2.MachineServiceGetRequest, v2.MachineServiceGetResponse]
	create *connect.Client[v2.MachineServiceCreateRequest, v2.MachineServiceCreateResponse]
	update *connect.Client[v2.MachineServiceUpdateRequest, v2.MachineServiceUpdateResponse]
	list   *connect.Client[v2.MachineServiceListRequest, v2.MachineServiceListResponse]
	delete *connect.Client[v2.MachineServiceDeleteRequest, v2.MachineServiceDeleteResponse]
}

// Get calls metalstack.api.v2.MachineService.Get.
func (c *machineServiceClient) Get(ctx context.Context, req *v2.MachineServiceGetRequest) (*v2.MachineServiceGetResponse, error) {
	response, err := c.get.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// Create calls metalstack.api.v2.MachineService.Create.
func (c *machineServiceClient) Create(ctx context.Context, req *v2.MachineServiceCreateRequest) (*v2.MachineServiceCreateResponse, error) {
	response, err := c.create.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// Update calls metalstack.api.v2.MachineService.Update.
func (c *machineServiceClient) Update(ctx context.Context, req *v2.MachineServiceUpdateRequest) (*v2.MachineServiceUpdateResponse, error) {
	response, err := c.update.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// List calls metalstack.api.v2.MachineService.List.
func (c *machineServiceClient) List(ctx context.Context, req *v2.MachineServiceListRequest) (*v2.MachineServiceListResponse, error) {
	response, err := c.list.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// Delete calls metalstack.api.v2.MachineService.Delete.
func (c *machineServiceClient) Delete(ctx context.Context, req *v2.MachineServiceDeleteRequest) (*v2.MachineServiceDeleteResponse, error) {
	response, err := c.delete.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// MachineServiceHandler is an implementation of the metalstack.api.v2.MachineService service.
type MachineServiceHandler interface {
	// Get a machine
	Get(context.Context, *v2.MachineServiceGetRequest) (*v2.MachineServiceGetResponse, error)
	// Create a machine
	Create(context.Context, *v2.MachineServiceCreateRequest) (*v2.MachineServiceCreateResponse, error)
	// Update a machine
	Update(context.Context, *v2.MachineServiceUpdateRequest) (*v2.MachineServiceUpdateResponse, error)
	// List all machines
	List(context.Context, *v2.MachineServiceListRequest) (*v2.MachineServiceListResponse, error)
	// Delete a machine
	Delete(context.Context, *v2.MachineServiceDeleteRequest) (*v2.MachineServiceDeleteResponse, error)
}

// NewMachineServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMachineServiceHandler(svc MachineServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	machineServiceMethods := v2.File_metalstack_api_v2_machine_proto.Services().ByName("MachineService").Methods()
	machineServiceGetHandler := connect.NewUnaryHandlerSimple(
		MachineServiceGetProcedure,
		svc.Get,
		connect.WithSchema(machineServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceCreateHandler := connect.NewUnaryHandlerSimple(
		MachineServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(machineServiceMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceUpdateHandler := connect.NewUnaryHandlerSimple(
		MachineServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(machineServiceMethods.ByName("Update")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceListHandler := connect.NewUnaryHandlerSimple(
		MachineServiceListProcedure,
		svc.List,
		connect.WithSchema(machineServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceDeleteHandler := connect.NewUnaryHandlerSimple(
		MachineServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(machineServiceMethods.ByName("Delete")),
		connect.WithHandlerOptions(opts...),
	)
	return "/metalstack.api.v2.MachineService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MachineServiceGetProcedure:
			machineServiceGetHandler.ServeHTTP(w, r)
		case MachineServiceCreateProcedure:
			machineServiceCreateHandler.ServeHTTP(w, r)
		case MachineServiceUpdateProcedure:
			machineServiceUpdateHandler.ServeHTTP(w, r)
		case MachineServiceListProcedure:
			machineServiceListHandler.ServeHTTP(w, r)
		case MachineServiceDeleteProcedure:
			machineServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMachineServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMachineServiceHandler struct{}

func (UnimplementedMachineServiceHandler) Get(context.Context, *v2.MachineServiceGetRequest) (*v2.MachineServiceGetResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.MachineService.Get is not implemented"))
}

func (UnimplementedMachineServiceHandler) Create(context.Context, *v2.MachineServiceCreateRequest) (*v2.MachineServiceCreateResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.MachineService.Create is not implemented"))
}

func (UnimplementedMachineServiceHandler) Update(context.Context, *v2.MachineServiceUpdateRequest) (*v2.MachineServiceUpdateResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.MachineService.Update is not implemented"))
}

func (UnimplementedMachineServiceHandler) List(context.Context, *v2.MachineServiceListRequest) (*v2.MachineServiceListResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.MachineService.List is not implemented"))
}

func (UnimplementedMachineServiceHandler) Delete(context.Context, *v2.MachineServiceDeleteRequest) (*v2.MachineServiceDeleteResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.MachineService.Delete is not implemented"))
}
