// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: metalstack/api/v2/tenant.proto

package apiv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/metal-stack/api/go/metalstack/api/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TenantServiceName is the fully-qualified name of the TenantService service.
	TenantServiceName = "metalstack.api.v2.TenantService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TenantServiceCreateProcedure is the fully-qualified name of the TenantService's Create RPC.
	TenantServiceCreateProcedure = "/metalstack.api.v2.TenantService/Create"
	// TenantServiceListProcedure is the fully-qualified name of the TenantService's List RPC.
	TenantServiceListProcedure = "/metalstack.api.v2.TenantService/List"
	// TenantServiceGetProcedure is the fully-qualified name of the TenantService's Get RPC.
	TenantServiceGetProcedure = "/metalstack.api.v2.TenantService/Get"
	// TenantServiceUpdateProcedure is the fully-qualified name of the TenantService's Update RPC.
	TenantServiceUpdateProcedure = "/metalstack.api.v2.TenantService/Update"
	// TenantServiceDeleteProcedure is the fully-qualified name of the TenantService's Delete RPC.
	TenantServiceDeleteProcedure = "/metalstack.api.v2.TenantService/Delete"
	// TenantServiceRemoveMemberProcedure is the fully-qualified name of the TenantService's
	// RemoveMember RPC.
	TenantServiceRemoveMemberProcedure = "/metalstack.api.v2.TenantService/RemoveMember"
	// TenantServiceUpdateMemberProcedure is the fully-qualified name of the TenantService's
	// UpdateMember RPC.
	TenantServiceUpdateMemberProcedure = "/metalstack.api.v2.TenantService/UpdateMember"
	// TenantServiceInviteProcedure is the fully-qualified name of the TenantService's Invite RPC.
	TenantServiceInviteProcedure = "/metalstack.api.v2.TenantService/Invite"
	// TenantServiceInviteAcceptProcedure is the fully-qualified name of the TenantService's
	// InviteAccept RPC.
	TenantServiceInviteAcceptProcedure = "/metalstack.api.v2.TenantService/InviteAccept"
	// TenantServiceInviteDeleteProcedure is the fully-qualified name of the TenantService's
	// InviteDelete RPC.
	TenantServiceInviteDeleteProcedure = "/metalstack.api.v2.TenantService/InviteDelete"
	// TenantServiceInvitesListProcedure is the fully-qualified name of the TenantService's InvitesList
	// RPC.
	TenantServiceInvitesListProcedure = "/metalstack.api.v2.TenantService/InvitesList"
	// TenantServiceInviteGetProcedure is the fully-qualified name of the TenantService's InviteGet RPC.
	TenantServiceInviteGetProcedure = "/metalstack.api.v2.TenantService/InviteGet"
)

// TenantServiceClient is a client for the metalstack.api.v2.TenantService service.
type TenantServiceClient interface {
	// Create a tenant
	Create(context.Context, *connect.Request[v2.TenantServiceCreateRequest]) (*connect.Response[v2.TenantServiceCreateResponse], error)
	// List tenants
	List(context.Context, *connect.Request[v2.TenantServiceListRequest]) (*connect.Response[v2.TenantServiceListResponse], error)
	// Get a tenant
	Get(context.Context, *connect.Request[v2.TenantServiceGetRequest]) (*connect.Response[v2.TenantServiceGetResponse], error)
	// Update a tenant
	Update(context.Context, *connect.Request[v2.TenantServiceUpdateRequest]) (*connect.Response[v2.TenantServiceUpdateResponse], error)
	// Delete a tenant
	Delete(context.Context, *connect.Request[v2.TenantServiceDeleteRequest]) (*connect.Response[v2.TenantServiceDeleteResponse], error)
	// RemoveMember remove a member of a tenant
	RemoveMember(context.Context, *connect.Request[v2.TenantServiceRemoveMemberRequest]) (*connect.Response[v2.TenantServiceRemoveMemberResponse], error)
	// UpdateMember update a member of a tenant
	UpdateMember(context.Context, *connect.Request[v2.TenantServiceUpdateMemberRequest]) (*connect.Response[v2.TenantServiceUpdateMemberResponse], error)
	// Invite a user to a tenant
	Invite(context.Context, *connect.Request[v2.TenantServiceInviteRequest]) (*connect.Response[v2.TenantServiceInviteResponse], error)
	// InviteAccept is called from a user to accept an invitation
	InviteAccept(context.Context, *connect.Request[v2.TenantServiceInviteAcceptRequest]) (*connect.Response[v2.TenantServiceInviteAcceptResponse], error)
	// InviteDelete deletes a pending invitation
	InviteDelete(context.Context, *connect.Request[v2.TenantServiceInviteDeleteRequest]) (*connect.Response[v2.TenantServiceInviteDeleteResponse], error)
	// InvitesList list all invites to a tenant
	InvitesList(context.Context, *connect.Request[v2.TenantServiceInvitesListRequest]) (*connect.Response[v2.TenantServiceInvitesListResponse], error)
	// InviteGet get an invite
	InviteGet(context.Context, *connect.Request[v2.TenantServiceInviteGetRequest]) (*connect.Response[v2.TenantServiceInviteGetResponse], error)
}

// NewTenantServiceClient constructs a client for the metalstack.api.v2.TenantService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTenantServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TenantServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tenantServiceMethods := v2.File_metalstack_api_v2_tenant_proto.Services().ByName("TenantService").Methods()
	return &tenantServiceClient{
		create: connect.NewClient[v2.TenantServiceCreateRequest, v2.TenantServiceCreateResponse](
			httpClient,
			baseURL+TenantServiceCreateProcedure,
			connect.WithSchema(tenantServiceMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v2.TenantServiceListRequest, v2.TenantServiceListResponse](
			httpClient,
			baseURL+TenantServiceListProcedure,
			connect.WithSchema(tenantServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v2.TenantServiceGetRequest, v2.TenantServiceGetResponse](
			httpClient,
			baseURL+TenantServiceGetProcedure,
			connect.WithSchema(tenantServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v2.TenantServiceUpdateRequest, v2.TenantServiceUpdateResponse](
			httpClient,
			baseURL+TenantServiceUpdateProcedure,
			connect.WithSchema(tenantServiceMethods.ByName("Update")),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v2.TenantServiceDeleteRequest, v2.TenantServiceDeleteResponse](
			httpClient,
			baseURL+TenantServiceDeleteProcedure,
			connect.WithSchema(tenantServiceMethods.ByName("Delete")),
			connect.WithClientOptions(opts...),
		),
		removeMember: connect.NewClient[v2.TenantServiceRemoveMemberRequest, v2.TenantServiceRemoveMemberResponse](
			httpClient,
			baseURL+TenantServiceRemoveMemberProcedure,
			connect.WithSchema(tenantServiceMethods.ByName("RemoveMember")),
			connect.WithClientOptions(opts...),
		),
		updateMember: connect.NewClient[v2.TenantServiceUpdateMemberRequest, v2.TenantServiceUpdateMemberResponse](
			httpClient,
			baseURL+TenantServiceUpdateMemberProcedure,
			connect.WithSchema(tenantServiceMethods.ByName("UpdateMember")),
			connect.WithClientOptions(opts...),
		),
		invite: connect.NewClient[v2.TenantServiceInviteRequest, v2.TenantServiceInviteResponse](
			httpClient,
			baseURL+TenantServiceInviteProcedure,
			connect.WithSchema(tenantServiceMethods.ByName("Invite")),
			connect.WithClientOptions(opts...),
		),
		inviteAccept: connect.NewClient[v2.TenantServiceInviteAcceptRequest, v2.TenantServiceInviteAcceptResponse](
			httpClient,
			baseURL+TenantServiceInviteAcceptProcedure,
			connect.WithSchema(tenantServiceMethods.ByName("InviteAccept")),
			connect.WithClientOptions(opts...),
		),
		inviteDelete: connect.NewClient[v2.TenantServiceInviteDeleteRequest, v2.TenantServiceInviteDeleteResponse](
			httpClient,
			baseURL+TenantServiceInviteDeleteProcedure,
			connect.WithSchema(tenantServiceMethods.ByName("InviteDelete")),
			connect.WithClientOptions(opts...),
		),
		invitesList: connect.NewClient[v2.TenantServiceInvitesListRequest, v2.TenantServiceInvitesListResponse](
			httpClient,
			baseURL+TenantServiceInvitesListProcedure,
			connect.WithSchema(tenantServiceMethods.ByName("InvitesList")),
			connect.WithClientOptions(opts...),
		),
		inviteGet: connect.NewClient[v2.TenantServiceInviteGetRequest, v2.TenantServiceInviteGetResponse](
			httpClient,
			baseURL+TenantServiceInviteGetProcedure,
			connect.WithSchema(tenantServiceMethods.ByName("InviteGet")),
			connect.WithClientOptions(opts...),
		),
	}
}

// tenantServiceClient implements TenantServiceClient.
type tenantServiceClient struct {
	create       *connect.Client[v2.TenantServiceCreateRequest, v2.TenantServiceCreateResponse]
	list         *connect.Client[v2.TenantServiceListRequest, v2.TenantServiceListResponse]
	get          *connect.Client[v2.TenantServiceGetRequest, v2.TenantServiceGetResponse]
	update       *connect.Client[v2.TenantServiceUpdateRequest, v2.TenantServiceUpdateResponse]
	delete       *connect.Client[v2.TenantServiceDeleteRequest, v2.TenantServiceDeleteResponse]
	removeMember *connect.Client[v2.TenantServiceRemoveMemberRequest, v2.TenantServiceRemoveMemberResponse]
	updateMember *connect.Client[v2.TenantServiceUpdateMemberRequest, v2.TenantServiceUpdateMemberResponse]
	invite       *connect.Client[v2.TenantServiceInviteRequest, v2.TenantServiceInviteResponse]
	inviteAccept *connect.Client[v2.TenantServiceInviteAcceptRequest, v2.TenantServiceInviteAcceptResponse]
	inviteDelete *connect.Client[v2.TenantServiceInviteDeleteRequest, v2.TenantServiceInviteDeleteResponse]
	invitesList  *connect.Client[v2.TenantServiceInvitesListRequest, v2.TenantServiceInvitesListResponse]
	inviteGet    *connect.Client[v2.TenantServiceInviteGetRequest, v2.TenantServiceInviteGetResponse]
}

// Create calls metalstack.api.v2.TenantService.Create.
func (c *tenantServiceClient) Create(ctx context.Context, req *connect.Request[v2.TenantServiceCreateRequest]) (*connect.Response[v2.TenantServiceCreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// List calls metalstack.api.v2.TenantService.List.
func (c *tenantServiceClient) List(ctx context.Context, req *connect.Request[v2.TenantServiceListRequest]) (*connect.Response[v2.TenantServiceListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Get calls metalstack.api.v2.TenantService.Get.
func (c *tenantServiceClient) Get(ctx context.Context, req *connect.Request[v2.TenantServiceGetRequest]) (*connect.Response[v2.TenantServiceGetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Update calls metalstack.api.v2.TenantService.Update.
func (c *tenantServiceClient) Update(ctx context.Context, req *connect.Request[v2.TenantServiceUpdateRequest]) (*connect.Response[v2.TenantServiceUpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls metalstack.api.v2.TenantService.Delete.
func (c *tenantServiceClient) Delete(ctx context.Context, req *connect.Request[v2.TenantServiceDeleteRequest]) (*connect.Response[v2.TenantServiceDeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// RemoveMember calls metalstack.api.v2.TenantService.RemoveMember.
func (c *tenantServiceClient) RemoveMember(ctx context.Context, req *connect.Request[v2.TenantServiceRemoveMemberRequest]) (*connect.Response[v2.TenantServiceRemoveMemberResponse], error) {
	return c.removeMember.CallUnary(ctx, req)
}

// UpdateMember calls metalstack.api.v2.TenantService.UpdateMember.
func (c *tenantServiceClient) UpdateMember(ctx context.Context, req *connect.Request[v2.TenantServiceUpdateMemberRequest]) (*connect.Response[v2.TenantServiceUpdateMemberResponse], error) {
	return c.updateMember.CallUnary(ctx, req)
}

// Invite calls metalstack.api.v2.TenantService.Invite.
func (c *tenantServiceClient) Invite(ctx context.Context, req *connect.Request[v2.TenantServiceInviteRequest]) (*connect.Response[v2.TenantServiceInviteResponse], error) {
	return c.invite.CallUnary(ctx, req)
}

// InviteAccept calls metalstack.api.v2.TenantService.InviteAccept.
func (c *tenantServiceClient) InviteAccept(ctx context.Context, req *connect.Request[v2.TenantServiceInviteAcceptRequest]) (*connect.Response[v2.TenantServiceInviteAcceptResponse], error) {
	return c.inviteAccept.CallUnary(ctx, req)
}

// InviteDelete calls metalstack.api.v2.TenantService.InviteDelete.
func (c *tenantServiceClient) InviteDelete(ctx context.Context, req *connect.Request[v2.TenantServiceInviteDeleteRequest]) (*connect.Response[v2.TenantServiceInviteDeleteResponse], error) {
	return c.inviteDelete.CallUnary(ctx, req)
}

// InvitesList calls metalstack.api.v2.TenantService.InvitesList.
func (c *tenantServiceClient) InvitesList(ctx context.Context, req *connect.Request[v2.TenantServiceInvitesListRequest]) (*connect.Response[v2.TenantServiceInvitesListResponse], error) {
	return c.invitesList.CallUnary(ctx, req)
}

// InviteGet calls metalstack.api.v2.TenantService.InviteGet.
func (c *tenantServiceClient) InviteGet(ctx context.Context, req *connect.Request[v2.TenantServiceInviteGetRequest]) (*connect.Response[v2.TenantServiceInviteGetResponse], error) {
	return c.inviteGet.CallUnary(ctx, req)
}

// TenantServiceHandler is an implementation of the metalstack.api.v2.TenantService service.
type TenantServiceHandler interface {
	// Create a tenant
	Create(context.Context, *connect.Request[v2.TenantServiceCreateRequest]) (*connect.Response[v2.TenantServiceCreateResponse], error)
	// List tenants
	List(context.Context, *connect.Request[v2.TenantServiceListRequest]) (*connect.Response[v2.TenantServiceListResponse], error)
	// Get a tenant
	Get(context.Context, *connect.Request[v2.TenantServiceGetRequest]) (*connect.Response[v2.TenantServiceGetResponse], error)
	// Update a tenant
	Update(context.Context, *connect.Request[v2.TenantServiceUpdateRequest]) (*connect.Response[v2.TenantServiceUpdateResponse], error)
	// Delete a tenant
	Delete(context.Context, *connect.Request[v2.TenantServiceDeleteRequest]) (*connect.Response[v2.TenantServiceDeleteResponse], error)
	// RemoveMember remove a member of a tenant
	RemoveMember(context.Context, *connect.Request[v2.TenantServiceRemoveMemberRequest]) (*connect.Response[v2.TenantServiceRemoveMemberResponse], error)
	// UpdateMember update a member of a tenant
	UpdateMember(context.Context, *connect.Request[v2.TenantServiceUpdateMemberRequest]) (*connect.Response[v2.TenantServiceUpdateMemberResponse], error)
	// Invite a user to a tenant
	Invite(context.Context, *connect.Request[v2.TenantServiceInviteRequest]) (*connect.Response[v2.TenantServiceInviteResponse], error)
	// InviteAccept is called from a user to accept an invitation
	InviteAccept(context.Context, *connect.Request[v2.TenantServiceInviteAcceptRequest]) (*connect.Response[v2.TenantServiceInviteAcceptResponse], error)
	// InviteDelete deletes a pending invitation
	InviteDelete(context.Context, *connect.Request[v2.TenantServiceInviteDeleteRequest]) (*connect.Response[v2.TenantServiceInviteDeleteResponse], error)
	// InvitesList list all invites to a tenant
	InvitesList(context.Context, *connect.Request[v2.TenantServiceInvitesListRequest]) (*connect.Response[v2.TenantServiceInvitesListResponse], error)
	// InviteGet get an invite
	InviteGet(context.Context, *connect.Request[v2.TenantServiceInviteGetRequest]) (*connect.Response[v2.TenantServiceInviteGetResponse], error)
}

// NewTenantServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTenantServiceHandler(svc TenantServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tenantServiceMethods := v2.File_metalstack_api_v2_tenant_proto.Services().ByName("TenantService").Methods()
	tenantServiceCreateHandler := connect.NewUnaryHandler(
		TenantServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(tenantServiceMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	tenantServiceListHandler := connect.NewUnaryHandler(
		TenantServiceListProcedure,
		svc.List,
		connect.WithSchema(tenantServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	tenantServiceGetHandler := connect.NewUnaryHandler(
		TenantServiceGetProcedure,
		svc.Get,
		connect.WithSchema(tenantServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	tenantServiceUpdateHandler := connect.NewUnaryHandler(
		TenantServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(tenantServiceMethods.ByName("Update")),
		connect.WithHandlerOptions(opts...),
	)
	tenantServiceDeleteHandler := connect.NewUnaryHandler(
		TenantServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(tenantServiceMethods.ByName("Delete")),
		connect.WithHandlerOptions(opts...),
	)
	tenantServiceRemoveMemberHandler := connect.NewUnaryHandler(
		TenantServiceRemoveMemberProcedure,
		svc.RemoveMember,
		connect.WithSchema(tenantServiceMethods.ByName("RemoveMember")),
		connect.WithHandlerOptions(opts...),
	)
	tenantServiceUpdateMemberHandler := connect.NewUnaryHandler(
		TenantServiceUpdateMemberProcedure,
		svc.UpdateMember,
		connect.WithSchema(tenantServiceMethods.ByName("UpdateMember")),
		connect.WithHandlerOptions(opts...),
	)
	tenantServiceInviteHandler := connect.NewUnaryHandler(
		TenantServiceInviteProcedure,
		svc.Invite,
		connect.WithSchema(tenantServiceMethods.ByName("Invite")),
		connect.WithHandlerOptions(opts...),
	)
	tenantServiceInviteAcceptHandler := connect.NewUnaryHandler(
		TenantServiceInviteAcceptProcedure,
		svc.InviteAccept,
		connect.WithSchema(tenantServiceMethods.ByName("InviteAccept")),
		connect.WithHandlerOptions(opts...),
	)
	tenantServiceInviteDeleteHandler := connect.NewUnaryHandler(
		TenantServiceInviteDeleteProcedure,
		svc.InviteDelete,
		connect.WithSchema(tenantServiceMethods.ByName("InviteDelete")),
		connect.WithHandlerOptions(opts...),
	)
	tenantServiceInvitesListHandler := connect.NewUnaryHandler(
		TenantServiceInvitesListProcedure,
		svc.InvitesList,
		connect.WithSchema(tenantServiceMethods.ByName("InvitesList")),
		connect.WithHandlerOptions(opts...),
	)
	tenantServiceInviteGetHandler := connect.NewUnaryHandler(
		TenantServiceInviteGetProcedure,
		svc.InviteGet,
		connect.WithSchema(tenantServiceMethods.ByName("InviteGet")),
		connect.WithHandlerOptions(opts...),
	)
	return "/metalstack.api.v2.TenantService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TenantServiceCreateProcedure:
			tenantServiceCreateHandler.ServeHTTP(w, r)
		case TenantServiceListProcedure:
			tenantServiceListHandler.ServeHTTP(w, r)
		case TenantServiceGetProcedure:
			tenantServiceGetHandler.ServeHTTP(w, r)
		case TenantServiceUpdateProcedure:
			tenantServiceUpdateHandler.ServeHTTP(w, r)
		case TenantServiceDeleteProcedure:
			tenantServiceDeleteHandler.ServeHTTP(w, r)
		case TenantServiceRemoveMemberProcedure:
			tenantServiceRemoveMemberHandler.ServeHTTP(w, r)
		case TenantServiceUpdateMemberProcedure:
			tenantServiceUpdateMemberHandler.ServeHTTP(w, r)
		case TenantServiceInviteProcedure:
			tenantServiceInviteHandler.ServeHTTP(w, r)
		case TenantServiceInviteAcceptProcedure:
			tenantServiceInviteAcceptHandler.ServeHTTP(w, r)
		case TenantServiceInviteDeleteProcedure:
			tenantServiceInviteDeleteHandler.ServeHTTP(w, r)
		case TenantServiceInvitesListProcedure:
			tenantServiceInvitesListHandler.ServeHTTP(w, r)
		case TenantServiceInviteGetProcedure:
			tenantServiceInviteGetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTenantServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTenantServiceHandler struct{}

func (UnimplementedTenantServiceHandler) Create(context.Context, *connect.Request[v2.TenantServiceCreateRequest]) (*connect.Response[v2.TenantServiceCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.TenantService.Create is not implemented"))
}

func (UnimplementedTenantServiceHandler) List(context.Context, *connect.Request[v2.TenantServiceListRequest]) (*connect.Response[v2.TenantServiceListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.TenantService.List is not implemented"))
}

func (UnimplementedTenantServiceHandler) Get(context.Context, *connect.Request[v2.TenantServiceGetRequest]) (*connect.Response[v2.TenantServiceGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.TenantService.Get is not implemented"))
}

func (UnimplementedTenantServiceHandler) Update(context.Context, *connect.Request[v2.TenantServiceUpdateRequest]) (*connect.Response[v2.TenantServiceUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.TenantService.Update is not implemented"))
}

func (UnimplementedTenantServiceHandler) Delete(context.Context, *connect.Request[v2.TenantServiceDeleteRequest]) (*connect.Response[v2.TenantServiceDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.TenantService.Delete is not implemented"))
}

func (UnimplementedTenantServiceHandler) RemoveMember(context.Context, *connect.Request[v2.TenantServiceRemoveMemberRequest]) (*connect.Response[v2.TenantServiceRemoveMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.TenantService.RemoveMember is not implemented"))
}

func (UnimplementedTenantServiceHandler) UpdateMember(context.Context, *connect.Request[v2.TenantServiceUpdateMemberRequest]) (*connect.Response[v2.TenantServiceUpdateMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.TenantService.UpdateMember is not implemented"))
}

func (UnimplementedTenantServiceHandler) Invite(context.Context, *connect.Request[v2.TenantServiceInviteRequest]) (*connect.Response[v2.TenantServiceInviteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.TenantService.Invite is not implemented"))
}

func (UnimplementedTenantServiceHandler) InviteAccept(context.Context, *connect.Request[v2.TenantServiceInviteAcceptRequest]) (*connect.Response[v2.TenantServiceInviteAcceptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.TenantService.InviteAccept is not implemented"))
}

func (UnimplementedTenantServiceHandler) InviteDelete(context.Context, *connect.Request[v2.TenantServiceInviteDeleteRequest]) (*connect.Response[v2.TenantServiceInviteDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.TenantService.InviteDelete is not implemented"))
}

func (UnimplementedTenantServiceHandler) InvitesList(context.Context, *connect.Request[v2.TenantServiceInvitesListRequest]) (*connect.Response[v2.TenantServiceInvitesListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.TenantService.InvitesList is not implemented"))
}

func (UnimplementedTenantServiceHandler) InviteGet(context.Context, *connect.Request[v2.TenantServiceInviteGetRequest]) (*connect.Response[v2.TenantServiceInviteGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.TenantService.InviteGet is not implemented"))
}
