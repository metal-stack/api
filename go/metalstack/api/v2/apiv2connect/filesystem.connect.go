// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: metalstack/api/v2/filesystem.proto

package apiv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/metal-stack/api/go/metalstack/api/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FilesystemServiceName is the fully-qualified name of the FilesystemService service.
	FilesystemServiceName = "metalstack.api.v2.FilesystemService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FilesystemServiceGetProcedure is the fully-qualified name of the FilesystemService's Get RPC.
	FilesystemServiceGetProcedure = "/metalstack.api.v2.FilesystemService/Get"
	// FilesystemServiceListProcedure is the fully-qualified name of the FilesystemService's List RPC.
	FilesystemServiceListProcedure = "/metalstack.api.v2.FilesystemService/List"
	// FilesystemServiceMatchProcedure is the fully-qualified name of the FilesystemService's Match RPC.
	FilesystemServiceMatchProcedure = "/metalstack.api.v2.FilesystemService/Match"
)

// FilesystemServiceClient is a client for the metalstack.api.v2.FilesystemService service.
type FilesystemServiceClient interface {
	// Get a filesystem
	Get(context.Context, *connect.Request[v2.FilesystemServiceGetRequest]) (*connect.Response[v2.FilesystemServiceGetResponse], error)
	// List all filesystems
	List(context.Context, *connect.Request[v2.FilesystemServiceListRequest]) (*connect.Response[v2.FilesystemServiceListResponse], error)
	// Match a filesystems
	Match(context.Context, *connect.Request[v2.FilesystemServiceMatchRequest]) (*connect.Response[v2.FilesystemServiceMatchResponse], error)
}

// NewFilesystemServiceClient constructs a client for the metalstack.api.v2.FilesystemService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFilesystemServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FilesystemServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	filesystemServiceMethods := v2.File_metalstack_api_v2_filesystem_proto.Services().ByName("FilesystemService").Methods()
	return &filesystemServiceClient{
		get: connect.NewClient[v2.FilesystemServiceGetRequest, v2.FilesystemServiceGetResponse](
			httpClient,
			baseURL+FilesystemServiceGetProcedure,
			connect.WithSchema(filesystemServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v2.FilesystemServiceListRequest, v2.FilesystemServiceListResponse](
			httpClient,
			baseURL+FilesystemServiceListProcedure,
			connect.WithSchema(filesystemServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
		match: connect.NewClient[v2.FilesystemServiceMatchRequest, v2.FilesystemServiceMatchResponse](
			httpClient,
			baseURL+FilesystemServiceMatchProcedure,
			connect.WithSchema(filesystemServiceMethods.ByName("Match")),
			connect.WithClientOptions(opts...),
		),
	}
}

// filesystemServiceClient implements FilesystemServiceClient.
type filesystemServiceClient struct {
	get   *connect.Client[v2.FilesystemServiceGetRequest, v2.FilesystemServiceGetResponse]
	list  *connect.Client[v2.FilesystemServiceListRequest, v2.FilesystemServiceListResponse]
	match *connect.Client[v2.FilesystemServiceMatchRequest, v2.FilesystemServiceMatchResponse]
}

// Get calls metalstack.api.v2.FilesystemService.Get.
func (c *filesystemServiceClient) Get(ctx context.Context, req *connect.Request[v2.FilesystemServiceGetRequest]) (*connect.Response[v2.FilesystemServiceGetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls metalstack.api.v2.FilesystemService.List.
func (c *filesystemServiceClient) List(ctx context.Context, req *connect.Request[v2.FilesystemServiceListRequest]) (*connect.Response[v2.FilesystemServiceListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Match calls metalstack.api.v2.FilesystemService.Match.
func (c *filesystemServiceClient) Match(ctx context.Context, req *connect.Request[v2.FilesystemServiceMatchRequest]) (*connect.Response[v2.FilesystemServiceMatchResponse], error) {
	return c.match.CallUnary(ctx, req)
}

// FilesystemServiceHandler is an implementation of the metalstack.api.v2.FilesystemService service.
type FilesystemServiceHandler interface {
	// Get a filesystem
	Get(context.Context, *connect.Request[v2.FilesystemServiceGetRequest]) (*connect.Response[v2.FilesystemServiceGetResponse], error)
	// List all filesystems
	List(context.Context, *connect.Request[v2.FilesystemServiceListRequest]) (*connect.Response[v2.FilesystemServiceListResponse], error)
	// Match a filesystems
	Match(context.Context, *connect.Request[v2.FilesystemServiceMatchRequest]) (*connect.Response[v2.FilesystemServiceMatchResponse], error)
}

// NewFilesystemServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFilesystemServiceHandler(svc FilesystemServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	filesystemServiceMethods := v2.File_metalstack_api_v2_filesystem_proto.Services().ByName("FilesystemService").Methods()
	filesystemServiceGetHandler := connect.NewUnaryHandler(
		FilesystemServiceGetProcedure,
		svc.Get,
		connect.WithSchema(filesystemServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	filesystemServiceListHandler := connect.NewUnaryHandler(
		FilesystemServiceListProcedure,
		svc.List,
		connect.WithSchema(filesystemServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	filesystemServiceMatchHandler := connect.NewUnaryHandler(
		FilesystemServiceMatchProcedure,
		svc.Match,
		connect.WithSchema(filesystemServiceMethods.ByName("Match")),
		connect.WithHandlerOptions(opts...),
	)
	return "/metalstack.api.v2.FilesystemService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FilesystemServiceGetProcedure:
			filesystemServiceGetHandler.ServeHTTP(w, r)
		case FilesystemServiceListProcedure:
			filesystemServiceListHandler.ServeHTTP(w, r)
		case FilesystemServiceMatchProcedure:
			filesystemServiceMatchHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFilesystemServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFilesystemServiceHandler struct{}

func (UnimplementedFilesystemServiceHandler) Get(context.Context, *connect.Request[v2.FilesystemServiceGetRequest]) (*connect.Response[v2.FilesystemServiceGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.FilesystemService.Get is not implemented"))
}

func (UnimplementedFilesystemServiceHandler) List(context.Context, *connect.Request[v2.FilesystemServiceListRequest]) (*connect.Response[v2.FilesystemServiceListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.FilesystemService.List is not implemented"))
}

func (UnimplementedFilesystemServiceHandler) Match(context.Context, *connect.Request[v2.FilesystemServiceMatchRequest]) (*connect.Response[v2.FilesystemServiceMatchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.FilesystemService.Match is not implemented"))
}
