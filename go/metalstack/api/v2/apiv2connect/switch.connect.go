// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: metalstack/api/v2/switch.proto

package apiv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/metal-stack/api/go/metalstack/api/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SwitchServiceName is the fully-qualified name of the SwitchService service.
	SwitchServiceName = "metalstack.api.v2.SwitchService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SwitchServiceGetProcedure is the fully-qualified name of the SwitchService's Get RPC.
	SwitchServiceGetProcedure = "/metalstack.api.v2.SwitchService/Get"
	// SwitchServiceListProcedure is the fully-qualified name of the SwitchService's List RPC.
	SwitchServiceListProcedure = "/metalstack.api.v2.SwitchService/List"
)

// SwitchServiceClient is a client for the metalstack.api.v2.SwitchService service.
type SwitchServiceClient interface {
	// Get a switch by ID.
	Get(context.Context, *connect.Request[v2.SwitchServiceGetRequest]) (*connect.Response[v2.SwitchServiceGetResponse], error)
	// List switches.
	List(context.Context, *connect.Request[v2.SwitchServiceListRequest]) (*connect.Response[v2.SwitchServiceListResponse], error)
}

// NewSwitchServiceClient constructs a client for the metalstack.api.v2.SwitchService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSwitchServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SwitchServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	switchServiceMethods := v2.File_metalstack_api_v2_switch_proto.Services().ByName("SwitchService").Methods()
	return &switchServiceClient{
		get: connect.NewClient[v2.SwitchServiceGetRequest, v2.SwitchServiceGetResponse](
			httpClient,
			baseURL+SwitchServiceGetProcedure,
			connect.WithSchema(switchServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v2.SwitchServiceListRequest, v2.SwitchServiceListResponse](
			httpClient,
			baseURL+SwitchServiceListProcedure,
			connect.WithSchema(switchServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
	}
}

// switchServiceClient implements SwitchServiceClient.
type switchServiceClient struct {
	get  *connect.Client[v2.SwitchServiceGetRequest, v2.SwitchServiceGetResponse]
	list *connect.Client[v2.SwitchServiceListRequest, v2.SwitchServiceListResponse]
}

// Get calls metalstack.api.v2.SwitchService.Get.
func (c *switchServiceClient) Get(ctx context.Context, req *connect.Request[v2.SwitchServiceGetRequest]) (*connect.Response[v2.SwitchServiceGetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls metalstack.api.v2.SwitchService.List.
func (c *switchServiceClient) List(ctx context.Context, req *connect.Request[v2.SwitchServiceListRequest]) (*connect.Response[v2.SwitchServiceListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// SwitchServiceHandler is an implementation of the metalstack.api.v2.SwitchService service.
type SwitchServiceHandler interface {
	// Get a switch by ID.
	Get(context.Context, *connect.Request[v2.SwitchServiceGetRequest]) (*connect.Response[v2.SwitchServiceGetResponse], error)
	// List switches.
	List(context.Context, *connect.Request[v2.SwitchServiceListRequest]) (*connect.Response[v2.SwitchServiceListResponse], error)
}

// NewSwitchServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSwitchServiceHandler(svc SwitchServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	switchServiceMethods := v2.File_metalstack_api_v2_switch_proto.Services().ByName("SwitchService").Methods()
	switchServiceGetHandler := connect.NewUnaryHandler(
		SwitchServiceGetProcedure,
		svc.Get,
		connect.WithSchema(switchServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	switchServiceListHandler := connect.NewUnaryHandler(
		SwitchServiceListProcedure,
		svc.List,
		connect.WithSchema(switchServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	return "/metalstack.api.v2.SwitchService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SwitchServiceGetProcedure:
			switchServiceGetHandler.ServeHTTP(w, r)
		case SwitchServiceListProcedure:
			switchServiceListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSwitchServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSwitchServiceHandler struct{}

func (UnimplementedSwitchServiceHandler) Get(context.Context, *connect.Request[v2.SwitchServiceGetRequest]) (*connect.Response[v2.SwitchServiceGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.SwitchService.Get is not implemented"))
}

func (UnimplementedSwitchServiceHandler) List(context.Context, *connect.Request[v2.SwitchServiceListRequest]) (*connect.Response[v2.SwitchServiceListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.api.v2.SwitchService.List is not implemented"))
}
