// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: metalstack/api/v2/partition.proto

package apiv2

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Partition is a failure domain with machines and switches
type Partition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of this partition
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Meta for this ip
	Meta *Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// Description of this partition
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// PartitionBootConfiguration defines how metal-hammer boots
	BootConfiguration *PartitionBootConfiguration `protobuf:"bytes,4,opt,name=boot_configuration,json=bootConfiguration,proto3" json:"boot_configuration,omitempty"`
	// DNSServers for this partition
	DnsServer []*DNSServer `protobuf:"bytes,5,rep,name=dns_server,json=dnsServer,proto3" json:"dns_server,omitempty"`
	// NTPServers for this partition
	NtpServer []*NTPServer `protobuf:"bytes,6,rep,name=ntp_server,json=ntpServer,proto3" json:"ntp_server,omitempty"`
	// ManagementServiceAddresses defines where the management is reachable
	// should be in the form <ip|host>:<port>
	MgmtServiceAddresses []string `protobuf:"bytes,7,rep,name=mgmt_service_addresses,json=mgmtServiceAddresses,proto3" json:"mgmt_service_addresses,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Partition) Reset() {
	*x = Partition{}
	mi := &file_metalstack_api_v2_partition_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Partition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Partition) ProtoMessage() {}

func (x *Partition) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_partition_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Partition.ProtoReflect.Descriptor instead.
func (*Partition) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_partition_proto_rawDescGZIP(), []int{0}
}

func (x *Partition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Partition) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Partition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Partition) GetBootConfiguration() *PartitionBootConfiguration {
	if x != nil {
		return x.BootConfiguration
	}
	return nil
}

func (x *Partition) GetDnsServer() []*DNSServer {
	if x != nil {
		return x.DnsServer
	}
	return nil
}

func (x *Partition) GetNtpServer() []*NTPServer {
	if x != nil {
		return x.NtpServer
	}
	return nil
}

func (x *Partition) GetMgmtServiceAddresses() []string {
	if x != nil {
		return x.MgmtServiceAddresses
	}
	return nil
}

// PartitionQuery is used to search partitions
type PartitionQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the partition to get
	Id *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// Labels lists only partitions containing the given labels
	Labels        *Labels `protobuf:"bytes,2,opt,name=labels,proto3,oneof" json:"labels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartitionQuery) Reset() {
	*x = PartitionQuery{}
	mi := &file_metalstack_api_v2_partition_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionQuery) ProtoMessage() {}

func (x *PartitionQuery) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_partition_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionQuery.ProtoReflect.Descriptor instead.
func (*PartitionQuery) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_partition_proto_rawDescGZIP(), []int{1}
}

func (x *PartitionQuery) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *PartitionQuery) GetLabels() *Labels {
	if x != nil {
		return x.Labels
	}
	return nil
}

// PartitionBootConfiguration defines how metal-hammer boots
type PartitionBootConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ImageURL the url to download the initrd for the boot image
	ImageUrl string `protobuf:"bytes,1,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	// KernelURL the url to download the kernel for the boot image
	KernelUrl string `protobuf:"bytes,2,opt,name=kernel_url,json=kernelUrl,proto3" json:"kernel_url,omitempty"`
	// Commandline the cmdline to the kernel for the boot image
	Commandline   string `protobuf:"bytes,3,opt,name=commandline,proto3" json:"commandline,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartitionBootConfiguration) Reset() {
	*x = PartitionBootConfiguration{}
	mi := &file_metalstack_api_v2_partition_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionBootConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionBootConfiguration) ProtoMessage() {}

func (x *PartitionBootConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_partition_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionBootConfiguration.ProtoReflect.Descriptor instead.
func (*PartitionBootConfiguration) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_partition_proto_rawDescGZIP(), []int{2}
}

func (x *PartitionBootConfiguration) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *PartitionBootConfiguration) GetKernelUrl() string {
	if x != nil {
		return x.KernelUrl
	}
	return ""
}

func (x *PartitionBootConfiguration) GetCommandline() string {
	if x != nil {
		return x.Commandline
	}
	return ""
}

// DNSServer
type DNSServer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IP address of this dns server
	Ip            string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DNSServer) Reset() {
	*x = DNSServer{}
	mi := &file_metalstack_api_v2_partition_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNSServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSServer) ProtoMessage() {}

func (x *DNSServer) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_partition_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSServer.ProtoReflect.Descriptor instead.
func (*DNSServer) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_partition_proto_rawDescGZIP(), []int{3}
}

func (x *DNSServer) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

// NTPServer
type NTPServer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Address either as ip or hostname
	Address       string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NTPServer) Reset() {
	*x = NTPServer{}
	mi := &file_metalstack_api_v2_partition_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NTPServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NTPServer) ProtoMessage() {}

func (x *NTPServer) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_partition_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NTPServer.ProtoReflect.Descriptor instead.
func (*NTPServer) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_partition_proto_rawDescGZIP(), []int{4}
}

func (x *NTPServer) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// PartitionServiceGetRequest is the request payload for a partition get request
type PartitionServiceGetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the partition to get
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartitionServiceGetRequest) Reset() {
	*x = PartitionServiceGetRequest{}
	mi := &file_metalstack_api_v2_partition_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionServiceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionServiceGetRequest) ProtoMessage() {}

func (x *PartitionServiceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_partition_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionServiceGetRequest.ProtoReflect.Descriptor instead.
func (*PartitionServiceGetRequest) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_partition_proto_rawDescGZIP(), []int{5}
}

func (x *PartitionServiceGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// PartitionServiceListRequest is the request payload for a partition list request
type PartitionServiceListRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Query for partitions
	Query         *PartitionQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartitionServiceListRequest) Reset() {
	*x = PartitionServiceListRequest{}
	mi := &file_metalstack_api_v2_partition_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionServiceListRequest) ProtoMessage() {}

func (x *PartitionServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_partition_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionServiceListRequest.ProtoReflect.Descriptor instead.
func (*PartitionServiceListRequest) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_partition_proto_rawDescGZIP(), []int{6}
}

func (x *PartitionServiceListRequest) GetQuery() *PartitionQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

// PartitionServiceGetResponse is the response payload for a partition get request
type PartitionServiceGetResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Ip the partition
	Partition     *Partition `protobuf:"bytes,1,opt,name=partition,proto3" json:"partition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartitionServiceGetResponse) Reset() {
	*x = PartitionServiceGetResponse{}
	mi := &file_metalstack_api_v2_partition_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionServiceGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionServiceGetResponse) ProtoMessage() {}

func (x *PartitionServiceGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_partition_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionServiceGetResponse.ProtoReflect.Descriptor instead.
func (*PartitionServiceGetResponse) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_partition_proto_rawDescGZIP(), []int{7}
}

func (x *PartitionServiceGetResponse) GetPartition() *Partition {
	if x != nil {
		return x.Partition
	}
	return nil
}

// PartitionServiceListResponse is the response payload for a partition list request
type PartitionServiceListResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Ips the partitions
	Partitions    []*Partition `protobuf:"bytes,1,rep,name=partitions,proto3" json:"partitions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartitionServiceListResponse) Reset() {
	*x = PartitionServiceListResponse{}
	mi := &file_metalstack_api_v2_partition_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionServiceListResponse) ProtoMessage() {}

func (x *PartitionServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_partition_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionServiceListResponse.ProtoReflect.Descriptor instead.
func (*PartitionServiceListResponse) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_partition_proto_rawDescGZIP(), []int{8}
}

func (x *PartitionServiceListResponse) GetPartitions() []*Partition {
	if x != nil {
		return x.Partitions
	}
	return nil
}

var File_metalstack_api_v2_partition_proto protoreflect.FileDescriptor

const file_metalstack_api_v2_partition_proto_rawDesc = "" +
	"\n" +
	"!metalstack/api/v2/partition.proto\x12\x11metalstack.api.v2\x1a\x1bbuf/validate/validate.proto\x1a\x1emetalstack/api/v2/common.proto\"\xa2\x03\n" +
	"\tPartition\x12\x1a\n" +
	"\x02id\x18\x01 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01R\x02id\x12+\n" +
	"\x04meta\x18\x02 \x01(\v2\x17.metalstack.api.v2.MetaR\x04meta\x12*\n" +
	"\vdescription\x18\x03 \x01(\tB\b\xbaH\x05r\x03\x18\x80\x01R\vdescription\x12\\\n" +
	"\x12boot_configuration\x18\x04 \x01(\v2-.metalstack.api.v2.PartitionBootConfigurationR\x11bootConfiguration\x12E\n" +
	"\n" +
	"dns_server\x18\x05 \x03(\v2\x1c.metalstack.api.v2.DNSServerB\b\xbaH\x05\x92\x01\x02\x10\x03R\tdnsServer\x12E\n" +
	"\n" +
	"ntp_server\x18\x06 \x03(\v2\x1c.metalstack.api.v2.NTPServerB\b\xbaH\x05\x92\x01\x02\x10\n" +
	"R\tntpServer\x124\n" +
	"\x16mgmt_service_addresses\x18\a \x03(\tR\x14mgmtServiceAddresses\"{\n" +
	"\x0ePartitionQuery\x12\x1f\n" +
	"\x02id\x18\x01 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\x00R\x02id\x88\x01\x01\x126\n" +
	"\x06labels\x18\x02 \x01(\v2\x19.metalstack.api.v2.LabelsH\x01R\x06labels\x88\x01\x01B\x05\n" +
	"\x03_idB\t\n" +
	"\a_labels\"\xee\x01\n" +
	"\x1aPartitionBootConfiguration\x12U\n" +
	"\timage_url\x18\x01 \x01(\tB8\xbaH5\xba\x012\n" +
	"\tvalid_url\x12\x17url must be a valid URI\x1a\fthis.isUri()R\bimageUrl\x12W\n" +
	"\n" +
	"kernel_url\x18\x02 \x01(\tB8\xbaH5\xba\x012\n" +
	"\tvalid_url\x12\x17url must be a valid URI\x1a\fthis.isUri()R\tkernelUrl\x12 \n" +
	"\vcommandline\x18\x03 \x01(\tR\vcommandline\"$\n" +
	"\tDNSServer\x12\x17\n" +
	"\x02ip\x18\x01 \x01(\tB\a\xbaH\x04r\x02p\x01R\x02ip\"/\n" +
	"\tNTPServer\x12\"\n" +
	"\aaddress\x18\x01 \x01(\tB\b\xbaH\x05r\x03\x18\x80\x02R\aaddress\"8\n" +
	"\x1aPartitionServiceGetRequest\x12\x1a\n" +
	"\x02id\x18\x01 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01R\x02id\"V\n" +
	"\x1bPartitionServiceListRequest\x127\n" +
	"\x05query\x18\x01 \x01(\v2!.metalstack.api.v2.PartitionQueryR\x05query\"Y\n" +
	"\x1bPartitionServiceGetResponse\x12:\n" +
	"\tpartition\x18\x01 \x01(\v2\x1c.metalstack.api.v2.PartitionR\tpartition\"\\\n" +
	"\x1cPartitionServiceListResponse\x12<\n" +
	"\n" +
	"partitions\x18\x01 \x03(\v2\x1c.metalstack.api.v2.PartitionR\n" +
	"partitions2\xf5\x01\n" +
	"\x10PartitionService\x12n\n" +
	"\x03Get\x12-.metalstack.api.v2.PartitionServiceGetRequest\x1a..metalstack.api.v2.PartitionServiceGetResponse\"\b\xd8\xf3\x18\x03\xe0\xf3\x18\x02\x12q\n" +
	"\x04List\x12..metalstack.api.v2.PartitionServiceListRequest\x1a/.metalstack.api.v2.PartitionServiceListResponse\"\b\xd8\xf3\x18\x03\xe0\xf3\x18\x02B\xc4\x01\n" +
	"\x15com.metalstack.api.v2B\x0ePartitionProtoP\x01Z5github.com/metal-stack/api/go/metalstack/api/v2;apiv2\xa2\x02\x03MAX\xaa\x02\x11Metalstack.Api.V2\xca\x02\x11Metalstack\\Api\\V2\xe2\x02\x1dMetalstack\\Api\\V2\\GPBMetadata\xea\x02\x13Metalstack::Api::V2b\x06proto3"

var (
	file_metalstack_api_v2_partition_proto_rawDescOnce sync.Once
	file_metalstack_api_v2_partition_proto_rawDescData []byte
)

func file_metalstack_api_v2_partition_proto_rawDescGZIP() []byte {
	file_metalstack_api_v2_partition_proto_rawDescOnce.Do(func() {
		file_metalstack_api_v2_partition_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_metalstack_api_v2_partition_proto_rawDesc), len(file_metalstack_api_v2_partition_proto_rawDesc)))
	})
	return file_metalstack_api_v2_partition_proto_rawDescData
}

var file_metalstack_api_v2_partition_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_metalstack_api_v2_partition_proto_goTypes = []any{
	(*Partition)(nil),                    // 0: metalstack.api.v2.Partition
	(*PartitionQuery)(nil),               // 1: metalstack.api.v2.PartitionQuery
	(*PartitionBootConfiguration)(nil),   // 2: metalstack.api.v2.PartitionBootConfiguration
	(*DNSServer)(nil),                    // 3: metalstack.api.v2.DNSServer
	(*NTPServer)(nil),                    // 4: metalstack.api.v2.NTPServer
	(*PartitionServiceGetRequest)(nil),   // 5: metalstack.api.v2.PartitionServiceGetRequest
	(*PartitionServiceListRequest)(nil),  // 6: metalstack.api.v2.PartitionServiceListRequest
	(*PartitionServiceGetResponse)(nil),  // 7: metalstack.api.v2.PartitionServiceGetResponse
	(*PartitionServiceListResponse)(nil), // 8: metalstack.api.v2.PartitionServiceListResponse
	(*Meta)(nil),                         // 9: metalstack.api.v2.Meta
	(*Labels)(nil),                       // 10: metalstack.api.v2.Labels
}
var file_metalstack_api_v2_partition_proto_depIdxs = []int32{
	9,  // 0: metalstack.api.v2.Partition.meta:type_name -> metalstack.api.v2.Meta
	2,  // 1: metalstack.api.v2.Partition.boot_configuration:type_name -> metalstack.api.v2.PartitionBootConfiguration
	3,  // 2: metalstack.api.v2.Partition.dns_server:type_name -> metalstack.api.v2.DNSServer
	4,  // 3: metalstack.api.v2.Partition.ntp_server:type_name -> metalstack.api.v2.NTPServer
	10, // 4: metalstack.api.v2.PartitionQuery.labels:type_name -> metalstack.api.v2.Labels
	1,  // 5: metalstack.api.v2.PartitionServiceListRequest.query:type_name -> metalstack.api.v2.PartitionQuery
	0,  // 6: metalstack.api.v2.PartitionServiceGetResponse.partition:type_name -> metalstack.api.v2.Partition
	0,  // 7: metalstack.api.v2.PartitionServiceListResponse.partitions:type_name -> metalstack.api.v2.Partition
	5,  // 8: metalstack.api.v2.PartitionService.Get:input_type -> metalstack.api.v2.PartitionServiceGetRequest
	6,  // 9: metalstack.api.v2.PartitionService.List:input_type -> metalstack.api.v2.PartitionServiceListRequest
	7,  // 10: metalstack.api.v2.PartitionService.Get:output_type -> metalstack.api.v2.PartitionServiceGetResponse
	8,  // 11: metalstack.api.v2.PartitionService.List:output_type -> metalstack.api.v2.PartitionServiceListResponse
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_metalstack_api_v2_partition_proto_init() }
func file_metalstack_api_v2_partition_proto_init() {
	if File_metalstack_api_v2_partition_proto != nil {
		return
	}
	file_metalstack_api_v2_common_proto_init()
	file_metalstack_api_v2_partition_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_metalstack_api_v2_partition_proto_rawDesc), len(file_metalstack_api_v2_partition_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_metalstack_api_v2_partition_proto_goTypes,
		DependencyIndexes: file_metalstack_api_v2_partition_proto_depIdxs,
		MessageInfos:      file_metalstack_api_v2_partition_proto_msgTypes,
	}.Build()
	File_metalstack_api_v2_partition_proto = out.File
	file_metalstack_api_v2_partition_proto_goTypes = nil
	file_metalstack_api_v2_partition_proto_depIdxs = nil
}
