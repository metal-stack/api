// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: metalstack/api/v2/switch.proto

package apiv2

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BGPState represents the state of a BGP session
type BGPState int32

const (
	// BGP_STATE_UNSPECIFIED is not specified
	BGPState_BGP_STATE_UNSPECIFIED BGPState = 0
	// BGP_STATE_IDLE is the Idle state of a BGP session
	BGPState_BGP_STATE_IDLE BGPState = 1
	// BGP_STATE_CONNECT is the Connect state of a BGP session
	BGPState_BGP_STATE_CONNECT BGPState = 2
	// BGP_STATE_ACTIVE is the Active state of a BGP session
	BGPState_BGP_STATE_ACTIVE BGPState = 3
	// BGP_STATE_OPEN_SENT is the OpenSent state of a BGP session
	BGPState_BGP_STATE_OPEN_SENT BGPState = 4
	// BGP_STATE_OPEN_CONFIRM is the OpenConfirm state of a BGP session
	BGPState_BGP_STATE_OPEN_CONFIRM BGPState = 5
	// BGP_STATE_ESTABLISHED is the Established state of a BGP session
	BGPState_BGP_STATE_ESTABLISHED BGPState = 6
)

// Enum value maps for BGPState.
var (
	BGPState_name = map[int32]string{
		0: "BGP_STATE_UNSPECIFIED",
		1: "BGP_STATE_IDLE",
		2: "BGP_STATE_CONNECT",
		3: "BGP_STATE_ACTIVE",
		4: "BGP_STATE_OPEN_SENT",
		5: "BGP_STATE_OPEN_CONFIRM",
		6: "BGP_STATE_ESTABLISHED",
	}
	BGPState_value = map[string]int32{
		"BGP_STATE_UNSPECIFIED":  0,
		"BGP_STATE_IDLE":         1,
		"BGP_STATE_CONNECT":      2,
		"BGP_STATE_ACTIVE":       3,
		"BGP_STATE_OPEN_SENT":    4,
		"BGP_STATE_OPEN_CONFIRM": 5,
		"BGP_STATE_ESTABLISHED":  6,
	}
)

func (x BGPState) Enum() *BGPState {
	p := new(BGPState)
	*p = x
	return p
}

func (x BGPState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BGPState) Descriptor() protoreflect.EnumDescriptor {
	return file_metalstack_api_v2_switch_proto_enumTypes[0].Descriptor()
}

func (BGPState) Type() protoreflect.EnumType {
	return &file_metalstack_api_v2_switch_proto_enumTypes[0]
}

func (x BGPState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BGPState.Descriptor instead.
func (BGPState) EnumDescriptor() ([]byte, []int) {
	return file_metalstack_api_v2_switch_proto_rawDescGZIP(), []int{0}
}

// SwitchReplaceMode is used to mark a switch ready for replacement
type SwitchReplaceMode int32

const (
	// SWITCH_REPLACE_MODE_UNSPECIFIED is not specified
	SwitchReplaceMode_SWITCH_REPLACE_MODE_UNSPECIFIED SwitchReplaceMode = 0
	// SWITCH_REPLACE_MODE_REPLACE means this switch is waiting to be replaced
	SwitchReplaceMode_SWITCH_REPLACE_MODE_REPLACE SwitchReplaceMode = 1
	// SWITCH_REPLACE_MODE_OPERATIONAL means this switch is operational and cannot be replaced
	SwitchReplaceMode_SWITCH_REPLACE_MODE_OPERATIONAL SwitchReplaceMode = 2
)

// Enum value maps for SwitchReplaceMode.
var (
	SwitchReplaceMode_name = map[int32]string{
		0: "SWITCH_REPLACE_MODE_UNSPECIFIED",
		1: "SWITCH_REPLACE_MODE_REPLACE",
		2: "SWITCH_REPLACE_MODE_OPERATIONAL",
	}
	SwitchReplaceMode_value = map[string]int32{
		"SWITCH_REPLACE_MODE_UNSPECIFIED": 0,
		"SWITCH_REPLACE_MODE_REPLACE":     1,
		"SWITCH_REPLACE_MODE_OPERATIONAL": 2,
	}
)

func (x SwitchReplaceMode) Enum() *SwitchReplaceMode {
	p := new(SwitchReplaceMode)
	*p = x
	return p
}

func (x SwitchReplaceMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwitchReplaceMode) Descriptor() protoreflect.EnumDescriptor {
	return file_metalstack_api_v2_switch_proto_enumTypes[1].Descriptor()
}

func (SwitchReplaceMode) Type() protoreflect.EnumType {
	return &file_metalstack_api_v2_switch_proto_enumTypes[1]
}

func (x SwitchReplaceMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwitchReplaceMode.Descriptor instead.
func (SwitchReplaceMode) EnumDescriptor() ([]byte, []int) {
	return file_metalstack_api_v2_switch_proto_rawDescGZIP(), []int{1}
}

// SwitchOSVendor represents a NOS distribution
type SwitchOSVendor int32

const (
	// SWITCH_OS_VENDOR_UNSPECIFIED is not specified
	SwitchOSVendor_SWITCH_OS_VENDOR_UNSPECIFIED SwitchOSVendor = 0
	// SWITCH_OS_VENDOR_CUMULUS means this switch is running on Cumulus Linux
	SwitchOSVendor_SWITCH_OS_VENDOR_CUMULUS SwitchOSVendor = 1
	// SWITCH_OS_VENDOR_SONIC means this switch is running on SONiC NOS
	SwitchOSVendor_SWITCH_OS_VENDOR_SONIC SwitchOSVendor = 2
)

// Enum value maps for SwitchOSVendor.
var (
	SwitchOSVendor_name = map[int32]string{
		0: "SWITCH_OS_VENDOR_UNSPECIFIED",
		1: "SWITCH_OS_VENDOR_CUMULUS",
		2: "SWITCH_OS_VENDOR_SONIC",
	}
	SwitchOSVendor_value = map[string]int32{
		"SWITCH_OS_VENDOR_UNSPECIFIED": 0,
		"SWITCH_OS_VENDOR_CUMULUS":     1,
		"SWITCH_OS_VENDOR_SONIC":       2,
	}
)

func (x SwitchOSVendor) Enum() *SwitchOSVendor {
	p := new(SwitchOSVendor)
	*p = x
	return p
}

func (x SwitchOSVendor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwitchOSVendor) Descriptor() protoreflect.EnumDescriptor {
	return file_metalstack_api_v2_switch_proto_enumTypes[2].Descriptor()
}

func (SwitchOSVendor) Type() protoreflect.EnumType {
	return &file_metalstack_api_v2_switch_proto_enumTypes[2]
}

func (x SwitchOSVendor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwitchOSVendor.Descriptor instead.
func (SwitchOSVendor) EnumDescriptor() ([]byte, []int) {
	return file_metalstack_api_v2_switch_proto_rawDescGZIP(), []int{2}
}

// SwitchPortStatus specifies the state of a switch port
type SwitchPortStatus int32

const (
	// SWITCH_PORT_STATUS_UNSPECIFIED is not specified
	SwitchPortStatus_SWITCH_PORT_STATUS_UNSPECIFIED SwitchPortStatus = 0
	// SWITCH_PORT_STATUS_UP means this port is up
	SwitchPortStatus_SWITCH_PORT_STATUS_UP SwitchPortStatus = 1
	// SWITCH_PORT_STATUS_DOWN means this port is down
	SwitchPortStatus_SWITCH_PORT_STATUS_DOWN SwitchPortStatus = 2
)

// Enum value maps for SwitchPortStatus.
var (
	SwitchPortStatus_name = map[int32]string{
		0: "SWITCH_PORT_STATUS_UNSPECIFIED",
		1: "SWITCH_PORT_STATUS_UP",
		2: "SWITCH_PORT_STATUS_DOWN",
	}
	SwitchPortStatus_value = map[string]int32{
		"SWITCH_PORT_STATUS_UNSPECIFIED": 0,
		"SWITCH_PORT_STATUS_UP":          1,
		"SWITCH_PORT_STATUS_DOWN":        2,
	}
)

func (x SwitchPortStatus) Enum() *SwitchPortStatus {
	p := new(SwitchPortStatus)
	*p = x
	return p
}

func (x SwitchPortStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwitchPortStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_metalstack_api_v2_switch_proto_enumTypes[3].Descriptor()
}

func (SwitchPortStatus) Type() protoreflect.EnumType {
	return &file_metalstack_api_v2_switch_proto_enumTypes[3]
}

func (x SwitchPortStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwitchPortStatus.Descriptor instead.
func (SwitchPortStatus) EnumDescriptor() ([]byte, []int) {
	return file_metalstack_api_v2_switch_proto_rawDescGZIP(), []int{3}
}

// Switch represents a network switch
type Switch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the switch
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Description of the switch
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Rack ID if the switch resides in a rack
	RackId *string `protobuf:"bytes,3,opt,name=rack_id,json=rackId,proto3,oneof" json:"rack_id,omitempty"`
	// Partition the switch belongs to
	Partition string `protobuf:"bytes,4,opt,name=partition,proto3" json:"partition,omitempty"`
	// Replace mode is used to mark a switch ready for replacement
	ReplaceMode SwitchReplaceMode `protobuf:"varint,6,opt,name=replace_mode,json=replaceMode,proto3,enum=metalstack.api.v2.SwitchReplaceMode" json:"replace_mode,omitempty"`
	// Management IP is the switch's IP for management access
	ManagementIp string `protobuf:"bytes,7,opt,name=management_ip,json=managementIp,proto3" json:"management_ip,omitempty"`
	// Management user is the user name to use for management access
	ManagementUser string `protobuf:"bytes,8,opt,name=management_user,json=managementUser,proto3" json:"management_user,omitempty"`
	// Console command is the command for accessing the switch's console
	ConsoleCommand string `protobuf:"bytes,9,opt,name=console_command,json=consoleCommand,proto3" json:"console_command,omitempty"`
	// Switch NICs are the front panel ports of the switch
	SwitchNics []*SwitchNic `protobuf:"bytes,10,rep,name=switch_nics,json=switchNics,proto3" json:"switch_nics,omitempty"`
	// Switch OS is the OS running on the switch
	Os            *SwitchOS `protobuf:"bytes,11,opt,name=os,proto3" json:"os,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Switch) Reset() {
	*x = Switch{}
	mi := &file_metalstack_api_v2_switch_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Switch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Switch) ProtoMessage() {}

func (x *Switch) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_switch_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Switch.ProtoReflect.Descriptor instead.
func (*Switch) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_switch_proto_rawDescGZIP(), []int{0}
}

func (x *Switch) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Switch) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Switch) GetRackId() string {
	if x != nil && x.RackId != nil {
		return *x.RackId
	}
	return ""
}

func (x *Switch) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

func (x *Switch) GetReplaceMode() SwitchReplaceMode {
	if x != nil {
		return x.ReplaceMode
	}
	return SwitchReplaceMode_SWITCH_REPLACE_MODE_UNSPECIFIED
}

func (x *Switch) GetManagementIp() string {
	if x != nil {
		return x.ManagementIp
	}
	return ""
}

func (x *Switch) GetManagementUser() string {
	if x != nil {
		return x.ManagementUser
	}
	return ""
}

func (x *Switch) GetConsoleCommand() string {
	if x != nil {
		return x.ConsoleCommand
	}
	return ""
}

func (x *Switch) GetSwitchNics() []*SwitchNic {
	if x != nil {
		return x.SwitchNics
	}
	return nil
}

func (x *Switch) GetOs() *SwitchOS {
	if x != nil {
		return x.Os
	}
	return nil
}

// SwitchOS holds information about the NOS and versions running on the switch
type SwitchOS struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Switch OS vendor identifies what NOS distribution is running on the switch, e.g. SONiC
	Vendor SwitchOSVendor `protobuf:"varint,1,opt,name=vendor,proto3,enum=metalstack.api.v2.SwitchOSVendor" json:"vendor,omitempty"`
	// Version specifies what NOS version is currently installed on the switch
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Metal core version is the currently running version of the metal-core
	MetalCoreVersion string `protobuf:"bytes,3,opt,name=metal_core_version,json=metalCoreVersion,proto3" json:"metal_core_version,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SwitchOS) Reset() {
	*x = SwitchOS{}
	mi := &file_metalstack_api_v2_switch_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwitchOS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchOS) ProtoMessage() {}

func (x *SwitchOS) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_switch_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchOS.ProtoReflect.Descriptor instead.
func (*SwitchOS) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_switch_proto_rawDescGZIP(), []int{1}
}

func (x *SwitchOS) GetVendor() SwitchOSVendor {
	if x != nil {
		return x.Vendor
	}
	return SwitchOSVendor_SWITCH_OS_VENDOR_UNSPECIFIED
}

func (x *SwitchOS) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SwitchOS) GetMetalCoreVersion() string {
	if x != nil {
		return x.MetalCoreVersion
	}
	return ""
}

// SwitchNic represents a front panel port and its configuration
type SwitchNic struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the switch port
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Identifier of the port
	Identifier string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// MAC address of the port
	Mac string `protobuf:"bytes,3,opt,name=mac,proto3" json:"mac,omitempty"`
	// VRF name if the port is bound in one
	Vrf *string `protobuf:"bytes,4,opt,name=vrf,proto3,oneof" json:"vrf,omitempty"`
	// Actual port status
	Actual SwitchPortStatus `protobuf:"varint,5,opt,name=actual,proto3,enum=metalstack.api.v2.SwitchPortStatus" json:"actual,omitempty"`
	// BGP filter optionally configured on a port
	BgpFilter *BGPFilter `protobuf:"bytes,6,opt,name=bgp_filter,json=bgpFilter,proto3,oneof" json:"bgp_filter,omitempty"`
	// BGP port state represents the current BGP status of the port
	BgpPortState  *SwitchBGPPortState `protobuf:"bytes,7,opt,name=bgp_port_state,json=bgpPortState,proto3,oneof" json:"bgp_port_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwitchNic) Reset() {
	*x = SwitchNic{}
	mi := &file_metalstack_api_v2_switch_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwitchNic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchNic) ProtoMessage() {}

func (x *SwitchNic) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_switch_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchNic.ProtoReflect.Descriptor instead.
func (*SwitchNic) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_switch_proto_rawDescGZIP(), []int{2}
}

func (x *SwitchNic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SwitchNic) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *SwitchNic) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *SwitchNic) GetVrf() string {
	if x != nil && x.Vrf != nil {
		return *x.Vrf
	}
	return ""
}

func (x *SwitchNic) GetActual() SwitchPortStatus {
	if x != nil {
		return x.Actual
	}
	return SwitchPortStatus_SWITCH_PORT_STATUS_UNSPECIFIED
}

func (x *SwitchNic) GetBgpFilter() *BGPFilter {
	if x != nil {
		return x.BgpFilter
	}
	return nil
}

func (x *SwitchNic) GetBgpPortState() *SwitchBGPPortState {
	if x != nil {
		return x.BgpPortState
	}
	return nil
}

// BGP filter can be used to restrict BGP based on CIDRs and VNIs
type BGPFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CIDRs for which to allow BGP
	Cidrs []string `protobuf:"bytes,1,rep,name=cidrs,proto3" json:"cidrs,omitempty"`
	// VNIs for which to allow BGP
	Vnis          []string `protobuf:"bytes,2,rep,name=vnis,proto3" json:"vnis,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BGPFilter) Reset() {
	*x = BGPFilter{}
	mi := &file_metalstack_api_v2_switch_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BGPFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BGPFilter) ProtoMessage() {}

func (x *BGPFilter) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_switch_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BGPFilter.ProtoReflect.Descriptor instead.
func (*BGPFilter) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_switch_proto_rawDescGZIP(), []int{3}
}

func (x *BGPFilter) GetCidrs() []string {
	if x != nil {
		return x.Cidrs
	}
	return nil
}

func (x *BGPFilter) GetVnis() []string {
	if x != nil {
		return x.Vnis
	}
	return nil
}

// SwitchBGPPortState holds information about the BGP state of a port
type SwitchBGPPortState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Neighbor of this port
	Neighbor string `protobuf:"bytes,1,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
	// Peer group of this port
	PeerGroup string `protobuf:"bytes,2,opt,name=peer_group,json=peerGroup,proto3" json:"peer_group,omitempty"`
	// VRF name of the VRF this port is bound to
	VrfName string `protobuf:"bytes,3,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	// BGP state of the connection on this port
	BgpState BGPState `protobuf:"varint,4,opt,name=bgp_state,json=bgpState,proto3,enum=metalstack.api.v2.BGPState" json:"bgp_state,omitempty"`
	// BGP timer up established reports the uptime of this port's BGP connection
	BgpTimerUpEstablished *durationpb.Duration `protobuf:"bytes,5,opt,name=bgp_timer_up_established,json=bgpTimerUpEstablished,proto3" json:"bgp_timer_up_established,omitempty"`
	// Sent prefix counter counts the prefixes sent by the switch on this port
	SentPrefixCounter uint64 `protobuf:"varint,6,opt,name=sent_prefix_counter,json=sentPrefixCounter,proto3" json:"sent_prefix_counter,omitempty"`
	// Accepted prefix counter counts the prefixes received on this port
	AcceptedPrefixCounter uint64 `protobuf:"varint,7,opt,name=accepted_prefix_counter,json=acceptedPrefixCounter,proto3" json:"accepted_prefix_counter,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SwitchBGPPortState) Reset() {
	*x = SwitchBGPPortState{}
	mi := &file_metalstack_api_v2_switch_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwitchBGPPortState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchBGPPortState) ProtoMessage() {}

func (x *SwitchBGPPortState) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_api_v2_switch_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchBGPPortState.ProtoReflect.Descriptor instead.
func (*SwitchBGPPortState) Descriptor() ([]byte, []int) {
	return file_metalstack_api_v2_switch_proto_rawDescGZIP(), []int{4}
}

func (x *SwitchBGPPortState) GetNeighbor() string {
	if x != nil {
		return x.Neighbor
	}
	return ""
}

func (x *SwitchBGPPortState) GetPeerGroup() string {
	if x != nil {
		return x.PeerGroup
	}
	return ""
}

func (x *SwitchBGPPortState) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *SwitchBGPPortState) GetBgpState() BGPState {
	if x != nil {
		return x.BgpState
	}
	return BGPState_BGP_STATE_UNSPECIFIED
}

func (x *SwitchBGPPortState) GetBgpTimerUpEstablished() *durationpb.Duration {
	if x != nil {
		return x.BgpTimerUpEstablished
	}
	return nil
}

func (x *SwitchBGPPortState) GetSentPrefixCounter() uint64 {
	if x != nil {
		return x.SentPrefixCounter
	}
	return 0
}

func (x *SwitchBGPPortState) GetAcceptedPrefixCounter() uint64 {
	if x != nil {
		return x.AcceptedPrefixCounter
	}
	return 0
}

var File_metalstack_api_v2_switch_proto protoreflect.FileDescriptor

const file_metalstack_api_v2_switch_proto_rawDesc = "" +
	"\n" +
	"\x1emetalstack/api/v2/switch.proto\x12\x11metalstack.api.v2\x1a\x1bbuf/validate/validate.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1emetalstack/api/v2/common.proto\"\x8b\x04\n" +
	"\x06Switch\x12\x1c\n" +
	"\x02id\x18\x01 \x01(\tB\f\xbaH\tr\a\x10\x02\x18\x80\x01h\x01R\x02id\x12,\n" +
	"\vdescription\x18\x02 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01R\vdescription\x12(\n" +
	"\arack_id\x18\x03 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\x00R\x06rackId\x88\x01\x01\x12(\n" +
	"\tpartition\x18\x04 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01R\tpartition\x12Q\n" +
	"\freplace_mode\x18\x06 \x01(\x0e2$.metalstack.api.v2.SwitchReplaceModeB\b\xbaH\x05\x82\x01\x02\x10\x01R\vreplaceMode\x12,\n" +
	"\rmanagement_ip\x18\a \x01(\tB\a\xbaH\x04r\x02p\x01R\fmanagementIp\x123\n" +
	"\x0fmanagement_user\x18\b \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01R\x0emanagementUser\x123\n" +
	"\x0fconsole_command\x18\t \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01R\x0econsoleCommand\x12=\n" +
	"\vswitch_nics\x18\n" +
	" \x03(\v2\x1c.metalstack.api.v2.SwitchNicR\n" +
	"switchNics\x12+\n" +
	"\x02os\x18\v \x01(\v2\x1b.metalstack.api.v2.SwitchOSR\x02osB\n" +
	"\n" +
	"\b_rack_id\"\xaf\x01\n" +
	"\bSwitchOS\x12C\n" +
	"\x06vendor\x18\x01 \x01(\x0e2!.metalstack.api.v2.SwitchOSVendorB\b\xbaH\x05\x82\x01\x02\x10\x01R\x06vendor\x12$\n" +
	"\aversion\x18\x02 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01R\aversion\x128\n" +
	"\x12metal_core_version\x18\x03 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01R\x10metalCoreVersion\"\xc2\x03\n" +
	"\tSwitchNic\x12\x1e\n" +
	"\x04name\x18\x01 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01R\x04name\x12*\n" +
	"\n" +
	"identifier\x18\x02 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01R\n" +
	"identifier\x12A\n" +
	"\x03mac\x18\x03 \x01(\tB/\xbaH,r*2(^([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})$R\x03mac\x12!\n" +
	"\x03vrf\x18\x04 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01H\x00R\x03vrf\x88\x01\x01\x12E\n" +
	"\x06actual\x18\x05 \x01(\x0e2#.metalstack.api.v2.SwitchPortStatusB\b\xbaH\x05\x82\x01\x02\x10\x01R\x06actual\x12@\n" +
	"\n" +
	"bgp_filter\x18\x06 \x01(\v2\x1c.metalstack.api.v2.BGPFilterH\x01R\tbgpFilter\x88\x01\x01\x12P\n" +
	"\x0ebgp_port_state\x18\a \x01(\v2%.metalstack.api.v2.SwitchBGPPortStateH\x02R\fbgpPortState\x88\x01\x01B\x06\n" +
	"\x04_vrfB\r\n" +
	"\v_bgp_filterB\x11\n" +
	"\x0f_bgp_port_state\"\x92\x01\n" +
	"\tBGPFilter\x12\x14\n" +
	"\x05cidrs\x18\x01 \x03(\tR\x05cidrs\x12#\n" +
	"\x04vnis\x18\x02 \x03(\tB\x0f\xbaH\f\x92\x01\t\"\ar\x05\x10\x02\x18\x80\x01R\x04vnis:J\xbaHG\x1aE\n" +
	"\x05cidrs\x12\x19given cidrs must be valid\x1a!this.cidrs.all(m, m.isIpPrefix())\"\x8e\x03\n" +
	"\x12SwitchBGPPortState\x12&\n" +
	"\bneighbor\x18\x01 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01R\bneighbor\x12)\n" +
	"\n" +
	"peer_group\x18\x02 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01R\tpeerGroup\x12%\n" +
	"\bvrf_name\x18\x03 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x02\x18\x80\x01R\avrfName\x12B\n" +
	"\tbgp_state\x18\x04 \x01(\x0e2\x1b.metalstack.api.v2.BGPStateB\b\xbaH\x05\x82\x01\x02\x10\x01R\bbgpState\x12R\n" +
	"\x18bgp_timer_up_established\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\x15bgpTimerUpEstablished\x12.\n" +
	"\x13sent_prefix_counter\x18\x06 \x01(\x04R\x11sentPrefixCounter\x126\n" +
	"\x17accepted_prefix_counter\x18\a \x01(\x04R\x15acceptedPrefixCounter*\x8b\x02\n" +
	"\bBGPState\x12\x19\n" +
	"\x15BGP_STATE_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x0eBGP_STATE_IDLE\x10\x01\x1a\b\x82\xb2\x19\x04idle\x12\"\n" +
	"\x11BGP_STATE_CONNECT\x10\x02\x1a\v\x82\xb2\x19\aconnect\x12 \n" +
	"\x10BGP_STATE_ACTIVE\x10\x03\x1a\n" +
	"\x82\xb2\x19\x06active\x12&\n" +
	"\x13BGP_STATE_OPEN_SENT\x10\x04\x1a\r\x82\xb2\x19\topen-sent\x12,\n" +
	"\x16BGP_STATE_OPEN_CONFIRM\x10\x05\x1a\x10\x82\xb2\x19\fopen-confirm\x12*\n" +
	"\x15BGP_STATE_ESTABLISHED\x10\x06\x1a\x0f\x82\xb2\x19\vestablished*\x9c\x01\n" +
	"\x11SwitchReplaceMode\x12#\n" +
	"\x1fSWITCH_REPLACE_MODE_UNSPECIFIED\x10\x00\x12,\n" +
	"\x1bSWITCH_REPLACE_MODE_REPLACE\x10\x01\x1a\v\x82\xb2\x19\areplace\x124\n" +
	"\x1fSWITCH_REPLACE_MODE_OPERATIONAL\x10\x02\x1a\x0f\x82\xb2\x19\voperational*\x84\x01\n" +
	"\x0eSwitchOSVendor\x12 \n" +
	"\x1cSWITCH_OS_VENDOR_UNSPECIFIED\x10\x00\x12)\n" +
	"\x18SWITCH_OS_VENDOR_CUMULUS\x10\x01\x1a\v\x82\xb2\x19\aCumulus\x12%\n" +
	"\x16SWITCH_OS_VENDOR_SONIC\x10\x02\x1a\t\x82\xb2\x19\x05SONiC*\x80\x01\n" +
	"\x10SwitchPortStatus\x12\"\n" +
	"\x1eSWITCH_PORT_STATUS_UNSPECIFIED\x10\x00\x12!\n" +
	"\x15SWITCH_PORT_STATUS_UP\x10\x01\x1a\x06\x82\xb2\x19\x02up\x12%\n" +
	"\x17SWITCH_PORT_STATUS_DOWN\x10\x02\x1a\b\x82\xb2\x19\x04downB\xc1\x01\n" +
	"\x15com.metalstack.api.v2B\vSwitchProtoP\x01Z5github.com/metal-stack/api/go/metalstack/api/v2;apiv2\xa2\x02\x03MAX\xaa\x02\x11Metalstack.Api.V2\xca\x02\x11Metalstack\\Api\\V2\xe2\x02\x1dMetalstack\\Api\\V2\\GPBMetadata\xea\x02\x13Metalstack::Api::V2b\x06proto3"

var (
	file_metalstack_api_v2_switch_proto_rawDescOnce sync.Once
	file_metalstack_api_v2_switch_proto_rawDescData []byte
)

func file_metalstack_api_v2_switch_proto_rawDescGZIP() []byte {
	file_metalstack_api_v2_switch_proto_rawDescOnce.Do(func() {
		file_metalstack_api_v2_switch_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_metalstack_api_v2_switch_proto_rawDesc), len(file_metalstack_api_v2_switch_proto_rawDesc)))
	})
	return file_metalstack_api_v2_switch_proto_rawDescData
}

var file_metalstack_api_v2_switch_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_metalstack_api_v2_switch_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_metalstack_api_v2_switch_proto_goTypes = []any{
	(BGPState)(0),               // 0: metalstack.api.v2.BGPState
	(SwitchReplaceMode)(0),      // 1: metalstack.api.v2.SwitchReplaceMode
	(SwitchOSVendor)(0),         // 2: metalstack.api.v2.SwitchOSVendor
	(SwitchPortStatus)(0),       // 3: metalstack.api.v2.SwitchPortStatus
	(*Switch)(nil),              // 4: metalstack.api.v2.Switch
	(*SwitchOS)(nil),            // 5: metalstack.api.v2.SwitchOS
	(*SwitchNic)(nil),           // 6: metalstack.api.v2.SwitchNic
	(*BGPFilter)(nil),           // 7: metalstack.api.v2.BGPFilter
	(*SwitchBGPPortState)(nil),  // 8: metalstack.api.v2.SwitchBGPPortState
	(*durationpb.Duration)(nil), // 9: google.protobuf.Duration
}
var file_metalstack_api_v2_switch_proto_depIdxs = []int32{
	1, // 0: metalstack.api.v2.Switch.replace_mode:type_name -> metalstack.api.v2.SwitchReplaceMode
	6, // 1: metalstack.api.v2.Switch.switch_nics:type_name -> metalstack.api.v2.SwitchNic
	5, // 2: metalstack.api.v2.Switch.os:type_name -> metalstack.api.v2.SwitchOS
	2, // 3: metalstack.api.v2.SwitchOS.vendor:type_name -> metalstack.api.v2.SwitchOSVendor
	3, // 4: metalstack.api.v2.SwitchNic.actual:type_name -> metalstack.api.v2.SwitchPortStatus
	7, // 5: metalstack.api.v2.SwitchNic.bgp_filter:type_name -> metalstack.api.v2.BGPFilter
	8, // 6: metalstack.api.v2.SwitchNic.bgp_port_state:type_name -> metalstack.api.v2.SwitchBGPPortState
	0, // 7: metalstack.api.v2.SwitchBGPPortState.bgp_state:type_name -> metalstack.api.v2.BGPState
	9, // 8: metalstack.api.v2.SwitchBGPPortState.bgp_timer_up_established:type_name -> google.protobuf.Duration
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_metalstack_api_v2_switch_proto_init() }
func file_metalstack_api_v2_switch_proto_init() {
	if File_metalstack_api_v2_switch_proto != nil {
		return
	}
	file_metalstack_api_v2_common_proto_init()
	file_metalstack_api_v2_switch_proto_msgTypes[0].OneofWrappers = []any{}
	file_metalstack_api_v2_switch_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_metalstack_api_v2_switch_proto_rawDesc), len(file_metalstack_api_v2_switch_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_metalstack_api_v2_switch_proto_goTypes,
		DependencyIndexes: file_metalstack_api_v2_switch_proto_depIdxs,
		EnumInfos:         file_metalstack_api_v2_switch_proto_enumTypes,
		MessageInfos:      file_metalstack_api_v2_switch_proto_msgTypes,
	}.Build()
	File_metalstack_api_v2_switch_proto = out.File
	file_metalstack_api_v2_switch_proto_goTypes = nil
	file_metalstack_api_v2_switch_proto_depIdxs = nil
}
