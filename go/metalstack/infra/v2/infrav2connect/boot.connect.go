// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: metalstack/infra/v2/boot.proto

package infrav2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/metal-stack/api/go/metalstack/infra/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BootServiceName is the fully-qualified name of the BootService service.
	BootServiceName = "metalstack.infra.v2.BootService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BootServiceDhcpProcedure is the fully-qualified name of the BootService's Dhcp RPC.
	BootServiceDhcpProcedure = "/metalstack.infra.v2.BootService/Dhcp"
	// BootServiceBootProcedure is the fully-qualified name of the BootService's Boot RPC.
	BootServiceBootProcedure = "/metalstack.infra.v2.BootService/Boot"
	// BootServiceSuperUserPasswordProcedure is the fully-qualified name of the BootService's
	// SuperUserPassword RPC.
	BootServiceSuperUserPasswordProcedure = "/metalstack.infra.v2.BootService/SuperUserPassword"
	// BootServiceRegisterProcedure is the fully-qualified name of the BootService's Register RPC.
	BootServiceRegisterProcedure = "/metalstack.infra.v2.BootService/Register"
	// BootServiceWaitProcedure is the fully-qualified name of the BootService's Wait RPC.
	BootServiceWaitProcedure = "/metalstack.infra.v2.BootService/Wait"
	// BootServiceReportProcedure is the fully-qualified name of the BootService's Report RPC.
	BootServiceReportProcedure = "/metalstack.infra.v2.BootService/Report"
)

// BootServiceClient is a client for the metalstack.infra.v2.BootService service.
type BootServiceClient interface {
	// Dhcp is the first dhcp request (option 97). A ProvisioningEventPXEBooting is fired
	Dhcp(context.Context, *connect.Request[v2.BootServiceDhcpRequest]) (*connect.Response[v2.BootServiceDhcpResponse], error)
	// Boot is called from pixie once the machine got the first dhcp response and ipxie asks for subsequent kernel and initrd
	Boot(context.Context, *connect.Request[v2.BootServiceBootRequest]) (*connect.Response[v2.BootServiceBootResponse], error)
	// SuperUserPassword metal-hammer takes the configured root password for the bmc from metal-api and configure the bmc accordingly
	SuperUserPassword(context.Context, *connect.Request[v2.BootServiceSuperUserPasswordRequest]) (*connect.Response[v2.BootServiceSuperUserPasswordResponse], error)
	// Register is called from metal-hammer after hardware inventory is finished, tells metal-api all glory details about that machine
	Register(context.Context, *connect.Request[v2.BootServiceRegisterRequest]) (*connect.Response[v2.BootServiceRegisterResponse], error)
	// Wait is a hanging call that waits until the machine gets allocated by a user
	Wait(context.Context, *connect.Request[v2.BootServiceWaitRequest]) (*connect.ServerStreamForClient[v2.BootServiceWaitResponse], error)
	// Report tells metal-api installation was either successful or failed
	Report(context.Context, *connect.Request[v2.BootServiceReportRequest]) (*connect.Response[v2.BootServiceReportResponse], error)
}

// NewBootServiceClient constructs a client for the metalstack.infra.v2.BootService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBootServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BootServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	bootServiceMethods := v2.File_metalstack_infra_v2_boot_proto.Services().ByName("BootService").Methods()
	return &bootServiceClient{
		dhcp: connect.NewClient[v2.BootServiceDhcpRequest, v2.BootServiceDhcpResponse](
			httpClient,
			baseURL+BootServiceDhcpProcedure,
			connect.WithSchema(bootServiceMethods.ByName("Dhcp")),
			connect.WithClientOptions(opts...),
		),
		boot: connect.NewClient[v2.BootServiceBootRequest, v2.BootServiceBootResponse](
			httpClient,
			baseURL+BootServiceBootProcedure,
			connect.WithSchema(bootServiceMethods.ByName("Boot")),
			connect.WithClientOptions(opts...),
		),
		superUserPassword: connect.NewClient[v2.BootServiceSuperUserPasswordRequest, v2.BootServiceSuperUserPasswordResponse](
			httpClient,
			baseURL+BootServiceSuperUserPasswordProcedure,
			connect.WithSchema(bootServiceMethods.ByName("SuperUserPassword")),
			connect.WithClientOptions(opts...),
		),
		register: connect.NewClient[v2.BootServiceRegisterRequest, v2.BootServiceRegisterResponse](
			httpClient,
			baseURL+BootServiceRegisterProcedure,
			connect.WithSchema(bootServiceMethods.ByName("Register")),
			connect.WithClientOptions(opts...),
		),
		wait: connect.NewClient[v2.BootServiceWaitRequest, v2.BootServiceWaitResponse](
			httpClient,
			baseURL+BootServiceWaitProcedure,
			connect.WithSchema(bootServiceMethods.ByName("Wait")),
			connect.WithClientOptions(opts...),
		),
		report: connect.NewClient[v2.BootServiceReportRequest, v2.BootServiceReportResponse](
			httpClient,
			baseURL+BootServiceReportProcedure,
			connect.WithSchema(bootServiceMethods.ByName("Report")),
			connect.WithClientOptions(opts...),
		),
	}
}

// bootServiceClient implements BootServiceClient.
type bootServiceClient struct {
	dhcp              *connect.Client[v2.BootServiceDhcpRequest, v2.BootServiceDhcpResponse]
	boot              *connect.Client[v2.BootServiceBootRequest, v2.BootServiceBootResponse]
	superUserPassword *connect.Client[v2.BootServiceSuperUserPasswordRequest, v2.BootServiceSuperUserPasswordResponse]
	register          *connect.Client[v2.BootServiceRegisterRequest, v2.BootServiceRegisterResponse]
	wait              *connect.Client[v2.BootServiceWaitRequest, v2.BootServiceWaitResponse]
	report            *connect.Client[v2.BootServiceReportRequest, v2.BootServiceReportResponse]
}

// Dhcp calls metalstack.infra.v2.BootService.Dhcp.
func (c *bootServiceClient) Dhcp(ctx context.Context, req *connect.Request[v2.BootServiceDhcpRequest]) (*connect.Response[v2.BootServiceDhcpResponse], error) {
	return c.dhcp.CallUnary(ctx, req)
}

// Boot calls metalstack.infra.v2.BootService.Boot.
func (c *bootServiceClient) Boot(ctx context.Context, req *connect.Request[v2.BootServiceBootRequest]) (*connect.Response[v2.BootServiceBootResponse], error) {
	return c.boot.CallUnary(ctx, req)
}

// SuperUserPassword calls metalstack.infra.v2.BootService.SuperUserPassword.
func (c *bootServiceClient) SuperUserPassword(ctx context.Context, req *connect.Request[v2.BootServiceSuperUserPasswordRequest]) (*connect.Response[v2.BootServiceSuperUserPasswordResponse], error) {
	return c.superUserPassword.CallUnary(ctx, req)
}

// Register calls metalstack.infra.v2.BootService.Register.
func (c *bootServiceClient) Register(ctx context.Context, req *connect.Request[v2.BootServiceRegisterRequest]) (*connect.Response[v2.BootServiceRegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// Wait calls metalstack.infra.v2.BootService.Wait.
func (c *bootServiceClient) Wait(ctx context.Context, req *connect.Request[v2.BootServiceWaitRequest]) (*connect.ServerStreamForClient[v2.BootServiceWaitResponse], error) {
	return c.wait.CallServerStream(ctx, req)
}

// Report calls metalstack.infra.v2.BootService.Report.
func (c *bootServiceClient) Report(ctx context.Context, req *connect.Request[v2.BootServiceReportRequest]) (*connect.Response[v2.BootServiceReportResponse], error) {
	return c.report.CallUnary(ctx, req)
}

// BootServiceHandler is an implementation of the metalstack.infra.v2.BootService service.
type BootServiceHandler interface {
	// Dhcp is the first dhcp request (option 97). A ProvisioningEventPXEBooting is fired
	Dhcp(context.Context, *connect.Request[v2.BootServiceDhcpRequest]) (*connect.Response[v2.BootServiceDhcpResponse], error)
	// Boot is called from pixie once the machine got the first dhcp response and ipxie asks for subsequent kernel and initrd
	Boot(context.Context, *connect.Request[v2.BootServiceBootRequest]) (*connect.Response[v2.BootServiceBootResponse], error)
	// SuperUserPassword metal-hammer takes the configured root password for the bmc from metal-api and configure the bmc accordingly
	SuperUserPassword(context.Context, *connect.Request[v2.BootServiceSuperUserPasswordRequest]) (*connect.Response[v2.BootServiceSuperUserPasswordResponse], error)
	// Register is called from metal-hammer after hardware inventory is finished, tells metal-api all glory details about that machine
	Register(context.Context, *connect.Request[v2.BootServiceRegisterRequest]) (*connect.Response[v2.BootServiceRegisterResponse], error)
	// Wait is a hanging call that waits until the machine gets allocated by a user
	Wait(context.Context, *connect.Request[v2.BootServiceWaitRequest], *connect.ServerStream[v2.BootServiceWaitResponse]) error
	// Report tells metal-api installation was either successful or failed
	Report(context.Context, *connect.Request[v2.BootServiceReportRequest]) (*connect.Response[v2.BootServiceReportResponse], error)
}

// NewBootServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBootServiceHandler(svc BootServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	bootServiceMethods := v2.File_metalstack_infra_v2_boot_proto.Services().ByName("BootService").Methods()
	bootServiceDhcpHandler := connect.NewUnaryHandler(
		BootServiceDhcpProcedure,
		svc.Dhcp,
		connect.WithSchema(bootServiceMethods.ByName("Dhcp")),
		connect.WithHandlerOptions(opts...),
	)
	bootServiceBootHandler := connect.NewUnaryHandler(
		BootServiceBootProcedure,
		svc.Boot,
		connect.WithSchema(bootServiceMethods.ByName("Boot")),
		connect.WithHandlerOptions(opts...),
	)
	bootServiceSuperUserPasswordHandler := connect.NewUnaryHandler(
		BootServiceSuperUserPasswordProcedure,
		svc.SuperUserPassword,
		connect.WithSchema(bootServiceMethods.ByName("SuperUserPassword")),
		connect.WithHandlerOptions(opts...),
	)
	bootServiceRegisterHandler := connect.NewUnaryHandler(
		BootServiceRegisterProcedure,
		svc.Register,
		connect.WithSchema(bootServiceMethods.ByName("Register")),
		connect.WithHandlerOptions(opts...),
	)
	bootServiceWaitHandler := connect.NewServerStreamHandler(
		BootServiceWaitProcedure,
		svc.Wait,
		connect.WithSchema(bootServiceMethods.ByName("Wait")),
		connect.WithHandlerOptions(opts...),
	)
	bootServiceReportHandler := connect.NewUnaryHandler(
		BootServiceReportProcedure,
		svc.Report,
		connect.WithSchema(bootServiceMethods.ByName("Report")),
		connect.WithHandlerOptions(opts...),
	)
	return "/metalstack.infra.v2.BootService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BootServiceDhcpProcedure:
			bootServiceDhcpHandler.ServeHTTP(w, r)
		case BootServiceBootProcedure:
			bootServiceBootHandler.ServeHTTP(w, r)
		case BootServiceSuperUserPasswordProcedure:
			bootServiceSuperUserPasswordHandler.ServeHTTP(w, r)
		case BootServiceRegisterProcedure:
			bootServiceRegisterHandler.ServeHTTP(w, r)
		case BootServiceWaitProcedure:
			bootServiceWaitHandler.ServeHTTP(w, r)
		case BootServiceReportProcedure:
			bootServiceReportHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBootServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBootServiceHandler struct{}

func (UnimplementedBootServiceHandler) Dhcp(context.Context, *connect.Request[v2.BootServiceDhcpRequest]) (*connect.Response[v2.BootServiceDhcpResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.infra.v2.BootService.Dhcp is not implemented"))
}

func (UnimplementedBootServiceHandler) Boot(context.Context, *connect.Request[v2.BootServiceBootRequest]) (*connect.Response[v2.BootServiceBootResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.infra.v2.BootService.Boot is not implemented"))
}

func (UnimplementedBootServiceHandler) SuperUserPassword(context.Context, *connect.Request[v2.BootServiceSuperUserPasswordRequest]) (*connect.Response[v2.BootServiceSuperUserPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.infra.v2.BootService.SuperUserPassword is not implemented"))
}

func (UnimplementedBootServiceHandler) Register(context.Context, *connect.Request[v2.BootServiceRegisterRequest]) (*connect.Response[v2.BootServiceRegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.infra.v2.BootService.Register is not implemented"))
}

func (UnimplementedBootServiceHandler) Wait(context.Context, *connect.Request[v2.BootServiceWaitRequest], *connect.ServerStream[v2.BootServiceWaitResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.infra.v2.BootService.Wait is not implemented"))
}

func (UnimplementedBootServiceHandler) Report(context.Context, *connect.Request[v2.BootServiceReportRequest]) (*connect.Response[v2.BootServiceReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.infra.v2.BootService.Report is not implemented"))
}
