// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: metalstack/infra/v2/event.proto

package infrav2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/metal-stack/api/go/metalstack/infra/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EventServiceName is the fully-qualified name of the EventService service.
	EventServiceName = "metalstack.infra.v2.EventService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EventServiceSendProcedure is the fully-qualified name of the EventService's Send RPC.
	EventServiceSendProcedure = "/metalstack.infra.v2.EventService/Send"
	// EventServiceSendMultiProcedure is the fully-qualified name of the EventService's SendMulti RPC.
	EventServiceSendMultiProcedure = "/metalstack.infra.v2.EventService/SendMulti"
)

// EventServiceClient is a client for the metalstack.infra.v2.EventService service.
type EventServiceClient interface {
	// Send an event of a single machine to the api
	Send(context.Context, *connect.Request[v2.EventServiceSendRequest]) (*connect.Response[v2.EventServiceSendResponse], error)
	// SendMulti sends events of a bunch of machines in one request to the api
	SendMulti(context.Context, *connect.Request[v2.EventServiceSendMultiRequest]) (*connect.Response[v2.EventServiceSendMultiResponse], error)
}

// NewEventServiceClient constructs a client for the metalstack.infra.v2.EventService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEventServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EventServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	eventServiceMethods := v2.File_metalstack_infra_v2_event_proto.Services().ByName("EventService").Methods()
	return &eventServiceClient{
		send: connect.NewClient[v2.EventServiceSendRequest, v2.EventServiceSendResponse](
			httpClient,
			baseURL+EventServiceSendProcedure,
			connect.WithSchema(eventServiceMethods.ByName("Send")),
			connect.WithClientOptions(opts...),
		),
		sendMulti: connect.NewClient[v2.EventServiceSendMultiRequest, v2.EventServiceSendMultiResponse](
			httpClient,
			baseURL+EventServiceSendMultiProcedure,
			connect.WithSchema(eventServiceMethods.ByName("SendMulti")),
			connect.WithClientOptions(opts...),
		),
	}
}

// eventServiceClient implements EventServiceClient.
type eventServiceClient struct {
	send      *connect.Client[v2.EventServiceSendRequest, v2.EventServiceSendResponse]
	sendMulti *connect.Client[v2.EventServiceSendMultiRequest, v2.EventServiceSendMultiResponse]
}

// Send calls metalstack.infra.v2.EventService.Send.
func (c *eventServiceClient) Send(ctx context.Context, req *connect.Request[v2.EventServiceSendRequest]) (*connect.Response[v2.EventServiceSendResponse], error) {
	return c.send.CallUnary(ctx, req)
}

// SendMulti calls metalstack.infra.v2.EventService.SendMulti.
func (c *eventServiceClient) SendMulti(ctx context.Context, req *connect.Request[v2.EventServiceSendMultiRequest]) (*connect.Response[v2.EventServiceSendMultiResponse], error) {
	return c.sendMulti.CallUnary(ctx, req)
}

// EventServiceHandler is an implementation of the metalstack.infra.v2.EventService service.
type EventServiceHandler interface {
	// Send an event of a single machine to the api
	Send(context.Context, *connect.Request[v2.EventServiceSendRequest]) (*connect.Response[v2.EventServiceSendResponse], error)
	// SendMulti sends events of a bunch of machines in one request to the api
	SendMulti(context.Context, *connect.Request[v2.EventServiceSendMultiRequest]) (*connect.Response[v2.EventServiceSendMultiResponse], error)
}

// NewEventServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEventServiceHandler(svc EventServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	eventServiceMethods := v2.File_metalstack_infra_v2_event_proto.Services().ByName("EventService").Methods()
	eventServiceSendHandler := connect.NewUnaryHandler(
		EventServiceSendProcedure,
		svc.Send,
		connect.WithSchema(eventServiceMethods.ByName("Send")),
		connect.WithHandlerOptions(opts...),
	)
	eventServiceSendMultiHandler := connect.NewUnaryHandler(
		EventServiceSendMultiProcedure,
		svc.SendMulti,
		connect.WithSchema(eventServiceMethods.ByName("SendMulti")),
		connect.WithHandlerOptions(opts...),
	)
	return "/metalstack.infra.v2.EventService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EventServiceSendProcedure:
			eventServiceSendHandler.ServeHTTP(w, r)
		case EventServiceSendMultiProcedure:
			eventServiceSendMultiHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEventServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEventServiceHandler struct{}

func (UnimplementedEventServiceHandler) Send(context.Context, *connect.Request[v2.EventServiceSendRequest]) (*connect.Response[v2.EventServiceSendResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.infra.v2.EventService.Send is not implemented"))
}

func (UnimplementedEventServiceHandler) SendMulti(context.Context, *connect.Request[v2.EventServiceSendMultiRequest]) (*connect.Response[v2.EventServiceSendMultiResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.infra.v2.EventService.SendMulti is not implemented"))
}
