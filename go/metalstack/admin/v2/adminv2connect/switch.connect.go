// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: metalstack/admin/v2/switch.proto

package adminv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/metal-stack/api/go/metalstack/admin/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SwitchServiceName is the fully-qualified name of the SwitchService service.
	SwitchServiceName = "metalstack.admin.v2.SwitchService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SwitchServiceUpdateProcedure is the fully-qualified name of the SwitchService's Update RPC.
	SwitchServiceUpdateProcedure = "/metalstack.admin.v2.SwitchService/Update"
	// SwitchServiceDeleteProcedure is the fully-qualified name of the SwitchService's Delete RPC.
	SwitchServiceDeleteProcedure = "/metalstack.admin.v2.SwitchService/Delete"
	// SwitchServiceMigrateProcedure is the fully-qualified name of the SwitchService's Migrate RPC.
	SwitchServiceMigrateProcedure = "/metalstack.admin.v2.SwitchService/Migrate"
	// SwitchServicePortProcedure is the fully-qualified name of the SwitchService's Port RPC.
	SwitchServicePortProcedure = "/metalstack.admin.v2.SwitchService/Port"
)

// SwitchServiceClient is a client for the metalstack.admin.v2.SwitchService service.
type SwitchServiceClient interface {
	// Update a switch.
	Update(context.Context, *connect.Request[v2.SwitchServiceUpdateRequest]) (*connect.Response[v2.SwitchServiceUpdateResponse], error)
	// Delete a switch.
	Delete(context.Context, *connect.Request[v2.SwitchServiceDeleteRequest]) (*connect.Response[v2.SwitchServiceDeleteResponse], error)
	// Migrate a switch.
	Migrate(context.Context, *connect.Request[v2.SwitchServiceMigrateRequest]) (*connect.Response[v2.SwitchServiceMigrateResponse], error)
	// Port set the port status of a switch port.
	Port(context.Context, *connect.Request[v2.SwitchServicePortRequest]) (*connect.Response[v2.SwitchServicePortResponse], error)
}

// NewSwitchServiceClient constructs a client for the metalstack.admin.v2.SwitchService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSwitchServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SwitchServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	switchServiceMethods := v2.File_metalstack_admin_v2_switch_proto.Services().ByName("SwitchService").Methods()
	return &switchServiceClient{
		update: connect.NewClient[v2.SwitchServiceUpdateRequest, v2.SwitchServiceUpdateResponse](
			httpClient,
			baseURL+SwitchServiceUpdateProcedure,
			connect.WithSchema(switchServiceMethods.ByName("Update")),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v2.SwitchServiceDeleteRequest, v2.SwitchServiceDeleteResponse](
			httpClient,
			baseURL+SwitchServiceDeleteProcedure,
			connect.WithSchema(switchServiceMethods.ByName("Delete")),
			connect.WithClientOptions(opts...),
		),
		migrate: connect.NewClient[v2.SwitchServiceMigrateRequest, v2.SwitchServiceMigrateResponse](
			httpClient,
			baseURL+SwitchServiceMigrateProcedure,
			connect.WithSchema(switchServiceMethods.ByName("Migrate")),
			connect.WithClientOptions(opts...),
		),
		port: connect.NewClient[v2.SwitchServicePortRequest, v2.SwitchServicePortResponse](
			httpClient,
			baseURL+SwitchServicePortProcedure,
			connect.WithSchema(switchServiceMethods.ByName("Port")),
			connect.WithClientOptions(opts...),
		),
	}
}

// switchServiceClient implements SwitchServiceClient.
type switchServiceClient struct {
	update  *connect.Client[v2.SwitchServiceUpdateRequest, v2.SwitchServiceUpdateResponse]
	delete  *connect.Client[v2.SwitchServiceDeleteRequest, v2.SwitchServiceDeleteResponse]
	migrate *connect.Client[v2.SwitchServiceMigrateRequest, v2.SwitchServiceMigrateResponse]
	port    *connect.Client[v2.SwitchServicePortRequest, v2.SwitchServicePortResponse]
}

// Update calls metalstack.admin.v2.SwitchService.Update.
func (c *switchServiceClient) Update(ctx context.Context, req *connect.Request[v2.SwitchServiceUpdateRequest]) (*connect.Response[v2.SwitchServiceUpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls metalstack.admin.v2.SwitchService.Delete.
func (c *switchServiceClient) Delete(ctx context.Context, req *connect.Request[v2.SwitchServiceDeleteRequest]) (*connect.Response[v2.SwitchServiceDeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// Migrate calls metalstack.admin.v2.SwitchService.Migrate.
func (c *switchServiceClient) Migrate(ctx context.Context, req *connect.Request[v2.SwitchServiceMigrateRequest]) (*connect.Response[v2.SwitchServiceMigrateResponse], error) {
	return c.migrate.CallUnary(ctx, req)
}

// Port calls metalstack.admin.v2.SwitchService.Port.
func (c *switchServiceClient) Port(ctx context.Context, req *connect.Request[v2.SwitchServicePortRequest]) (*connect.Response[v2.SwitchServicePortResponse], error) {
	return c.port.CallUnary(ctx, req)
}

// SwitchServiceHandler is an implementation of the metalstack.admin.v2.SwitchService service.
type SwitchServiceHandler interface {
	// Update a switch.
	Update(context.Context, *connect.Request[v2.SwitchServiceUpdateRequest]) (*connect.Response[v2.SwitchServiceUpdateResponse], error)
	// Delete a switch.
	Delete(context.Context, *connect.Request[v2.SwitchServiceDeleteRequest]) (*connect.Response[v2.SwitchServiceDeleteResponse], error)
	// Migrate a switch.
	Migrate(context.Context, *connect.Request[v2.SwitchServiceMigrateRequest]) (*connect.Response[v2.SwitchServiceMigrateResponse], error)
	// Port set the port status of a switch port.
	Port(context.Context, *connect.Request[v2.SwitchServicePortRequest]) (*connect.Response[v2.SwitchServicePortResponse], error)
}

// NewSwitchServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSwitchServiceHandler(svc SwitchServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	switchServiceMethods := v2.File_metalstack_admin_v2_switch_proto.Services().ByName("SwitchService").Methods()
	switchServiceUpdateHandler := connect.NewUnaryHandler(
		SwitchServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(switchServiceMethods.ByName("Update")),
		connect.WithHandlerOptions(opts...),
	)
	switchServiceDeleteHandler := connect.NewUnaryHandler(
		SwitchServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(switchServiceMethods.ByName("Delete")),
		connect.WithHandlerOptions(opts...),
	)
	switchServiceMigrateHandler := connect.NewUnaryHandler(
		SwitchServiceMigrateProcedure,
		svc.Migrate,
		connect.WithSchema(switchServiceMethods.ByName("Migrate")),
		connect.WithHandlerOptions(opts...),
	)
	switchServicePortHandler := connect.NewUnaryHandler(
		SwitchServicePortProcedure,
		svc.Port,
		connect.WithSchema(switchServiceMethods.ByName("Port")),
		connect.WithHandlerOptions(opts...),
	)
	return "/metalstack.admin.v2.SwitchService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SwitchServiceUpdateProcedure:
			switchServiceUpdateHandler.ServeHTTP(w, r)
		case SwitchServiceDeleteProcedure:
			switchServiceDeleteHandler.ServeHTTP(w, r)
		case SwitchServiceMigrateProcedure:
			switchServiceMigrateHandler.ServeHTTP(w, r)
		case SwitchServicePortProcedure:
			switchServicePortHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSwitchServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSwitchServiceHandler struct{}

func (UnimplementedSwitchServiceHandler) Update(context.Context, *connect.Request[v2.SwitchServiceUpdateRequest]) (*connect.Response[v2.SwitchServiceUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.admin.v2.SwitchService.Update is not implemented"))
}

func (UnimplementedSwitchServiceHandler) Delete(context.Context, *connect.Request[v2.SwitchServiceDeleteRequest]) (*connect.Response[v2.SwitchServiceDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.admin.v2.SwitchService.Delete is not implemented"))
}

func (UnimplementedSwitchServiceHandler) Migrate(context.Context, *connect.Request[v2.SwitchServiceMigrateRequest]) (*connect.Response[v2.SwitchServiceMigrateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.admin.v2.SwitchService.Migrate is not implemented"))
}

func (UnimplementedSwitchServiceHandler) Port(context.Context, *connect.Request[v2.SwitchServicePortRequest]) (*connect.Response[v2.SwitchServicePortResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.admin.v2.SwitchService.Port is not implemented"))
}
