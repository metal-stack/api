// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: metalstack/admin/v2/filesystem.proto

package adminv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/metal-stack/api/go/metalstack/admin/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FilesystemServiceName is the fully-qualified name of the FilesystemService service.
	FilesystemServiceName = "metalstack.admin.v2.FilesystemService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FilesystemServiceCreateProcedure is the fully-qualified name of the FilesystemService's Create
	// RPC.
	FilesystemServiceCreateProcedure = "/metalstack.admin.v2.FilesystemService/Create"
	// FilesystemServiceUpdateProcedure is the fully-qualified name of the FilesystemService's Update
	// RPC.
	FilesystemServiceUpdateProcedure = "/metalstack.admin.v2.FilesystemService/Update"
	// FilesystemServiceDeleteProcedure is the fully-qualified name of the FilesystemService's Delete
	// RPC.
	FilesystemServiceDeleteProcedure = "/metalstack.admin.v2.FilesystemService/Delete"
)

// FilesystemServiceClient is a client for the metalstack.admin.v2.FilesystemService service.
type FilesystemServiceClient interface {
	// Create a filesystem
	Create(context.Context, *connect.Request[v2.FilesystemServiceCreateRequest]) (*connect.Response[v2.FilesystemServiceCreateResponse], error)
	// Update a filesystem
	Update(context.Context, *connect.Request[v2.FilesystemServiceUpdateRequest]) (*connect.Response[v2.FilesystemServiceUpdateResponse], error)
	// Delete a filesystem
	Delete(context.Context, *connect.Request[v2.FilesystemServiceDeleteRequest]) (*connect.Response[v2.FilesystemServiceDeleteResponse], error)
}

// NewFilesystemServiceClient constructs a client for the metalstack.admin.v2.FilesystemService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFilesystemServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FilesystemServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	filesystemServiceMethods := v2.File_metalstack_admin_v2_filesystem_proto.Services().ByName("FilesystemService").Methods()
	return &filesystemServiceClient{
		create: connect.NewClient[v2.FilesystemServiceCreateRequest, v2.FilesystemServiceCreateResponse](
			httpClient,
			baseURL+FilesystemServiceCreateProcedure,
			connect.WithSchema(filesystemServiceMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v2.FilesystemServiceUpdateRequest, v2.FilesystemServiceUpdateResponse](
			httpClient,
			baseURL+FilesystemServiceUpdateProcedure,
			connect.WithSchema(filesystemServiceMethods.ByName("Update")),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v2.FilesystemServiceDeleteRequest, v2.FilesystemServiceDeleteResponse](
			httpClient,
			baseURL+FilesystemServiceDeleteProcedure,
			connect.WithSchema(filesystemServiceMethods.ByName("Delete")),
			connect.WithClientOptions(opts...),
		),
	}
}

// filesystemServiceClient implements FilesystemServiceClient.
type filesystemServiceClient struct {
	create *connect.Client[v2.FilesystemServiceCreateRequest, v2.FilesystemServiceCreateResponse]
	update *connect.Client[v2.FilesystemServiceUpdateRequest, v2.FilesystemServiceUpdateResponse]
	delete *connect.Client[v2.FilesystemServiceDeleteRequest, v2.FilesystemServiceDeleteResponse]
}

// Create calls metalstack.admin.v2.FilesystemService.Create.
func (c *filesystemServiceClient) Create(ctx context.Context, req *connect.Request[v2.FilesystemServiceCreateRequest]) (*connect.Response[v2.FilesystemServiceCreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls metalstack.admin.v2.FilesystemService.Update.
func (c *filesystemServiceClient) Update(ctx context.Context, req *connect.Request[v2.FilesystemServiceUpdateRequest]) (*connect.Response[v2.FilesystemServiceUpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls metalstack.admin.v2.FilesystemService.Delete.
func (c *filesystemServiceClient) Delete(ctx context.Context, req *connect.Request[v2.FilesystemServiceDeleteRequest]) (*connect.Response[v2.FilesystemServiceDeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// FilesystemServiceHandler is an implementation of the metalstack.admin.v2.FilesystemService
// service.
type FilesystemServiceHandler interface {
	// Create a filesystem
	Create(context.Context, *connect.Request[v2.FilesystemServiceCreateRequest]) (*connect.Response[v2.FilesystemServiceCreateResponse], error)
	// Update a filesystem
	Update(context.Context, *connect.Request[v2.FilesystemServiceUpdateRequest]) (*connect.Response[v2.FilesystemServiceUpdateResponse], error)
	// Delete a filesystem
	Delete(context.Context, *connect.Request[v2.FilesystemServiceDeleteRequest]) (*connect.Response[v2.FilesystemServiceDeleteResponse], error)
}

// NewFilesystemServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFilesystemServiceHandler(svc FilesystemServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	filesystemServiceMethods := v2.File_metalstack_admin_v2_filesystem_proto.Services().ByName("FilesystemService").Methods()
	filesystemServiceCreateHandler := connect.NewUnaryHandler(
		FilesystemServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(filesystemServiceMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	filesystemServiceUpdateHandler := connect.NewUnaryHandler(
		FilesystemServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(filesystemServiceMethods.ByName("Update")),
		connect.WithHandlerOptions(opts...),
	)
	filesystemServiceDeleteHandler := connect.NewUnaryHandler(
		FilesystemServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(filesystemServiceMethods.ByName("Delete")),
		connect.WithHandlerOptions(opts...),
	)
	return "/metalstack.admin.v2.FilesystemService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FilesystemServiceCreateProcedure:
			filesystemServiceCreateHandler.ServeHTTP(w, r)
		case FilesystemServiceUpdateProcedure:
			filesystemServiceUpdateHandler.ServeHTTP(w, r)
		case FilesystemServiceDeleteProcedure:
			filesystemServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFilesystemServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFilesystemServiceHandler struct{}

func (UnimplementedFilesystemServiceHandler) Create(context.Context, *connect.Request[v2.FilesystemServiceCreateRequest]) (*connect.Response[v2.FilesystemServiceCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.admin.v2.FilesystemService.Create is not implemented"))
}

func (UnimplementedFilesystemServiceHandler) Update(context.Context, *connect.Request[v2.FilesystemServiceUpdateRequest]) (*connect.Response[v2.FilesystemServiceUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.admin.v2.FilesystemService.Update is not implemented"))
}

func (UnimplementedFilesystemServiceHandler) Delete(context.Context, *connect.Request[v2.FilesystemServiceDeleteRequest]) (*connect.Response[v2.FilesystemServiceDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.admin.v2.FilesystemService.Delete is not implemented"))
}
