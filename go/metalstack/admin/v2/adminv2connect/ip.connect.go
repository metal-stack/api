// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: metalstack/admin/v2/ip.proto

package adminv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/metal-stack/api/go/metalstack/admin/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IPServiceName is the fully-qualified name of the IPService service.
	IPServiceName = "metalstack.admin.v2.IPService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IPServiceListProcedure is the fully-qualified name of the IPService's List RPC.
	IPServiceListProcedure = "/metalstack.admin.v2.IPService/List"
	// IPServiceIssuesProcedure is the fully-qualified name of the IPService's Issues RPC.
	IPServiceIssuesProcedure = "/metalstack.admin.v2.IPService/Issues"
)

// IPServiceClient is a client for the metalstack.admin.v2.IPService service.
type IPServiceClient interface {
	// List all ips
	List(context.Context, *v2.IPServiceListRequest) (*v2.IPServiceListResponse, error)
	// Show issues with ips
	Issues(context.Context, *v2.IPServiceIssuesRequest) (*v2.IPServiceIssuesResponse, error)
}

// NewIPServiceClient constructs a client for the metalstack.admin.v2.IPService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIPServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IPServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	iPServiceMethods := v2.File_metalstack_admin_v2_ip_proto.Services().ByName("IPService").Methods()
	return &iPServiceClient{
		list: connect.NewClient[v2.IPServiceListRequest, v2.IPServiceListResponse](
			httpClient,
			baseURL+IPServiceListProcedure,
			connect.WithSchema(iPServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
		issues: connect.NewClient[v2.IPServiceIssuesRequest, v2.IPServiceIssuesResponse](
			httpClient,
			baseURL+IPServiceIssuesProcedure,
			connect.WithSchema(iPServiceMethods.ByName("Issues")),
			connect.WithClientOptions(opts...),
		),
	}
}

// iPServiceClient implements IPServiceClient.
type iPServiceClient struct {
	list   *connect.Client[v2.IPServiceListRequest, v2.IPServiceListResponse]
	issues *connect.Client[v2.IPServiceIssuesRequest, v2.IPServiceIssuesResponse]
}

// List calls metalstack.admin.v2.IPService.List.
func (c *iPServiceClient) List(ctx context.Context, req *v2.IPServiceListRequest) (*v2.IPServiceListResponse, error) {
	response, err := c.list.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// Issues calls metalstack.admin.v2.IPService.Issues.
func (c *iPServiceClient) Issues(ctx context.Context, req *v2.IPServiceIssuesRequest) (*v2.IPServiceIssuesResponse, error) {
	response, err := c.issues.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// IPServiceHandler is an implementation of the metalstack.admin.v2.IPService service.
type IPServiceHandler interface {
	// List all ips
	List(context.Context, *v2.IPServiceListRequest) (*v2.IPServiceListResponse, error)
	// Show issues with ips
	Issues(context.Context, *v2.IPServiceIssuesRequest) (*v2.IPServiceIssuesResponse, error)
}

// NewIPServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIPServiceHandler(svc IPServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	iPServiceMethods := v2.File_metalstack_admin_v2_ip_proto.Services().ByName("IPService").Methods()
	iPServiceListHandler := connect.NewUnaryHandlerSimple(
		IPServiceListProcedure,
		svc.List,
		connect.WithSchema(iPServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	iPServiceIssuesHandler := connect.NewUnaryHandlerSimple(
		IPServiceIssuesProcedure,
		svc.Issues,
		connect.WithSchema(iPServiceMethods.ByName("Issues")),
		connect.WithHandlerOptions(opts...),
	)
	return "/metalstack.admin.v2.IPService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IPServiceListProcedure:
			iPServiceListHandler.ServeHTTP(w, r)
		case IPServiceIssuesProcedure:
			iPServiceIssuesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIPServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIPServiceHandler struct{}

func (UnimplementedIPServiceHandler) List(context.Context, *v2.IPServiceListRequest) (*v2.IPServiceListResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.admin.v2.IPService.List is not implemented"))
}

func (UnimplementedIPServiceHandler) Issues(context.Context, *v2.IPServiceIssuesRequest) (*v2.IPServiceIssuesResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.admin.v2.IPService.Issues is not implemented"))
}
