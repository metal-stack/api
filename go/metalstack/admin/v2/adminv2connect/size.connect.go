// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: metalstack/admin/v2/size.proto

package adminv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/metal-stack/api/go/metalstack/admin/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SizeServiceName is the fully-qualified name of the SizeService service.
	SizeServiceName = "metalstack.admin.v2.SizeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SizeServiceCreateProcedure is the fully-qualified name of the SizeService's Create RPC.
	SizeServiceCreateProcedure = "/metalstack.admin.v2.SizeService/Create"
	// SizeServiceUpdateProcedure is the fully-qualified name of the SizeService's Update RPC.
	SizeServiceUpdateProcedure = "/metalstack.admin.v2.SizeService/Update"
	// SizeServiceDeleteProcedure is the fully-qualified name of the SizeService's Delete RPC.
	SizeServiceDeleteProcedure = "/metalstack.admin.v2.SizeService/Delete"
)

// SizeServiceClient is a client for the metalstack.admin.v2.SizeService service.
type SizeServiceClient interface {
	// Create a size
	Create(context.Context, *v2.SizeServiceCreateRequest) (*v2.SizeServiceCreateResponse, error)
	// Update a size
	Update(context.Context, *v2.SizeServiceUpdateRequest) (*v2.SizeServiceUpdateResponse, error)
	// Delete a size
	Delete(context.Context, *v2.SizeServiceDeleteRequest) (*v2.SizeServiceDeleteResponse, error)
}

// NewSizeServiceClient constructs a client for the metalstack.admin.v2.SizeService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSizeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SizeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	sizeServiceMethods := v2.File_metalstack_admin_v2_size_proto.Services().ByName("SizeService").Methods()
	return &sizeServiceClient{
		create: connect.NewClient[v2.SizeServiceCreateRequest, v2.SizeServiceCreateResponse](
			httpClient,
			baseURL+SizeServiceCreateProcedure,
			connect.WithSchema(sizeServiceMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v2.SizeServiceUpdateRequest, v2.SizeServiceUpdateResponse](
			httpClient,
			baseURL+SizeServiceUpdateProcedure,
			connect.WithSchema(sizeServiceMethods.ByName("Update")),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v2.SizeServiceDeleteRequest, v2.SizeServiceDeleteResponse](
			httpClient,
			baseURL+SizeServiceDeleteProcedure,
			connect.WithSchema(sizeServiceMethods.ByName("Delete")),
			connect.WithClientOptions(opts...),
		),
	}
}

// sizeServiceClient implements SizeServiceClient.
type sizeServiceClient struct {
	create *connect.Client[v2.SizeServiceCreateRequest, v2.SizeServiceCreateResponse]
	update *connect.Client[v2.SizeServiceUpdateRequest, v2.SizeServiceUpdateResponse]
	delete *connect.Client[v2.SizeServiceDeleteRequest, v2.SizeServiceDeleteResponse]
}

// Create calls metalstack.admin.v2.SizeService.Create.
func (c *sizeServiceClient) Create(ctx context.Context, req *v2.SizeServiceCreateRequest) (*v2.SizeServiceCreateResponse, error) {
	response, err := c.create.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// Update calls metalstack.admin.v2.SizeService.Update.
func (c *sizeServiceClient) Update(ctx context.Context, req *v2.SizeServiceUpdateRequest) (*v2.SizeServiceUpdateResponse, error) {
	response, err := c.update.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// Delete calls metalstack.admin.v2.SizeService.Delete.
func (c *sizeServiceClient) Delete(ctx context.Context, req *v2.SizeServiceDeleteRequest) (*v2.SizeServiceDeleteResponse, error) {
	response, err := c.delete.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// SizeServiceHandler is an implementation of the metalstack.admin.v2.SizeService service.
type SizeServiceHandler interface {
	// Create a size
	Create(context.Context, *v2.SizeServiceCreateRequest) (*v2.SizeServiceCreateResponse, error)
	// Update a size
	Update(context.Context, *v2.SizeServiceUpdateRequest) (*v2.SizeServiceUpdateResponse, error)
	// Delete a size
	Delete(context.Context, *v2.SizeServiceDeleteRequest) (*v2.SizeServiceDeleteResponse, error)
}

// NewSizeServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSizeServiceHandler(svc SizeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sizeServiceMethods := v2.File_metalstack_admin_v2_size_proto.Services().ByName("SizeService").Methods()
	sizeServiceCreateHandler := connect.NewUnaryHandlerSimple(
		SizeServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(sizeServiceMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	sizeServiceUpdateHandler := connect.NewUnaryHandlerSimple(
		SizeServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(sizeServiceMethods.ByName("Update")),
		connect.WithHandlerOptions(opts...),
	)
	sizeServiceDeleteHandler := connect.NewUnaryHandlerSimple(
		SizeServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(sizeServiceMethods.ByName("Delete")),
		connect.WithHandlerOptions(opts...),
	)
	return "/metalstack.admin.v2.SizeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SizeServiceCreateProcedure:
			sizeServiceCreateHandler.ServeHTTP(w, r)
		case SizeServiceUpdateProcedure:
			sizeServiceUpdateHandler.ServeHTTP(w, r)
		case SizeServiceDeleteProcedure:
			sizeServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSizeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSizeServiceHandler struct{}

func (UnimplementedSizeServiceHandler) Create(context.Context, *v2.SizeServiceCreateRequest) (*v2.SizeServiceCreateResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.admin.v2.SizeService.Create is not implemented"))
}

func (UnimplementedSizeServiceHandler) Update(context.Context, *v2.SizeServiceUpdateRequest) (*v2.SizeServiceUpdateResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.admin.v2.SizeService.Update is not implemented"))
}

func (UnimplementedSizeServiceHandler) Delete(context.Context, *v2.SizeServiceDeleteRequest) (*v2.SizeServiceDeleteResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metalstack.admin.v2.SizeService.Delete is not implemented"))
}
