// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: metalstack/admin/v2/ip.proto

package adminv2

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v2 "github.com/metal-stack/api/go/metalstack/api/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// IPServiceListRequest
type IPServiceListRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Ip the ip to list
	Ip *string `protobuf:"bytes,1,opt,name=ip,proto3,oneof" json:"ip,omitempty"`
	// Network from where the ips to list
	Network *string `protobuf:"bytes,2,opt,name=network,proto3,oneof" json:"network,omitempty"`
	// Project of the ips to list
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	// Name of this ip
	Name *string `protobuf:"bytes,4,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Uuid for which this ips should get filtered
	Uuid *string `protobuf:"bytes,5,opt,name=uuid,proto3,oneof" json:"uuid,omitempty"`
	// MachineId for which this ips should get filtered
	MachineId *string `protobuf:"bytes,6,opt,name=machine_id,json=machineId,proto3,oneof" json:"machine_id,omitempty"`
	// ParentPrefixCidr for which this ips should get filtered
	ParentPrefixCidr *string `protobuf:"bytes,7,opt,name=parent_prefix_cidr,json=parentPrefixCidr,proto3,oneof" json:"parent_prefix_cidr,omitempty"`
	// Tags for which this ips should get filtered
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// Static if set to true, this will be a Static ip
	Type *v2.IPType `protobuf:"varint,9,opt,name=type,proto3,enum=metalstack.api.v2.IPType,oneof" json:"type,omitempty"`
	// Addressfamily of the IPs to list, defaults to all addressfamilies
	AddressFamily *v2.IPAddressFamily `protobuf:"varint,10,opt,name=address_family,json=addressFamily,proto3,enum=metalstack.api.v2.IPAddressFamily,oneof" json:"address_family,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IPServiceListRequest) Reset() {
	*x = IPServiceListRequest{}
	mi := &file_metalstack_admin_v2_ip_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPServiceListRequest) ProtoMessage() {}

func (x *IPServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_admin_v2_ip_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPServiceListRequest.ProtoReflect.Descriptor instead.
func (*IPServiceListRequest) Descriptor() ([]byte, []int) {
	return file_metalstack_admin_v2_ip_proto_rawDescGZIP(), []int{0}
}

func (x *IPServiceListRequest) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *IPServiceListRequest) GetNetwork() string {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return ""
}

func (x *IPServiceListRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *IPServiceListRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *IPServiceListRequest) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *IPServiceListRequest) GetMachineId() string {
	if x != nil && x.MachineId != nil {
		return *x.MachineId
	}
	return ""
}

func (x *IPServiceListRequest) GetParentPrefixCidr() string {
	if x != nil && x.ParentPrefixCidr != nil {
		return *x.ParentPrefixCidr
	}
	return ""
}

func (x *IPServiceListRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *IPServiceListRequest) GetType() v2.IPType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return v2.IPType(0)
}

func (x *IPServiceListRequest) GetAddressFamily() v2.IPAddressFamily {
	if x != nil && x.AddressFamily != nil {
		return *x.AddressFamily
	}
	return v2.IPAddressFamily(0)
}

// IPServiceListResponse
type IPServiceListResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IPs are the list of ips
	Ips           []*v2.IP `protobuf:"bytes,1,rep,name=ips,proto3" json:"ips,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IPServiceListResponse) Reset() {
	*x = IPServiceListResponse{}
	mi := &file_metalstack_admin_v2_ip_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPServiceListResponse) ProtoMessage() {}

func (x *IPServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_admin_v2_ip_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPServiceListResponse.ProtoReflect.Descriptor instead.
func (*IPServiceListResponse) Descriptor() ([]byte, []int) {
	return file_metalstack_admin_v2_ip_proto_rawDescGZIP(), []int{1}
}

func (x *IPServiceListResponse) GetIps() []*v2.IP {
	if x != nil {
		return x.Ips
	}
	return nil
}

// IPServiceIssuesRequest
type IPServiceIssuesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IPServiceIssuesRequest) Reset() {
	*x = IPServiceIssuesRequest{}
	mi := &file_metalstack_admin_v2_ip_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPServiceIssuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPServiceIssuesRequest) ProtoMessage() {}

func (x *IPServiceIssuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_admin_v2_ip_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPServiceIssuesRequest.ProtoReflect.Descriptor instead.
func (*IPServiceIssuesRequest) Descriptor() ([]byte, []int) {
	return file_metalstack_admin_v2_ip_proto_rawDescGZIP(), []int{2}
}

// IPServiceIssuesResponse
type IPServiceIssuesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Issues with ips
	Issues        []*IPIssue `protobuf:"bytes,1,rep,name=issues,proto3" json:"issues,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IPServiceIssuesResponse) Reset() {
	*x = IPServiceIssuesResponse{}
	mi := &file_metalstack_admin_v2_ip_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPServiceIssuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPServiceIssuesResponse) ProtoMessage() {}

func (x *IPServiceIssuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_admin_v2_ip_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPServiceIssuesResponse.ProtoReflect.Descriptor instead.
func (*IPServiceIssuesResponse) Descriptor() ([]byte, []int) {
	return file_metalstack_admin_v2_ip_proto_rawDescGZIP(), []int{3}
}

func (x *IPServiceIssuesResponse) GetIssues() []*IPIssue {
	if x != nil {
		return x.Issues
	}
	return nil
}

// IPIssue
type IPIssue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Description of the issue with this ip
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// IP is the ip with the issue
	Ip            *v2.IP `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IPIssue) Reset() {
	*x = IPIssue{}
	mi := &file_metalstack_admin_v2_ip_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPIssue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPIssue) ProtoMessage() {}

func (x *IPIssue) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_admin_v2_ip_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPIssue.ProtoReflect.Descriptor instead.
func (*IPIssue) Descriptor() ([]byte, []int) {
	return file_metalstack_admin_v2_ip_proto_rawDescGZIP(), []int{4}
}

func (x *IPIssue) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *IPIssue) GetIp() *v2.IP {
	if x != nil {
		return x.Ip
	}
	return nil
}

var File_metalstack_admin_v2_ip_proto protoreflect.FileDescriptor

var file_metalstack_admin_v2_ip_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x32, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x32, 0x2f, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd2, 0x04, 0x0a,
	0x14, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x70, 0x01, 0x48, 0x00, 0x52, 0x02, 0x69, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0x80, 0x01,
	0x48, 0x01, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0x80, 0x01, 0x48, 0x02, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x48,
	0x03, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0a, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x48, 0x04, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x70, 0x01, 0x48, 0x05, 0x52,
	0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x43, 0x69, 0x64,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x10, 0x64, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x50, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x06, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x58, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x50, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x42, 0x08, 0xba, 0x48,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x07, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69,
	0x70, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x63, 0x69, 0x64, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x22, 0x40, 0x0a, 0x15, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x03, 0x69, 0x70,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x50, 0x52, 0x03,
	0x69, 0x70, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4f, 0x0a,
	0x17, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x49,
	0x50, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x22, 0x52,
	0x0a, 0x07, 0x49, 0x50, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x50, 0x52, 0x02,
	0x69, 0x70, 0x32, 0xe7, 0x01, 0x0a, 0x09, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x69, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x49,
	0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x0a, 0xd2, 0xf3, 0x18, 0x02, 0x01, 0x02, 0xe0, 0xf3, 0x18, 0x02, 0x12, 0x6f, 0x0a, 0x06, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x50, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x0a, 0xd2, 0xf3, 0x18, 0x02, 0x01, 0x02, 0xe0, 0xf3, 0x18, 0x02, 0x42, 0xcb, 0x01, 0x0a,
	0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x42, 0x07, 0x49, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x6f, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x32, 0x3b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x76, 0x32, 0xa2, 0x02,
	0x03, 0x4d, 0x41, 0x58, 0xaa, 0x02, 0x13, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x13, 0x4d, 0x65, 0x74,
	0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x56, 0x32,
	0xe2, 0x02, 0x1f, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5c, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x15, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x3a,
	0x3a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_metalstack_admin_v2_ip_proto_rawDescOnce sync.Once
	file_metalstack_admin_v2_ip_proto_rawDescData []byte
)

func file_metalstack_admin_v2_ip_proto_rawDescGZIP() []byte {
	file_metalstack_admin_v2_ip_proto_rawDescOnce.Do(func() {
		file_metalstack_admin_v2_ip_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_metalstack_admin_v2_ip_proto_rawDesc), len(file_metalstack_admin_v2_ip_proto_rawDesc)))
	})
	return file_metalstack_admin_v2_ip_proto_rawDescData
}

var file_metalstack_admin_v2_ip_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_metalstack_admin_v2_ip_proto_goTypes = []any{
	(*IPServiceListRequest)(nil),    // 0: metalstack.admin.v2.IPServiceListRequest
	(*IPServiceListResponse)(nil),   // 1: metalstack.admin.v2.IPServiceListResponse
	(*IPServiceIssuesRequest)(nil),  // 2: metalstack.admin.v2.IPServiceIssuesRequest
	(*IPServiceIssuesResponse)(nil), // 3: metalstack.admin.v2.IPServiceIssuesResponse
	(*IPIssue)(nil),                 // 4: metalstack.admin.v2.IPIssue
	(v2.IPType)(0),                  // 5: metalstack.api.v2.IPType
	(v2.IPAddressFamily)(0),         // 6: metalstack.api.v2.IPAddressFamily
	(*v2.IP)(nil),                   // 7: metalstack.api.v2.IP
}
var file_metalstack_admin_v2_ip_proto_depIdxs = []int32{
	5, // 0: metalstack.admin.v2.IPServiceListRequest.type:type_name -> metalstack.api.v2.IPType
	6, // 1: metalstack.admin.v2.IPServiceListRequest.address_family:type_name -> metalstack.api.v2.IPAddressFamily
	7, // 2: metalstack.admin.v2.IPServiceListResponse.ips:type_name -> metalstack.api.v2.IP
	4, // 3: metalstack.admin.v2.IPServiceIssuesResponse.issues:type_name -> metalstack.admin.v2.IPIssue
	7, // 4: metalstack.admin.v2.IPIssue.ip:type_name -> metalstack.api.v2.IP
	0, // 5: metalstack.admin.v2.IPService.List:input_type -> metalstack.admin.v2.IPServiceListRequest
	2, // 6: metalstack.admin.v2.IPService.Issues:input_type -> metalstack.admin.v2.IPServiceIssuesRequest
	1, // 7: metalstack.admin.v2.IPService.List:output_type -> metalstack.admin.v2.IPServiceListResponse
	3, // 8: metalstack.admin.v2.IPService.Issues:output_type -> metalstack.admin.v2.IPServiceIssuesResponse
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_metalstack_admin_v2_ip_proto_init() }
func file_metalstack_admin_v2_ip_proto_init() {
	if File_metalstack_admin_v2_ip_proto != nil {
		return
	}
	file_metalstack_admin_v2_ip_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_metalstack_admin_v2_ip_proto_rawDesc), len(file_metalstack_admin_v2_ip_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_metalstack_admin_v2_ip_proto_goTypes,
		DependencyIndexes: file_metalstack_admin_v2_ip_proto_depIdxs,
		MessageInfos:      file_metalstack_admin_v2_ip_proto_msgTypes,
	}.Build()
	File_metalstack_admin_v2_ip_proto = out.File
	file_metalstack_admin_v2_ip_proto_goTypes = nil
	file_metalstack_admin_v2_ip_proto_depIdxs = nil
}
