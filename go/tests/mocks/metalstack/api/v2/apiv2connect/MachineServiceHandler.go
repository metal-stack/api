// Code generated by mockery v2.53.5. DO NOT EDIT.

package apiv2connect

import (
	context "context"

	apiv2 "github.com/metal-stack/api/go/metalstack/api/v2"

	mock "github.com/stretchr/testify/mock"
)

// MachineServiceHandler is an autogenerated mock type for the MachineServiceHandler type
type MachineServiceHandler struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *MachineServiceHandler) Create(_a0 context.Context, _a1 *apiv2.MachineServiceCreateRequest) (*apiv2.MachineServiceCreateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *apiv2.MachineServiceCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiv2.MachineServiceCreateRequest) (*apiv2.MachineServiceCreateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiv2.MachineServiceCreateRequest) *apiv2.MachineServiceCreateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiv2.MachineServiceCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiv2.MachineServiceCreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *MachineServiceHandler) Delete(_a0 context.Context, _a1 *apiv2.MachineServiceDeleteRequest) (*apiv2.MachineServiceDeleteResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *apiv2.MachineServiceDeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiv2.MachineServiceDeleteRequest) (*apiv2.MachineServiceDeleteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiv2.MachineServiceDeleteRequest) *apiv2.MachineServiceDeleteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiv2.MachineServiceDeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiv2.MachineServiceDeleteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *MachineServiceHandler) Get(_a0 context.Context, _a1 *apiv2.MachineServiceGetRequest) (*apiv2.MachineServiceGetResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *apiv2.MachineServiceGetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiv2.MachineServiceGetRequest) (*apiv2.MachineServiceGetResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiv2.MachineServiceGetRequest) *apiv2.MachineServiceGetResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiv2.MachineServiceGetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiv2.MachineServiceGetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0, _a1
func (_m *MachineServiceHandler) List(_a0 context.Context, _a1 *apiv2.MachineServiceListRequest) (*apiv2.MachineServiceListResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *apiv2.MachineServiceListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiv2.MachineServiceListRequest) (*apiv2.MachineServiceListResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiv2.MachineServiceListRequest) *apiv2.MachineServiceListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiv2.MachineServiceListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiv2.MachineServiceListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *MachineServiceHandler) Update(_a0 context.Context, _a1 *apiv2.MachineServiceUpdateRequest) (*apiv2.MachineServiceUpdateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *apiv2.MachineServiceUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiv2.MachineServiceUpdateRequest) (*apiv2.MachineServiceUpdateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiv2.MachineServiceUpdateRequest) *apiv2.MachineServiceUpdateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiv2.MachineServiceUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiv2.MachineServiceUpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMachineServiceHandler creates a new instance of MachineServiceHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMachineServiceHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MachineServiceHandler {
	mock := &MachineServiceHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
