// Code generated by mockery v2.53.5. DO NOT EDIT.

package adminv2connect

import (
	context "context"

	adminv2 "github.com/metal-stack/api/go/metalstack/admin/v2"

	mock "github.com/stretchr/testify/mock"
)

// SwitchServiceHandler is an autogenerated mock type for the SwitchServiceHandler type
type SwitchServiceHandler struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *SwitchServiceHandler) Delete(_a0 context.Context, _a1 *adminv2.SwitchServiceDeleteRequest) (*adminv2.SwitchServiceDeleteResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *adminv2.SwitchServiceDeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *adminv2.SwitchServiceDeleteRequest) (*adminv2.SwitchServiceDeleteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *adminv2.SwitchServiceDeleteRequest) *adminv2.SwitchServiceDeleteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*adminv2.SwitchServiceDeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *adminv2.SwitchServiceDeleteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *SwitchServiceHandler) Get(_a0 context.Context, _a1 *adminv2.SwitchServiceGetRequest) (*adminv2.SwitchServiceGetResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *adminv2.SwitchServiceGetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *adminv2.SwitchServiceGetRequest) (*adminv2.SwitchServiceGetResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *adminv2.SwitchServiceGetRequest) *adminv2.SwitchServiceGetResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*adminv2.SwitchServiceGetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *adminv2.SwitchServiceGetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0, _a1
func (_m *SwitchServiceHandler) List(_a0 context.Context, _a1 *adminv2.SwitchServiceListRequest) (*adminv2.SwitchServiceListResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *adminv2.SwitchServiceListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *adminv2.SwitchServiceListRequest) (*adminv2.SwitchServiceListResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *adminv2.SwitchServiceListRequest) *adminv2.SwitchServiceListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*adminv2.SwitchServiceListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *adminv2.SwitchServiceListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Migrate provides a mock function with given fields: _a0, _a1
func (_m *SwitchServiceHandler) Migrate(_a0 context.Context, _a1 *adminv2.SwitchServiceMigrateRequest) (*adminv2.SwitchServiceMigrateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Migrate")
	}

	var r0 *adminv2.SwitchServiceMigrateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *adminv2.SwitchServiceMigrateRequest) (*adminv2.SwitchServiceMigrateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *adminv2.SwitchServiceMigrateRequest) *adminv2.SwitchServiceMigrateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*adminv2.SwitchServiceMigrateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *adminv2.SwitchServiceMigrateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Port provides a mock function with given fields: _a0, _a1
func (_m *SwitchServiceHandler) Port(_a0 context.Context, _a1 *adminv2.SwitchServicePortRequest) (*adminv2.SwitchServicePortResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Port")
	}

	var r0 *adminv2.SwitchServicePortResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *adminv2.SwitchServicePortRequest) (*adminv2.SwitchServicePortResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *adminv2.SwitchServicePortRequest) *adminv2.SwitchServicePortResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*adminv2.SwitchServicePortResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *adminv2.SwitchServicePortRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *SwitchServiceHandler) Update(_a0 context.Context, _a1 *adminv2.SwitchServiceUpdateRequest) (*adminv2.SwitchServiceUpdateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *adminv2.SwitchServiceUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *adminv2.SwitchServiceUpdateRequest) (*adminv2.SwitchServiceUpdateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *adminv2.SwitchServiceUpdateRequest) *adminv2.SwitchServiceUpdateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*adminv2.SwitchServiceUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *adminv2.SwitchServiceUpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSwitchServiceHandler creates a new instance of SwitchServiceHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSwitchServiceHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *SwitchServiceHandler {
	mock := &SwitchServiceHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
