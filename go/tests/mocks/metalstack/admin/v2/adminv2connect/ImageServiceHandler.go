// Code generated by mockery v2.53.5. DO NOT EDIT.

package adminv2connect

import (
	context "context"

	adminv2 "github.com/metal-stack/api/go/metalstack/admin/v2"

	mock "github.com/stretchr/testify/mock"
)

// ImageServiceHandler is an autogenerated mock type for the ImageServiceHandler type
type ImageServiceHandler struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *ImageServiceHandler) Create(_a0 context.Context, _a1 *adminv2.ImageServiceCreateRequest) (*adminv2.ImageServiceCreateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *adminv2.ImageServiceCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *adminv2.ImageServiceCreateRequest) (*adminv2.ImageServiceCreateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *adminv2.ImageServiceCreateRequest) *adminv2.ImageServiceCreateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*adminv2.ImageServiceCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *adminv2.ImageServiceCreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *ImageServiceHandler) Delete(_a0 context.Context, _a1 *adminv2.ImageServiceDeleteRequest) (*adminv2.ImageServiceDeleteResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *adminv2.ImageServiceDeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *adminv2.ImageServiceDeleteRequest) (*adminv2.ImageServiceDeleteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *adminv2.ImageServiceDeleteRequest) *adminv2.ImageServiceDeleteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*adminv2.ImageServiceDeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *adminv2.ImageServiceDeleteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *ImageServiceHandler) Update(_a0 context.Context, _a1 *adminv2.ImageServiceUpdateRequest) (*adminv2.ImageServiceUpdateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *adminv2.ImageServiceUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *adminv2.ImageServiceUpdateRequest) (*adminv2.ImageServiceUpdateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *adminv2.ImageServiceUpdateRequest) *adminv2.ImageServiceUpdateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*adminv2.ImageServiceUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *adminv2.ImageServiceUpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usage provides a mock function with given fields: _a0, _a1
func (_m *ImageServiceHandler) Usage(_a0 context.Context, _a1 *adminv2.ImageServiceUsageRequest) (*adminv2.ImageServiceUsageResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Usage")
	}

	var r0 *adminv2.ImageServiceUsageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *adminv2.ImageServiceUsageRequest) (*adminv2.ImageServiceUsageResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *adminv2.ImageServiceUsageRequest) *adminv2.ImageServiceUsageResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*adminv2.ImageServiceUsageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *adminv2.ImageServiceUsageRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewImageServiceHandler creates a new instance of ImageServiceHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewImageServiceHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *ImageServiceHandler {
	mock := &ImageServiceHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
