// Code generated by mockery v2.53.4. DO NOT EDIT.

package infrav2connect

import (
	context "context"

	connect "connectrpc.com/connect"

	infrav2 "github.com/metal-stack/api/go/metalstack/infra/v2"

	mock "github.com/stretchr/testify/mock"
)

// BootServiceClient is an autogenerated mock type for the BootServiceClient type
type BootServiceClient struct {
	mock.Mock
}

// Boot provides a mock function with given fields: _a0, _a1
func (_m *BootServiceClient) Boot(_a0 context.Context, _a1 *connect.Request[infrav2.BootServiceBootRequest]) (*connect.Response[infrav2.BootServiceBootResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Boot")
	}

	var r0 *connect.Response[infrav2.BootServiceBootResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[infrav2.BootServiceBootRequest]) (*connect.Response[infrav2.BootServiceBootResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[infrav2.BootServiceBootRequest]) *connect.Response[infrav2.BootServiceBootResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[infrav2.BootServiceBootResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[infrav2.BootServiceBootRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Dhcp provides a mock function with given fields: _a0, _a1
func (_m *BootServiceClient) Dhcp(_a0 context.Context, _a1 *connect.Request[infrav2.BootServiceDhcpRequest]) (*connect.Response[infrav2.BootServiceDhcpResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Dhcp")
	}

	var r0 *connect.Response[infrav2.BootServiceDhcpResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[infrav2.BootServiceDhcpRequest]) (*connect.Response[infrav2.BootServiceDhcpResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[infrav2.BootServiceDhcpRequest]) *connect.Response[infrav2.BootServiceDhcpResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[infrav2.BootServiceDhcpResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[infrav2.BootServiceDhcpRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: _a0, _a1
func (_m *BootServiceClient) Register(_a0 context.Context, _a1 *connect.Request[infrav2.BootServiceRegisterRequest]) (*connect.Response[infrav2.BootServiceRegisterResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *connect.Response[infrav2.BootServiceRegisterResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[infrav2.BootServiceRegisterRequest]) (*connect.Response[infrav2.BootServiceRegisterResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[infrav2.BootServiceRegisterRequest]) *connect.Response[infrav2.BootServiceRegisterResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[infrav2.BootServiceRegisterResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[infrav2.BootServiceRegisterRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Report provides a mock function with given fields: _a0, _a1
func (_m *BootServiceClient) Report(_a0 context.Context, _a1 *connect.Request[infrav2.BootServiceReportRequest]) (*connect.Response[infrav2.BootServiceReportResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Report")
	}

	var r0 *connect.Response[infrav2.BootServiceReportResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[infrav2.BootServiceReportRequest]) (*connect.Response[infrav2.BootServiceReportResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[infrav2.BootServiceReportRequest]) *connect.Response[infrav2.BootServiceReportResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[infrav2.BootServiceReportResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[infrav2.BootServiceReportRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuperUserPassword provides a mock function with given fields: _a0, _a1
func (_m *BootServiceClient) SuperUserPassword(_a0 context.Context, _a1 *connect.Request[infrav2.BootServiceSuperUserPasswordRequest]) (*connect.Response[infrav2.BootServiceSuperUserPasswordResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SuperUserPassword")
	}

	var r0 *connect.Response[infrav2.BootServiceSuperUserPasswordResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[infrav2.BootServiceSuperUserPasswordRequest]) (*connect.Response[infrav2.BootServiceSuperUserPasswordResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[infrav2.BootServiceSuperUserPasswordRequest]) *connect.Response[infrav2.BootServiceSuperUserPasswordResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[infrav2.BootServiceSuperUserPasswordResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[infrav2.BootServiceSuperUserPasswordRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Wait provides a mock function with given fields: _a0, _a1
func (_m *BootServiceClient) Wait(_a0 context.Context, _a1 *connect.Request[infrav2.BootServiceWaitRequest]) (*connect.ServerStreamForClient[infrav2.BootServiceWaitResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 *connect.ServerStreamForClient[infrav2.BootServiceWaitResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[infrav2.BootServiceWaitRequest]) (*connect.ServerStreamForClient[infrav2.BootServiceWaitResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[infrav2.BootServiceWaitRequest]) *connect.ServerStreamForClient[infrav2.BootServiceWaitResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ServerStreamForClient[infrav2.BootServiceWaitResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[infrav2.BootServiceWaitRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBootServiceClient creates a new instance of BootServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBootServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *BootServiceClient {
	mock := &BootServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
