// Code generated by mockery v2.53.5. DO NOT EDIT.

package infrav2connect

import (
	context "context"

	connect "connectrpc.com/connect"

	infrav2 "github.com/metal-stack/api/go/metalstack/infra/v2"

	mock "github.com/stretchr/testify/mock"
)

// SwitchServiceClient is an autogenerated mock type for the SwitchServiceClient type
type SwitchServiceClient struct {
	mock.Mock
}

// Notify provides a mock function with given fields: _a0, _a1
func (_m *SwitchServiceClient) Notify(_a0 context.Context, _a1 *connect.Request[infrav2.SwitchServiceNotifyRequest]) (*connect.Response[infrav2.SwitchServiceNotifyResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Notify")
	}

	var r0 *connect.Response[infrav2.SwitchServiceNotifyResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[infrav2.SwitchServiceNotifyRequest]) (*connect.Response[infrav2.SwitchServiceNotifyResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[infrav2.SwitchServiceNotifyRequest]) *connect.Response[infrav2.SwitchServiceNotifyResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[infrav2.SwitchServiceNotifyResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[infrav2.SwitchServiceNotifyRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: _a0, _a1
func (_m *SwitchServiceClient) Register(_a0 context.Context, _a1 *connect.Request[infrav2.SwitchServiceRegisterRequest]) (*connect.Response[infrav2.SwitchServiceRegisterResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *connect.Response[infrav2.SwitchServiceRegisterResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[infrav2.SwitchServiceRegisterRequest]) (*connect.Response[infrav2.SwitchServiceRegisterResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[infrav2.SwitchServiceRegisterRequest]) *connect.Response[infrav2.SwitchServiceRegisterResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[infrav2.SwitchServiceRegisterResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[infrav2.SwitchServiceRegisterRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSwitchServiceClient creates a new instance of SwitchServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSwitchServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SwitchServiceClient {
	mock := &SwitchServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
