// Code generated by mockery v2.53.5. DO NOT EDIT.

package infrav2connect

import (
	context "context"

	infrav2 "github.com/metal-stack/api/go/metalstack/infra/v2"
	mock "github.com/stretchr/testify/mock"
)

// EventServiceHandler is an autogenerated mock type for the EventServiceHandler type
type EventServiceHandler struct {
	mock.Mock
}

// Send provides a mock function with given fields: _a0, _a1
func (_m *EventServiceHandler) Send(_a0 context.Context, _a1 *infrav2.EventServiceSendRequest) (*infrav2.EventServiceSendResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 *infrav2.EventServiceSendResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrav2.EventServiceSendRequest) (*infrav2.EventServiceSendResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrav2.EventServiceSendRequest) *infrav2.EventServiceSendResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrav2.EventServiceSendResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrav2.EventServiceSendRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMulti provides a mock function with given fields: _a0, _a1
func (_m *EventServiceHandler) SendMulti(_a0 context.Context, _a1 *infrav2.EventServiceSendMultiRequest) (*infrav2.EventServiceSendMultiResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SendMulti")
	}

	var r0 *infrav2.EventServiceSendMultiResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrav2.EventServiceSendMultiRequest) (*infrav2.EventServiceSendMultiResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrav2.EventServiceSendMultiRequest) *infrav2.EventServiceSendMultiResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrav2.EventServiceSendMultiResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrav2.EventServiceSendMultiRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEventServiceHandler creates a new instance of EventServiceHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventServiceHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventServiceHandler {
	mock := &EventServiceHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
