syntax = "proto3";

package metalstack.api.v2;

import "buf/validate/validate.proto";
import "metalstack/api/v2/common.proto";
import "metalstack/api/v2/predefined_string_rules.proto";

// FilesystemService serves filesystem related functions
service FilesystemService {
  // Get a filesystem
  rpc Get(FilesystemServiceGetRequest) returns (FilesystemServiceGetResponse) {
    option (visibility) = VISIBILITY_SELF;
    option (auditing) = AUDITING_EXCLUDED;
  }
  // List all filesystems
  rpc List(FilesystemServiceListRequest) returns (FilesystemServiceListResponse) {
    option (visibility) = VISIBILITY_SELF;
    option (auditing) = AUDITING_EXCLUDED;
  }
  // Match a filesystems
  rpc Match(FilesystemServiceMatchRequest) returns (FilesystemServiceMatchResponse) {
    option (visibility) = VISIBILITY_SELF;
    option (auditing) = AUDITING_EXCLUDED;
  }
}

// FilesystemServiceGetRequest is the request payload for a filesystem get request
message FilesystemServiceGetRequest {
  // ID of the filesystem to get
  string id = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
}

// FilesystemServiceListRequest is the request payload for a filesystem list request
message FilesystemServiceListRequest {
  // ID of the filesystem to get
  optional string id = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
}

// FilesystemServiceGetResponse is the response payload for a filesystem get request
message FilesystemServiceGetResponse {
  // FilesystemLayout the filesystemlayout
  FilesystemLayout filesystem_layout = 1;
}

// FilesystemServiceListResponse is the response payload for a filesystem list request
message FilesystemServiceListResponse {
  // FilesystemLayouts the filesystemlayouts
  repeated FilesystemLayout filesystem_layouts = 1;
}

// FilesystemServiceMatchRequest
message FilesystemServiceMatchRequest {
  // Match either size and image to a filesystemlayout
  // or if a machine matches to a filesystemlayout
  oneof match {
    // SizeAndImage
    MatchImageAndSize size_and_image = 1;
    // MachineAndFilesystemlayout
    MatchMachine machine_and_filesystemlayout = 2;
  }
}

// MatchImageAndSize
message MatchImageAndSize {
  // Size, machine size to try
  string size = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Image machine image to try
  string image = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
}

// MatchMachine
message MatchMachine {
  // Machine to check
  string machine = 1 [(buf.validate.field).string.uuid = true];
  // FilesystemLayout to check
  string filesystem_layout = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
}

// FilesystemServiceMatchResponse
message FilesystemServiceMatchResponse {
  // FilesystemLayout the filesystemlayout
  FilesystemLayout filesystem_layout = 1;
}

// FilesystemLayout
message FilesystemLayout {
  // Id of this filesystemLayout
  string id = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Meta for this filesystemLayout
  Meta meta = 2;
  // Name of this filesystemLayout
  optional string name = 3 [(buf.validate.field).string.(is_name) = true];
  // Description of this filesystemLayout
  optional string description = 4 [(buf.validate.field).string.(is_description) = true];
  // Filesystems is a list of filesystems to create on a machine
  repeated Filesystem filesystems = 5;
  // Disks list of disks that belong to this layout
  repeated Disk disks = 6;
  // raid arrays to create
  repeated Raid raid = 7;
  // VolumeGroups list of volumegroups to create
  repeated VolumeGroup volume_groups = 8;
  // LogicalVolumes list of logicalvolumes to create
  repeated LogicalVolume logical_volumes = 9;
  // Constraints which must match that this layout is taken, if sizes and images are empty these are develop layouts
  FilesystemLayoutConstraints constraints = 10;
}

// FilesystemLayoutConstraints
message FilesystemLayoutConstraints {
  // Sizes list of sizes this layout applies to
  repeated string sizes = 1;
  // Images list of images this layout applies to
  map<string, string> images = 2;
}

// Filesystem
message Filesystem {
  // Device the underlying device where this filesystem should be created
  string device = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Format of the filesystem format
  Format format = 2 [
    (buf.validate.field).enum.defined_only = true,
    (buf.validate.field).required = true
  ];
  // Name of this filesystem
  optional string name = 3 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Description of this filesystem
  optional string description = 4 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Path the mountpoint where this filesystem should be mounted on
  optional string path = 5 [(buf.validate.field).string = {
    min_len: 2
    max_len: 4096
  }];
  // Label optional label for this this filesystem
  optional string label = 6 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // MountOptions the options to use to mount this filesystem
  repeated string mount_options = 7 [(buf.validate.field).repeated = {
    unique: true
    max_items: 32
    items: {
      string: {
        min_len: 1
        max_len: 128
      }
    }
  }];
  // CreateOptions the options to use to create (mkfs) this filesystem
  repeated string create_options = 8 [(buf.validate.field).repeated = {
    unique: true
    max_items: 32
    items: {
      string: {
        min_len: 1
        max_len: 128
      }
    }
  }];
}

// Disk
message Disk {
  // Device the device to create the partitions
  string device = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Partitions list of partitions to create on this disk
  repeated DiskPartition partitions = 2;
}

// Raid
message Raid {
  // ArrayName the name of the resulting array device
  string array_name = 1;
  // Devices list of devices to form the raid array from
  repeated string devices = 2;
  // Level raid level to create, should be 0 or 1
  RaidLevel level = 3 [
    (buf.validate.field).enum.defined_only = true,
    (buf.validate.field).required = true
  ];
  // CreateOptions the options to use to create the raid array
  repeated string create_options = 4 [(buf.validate.field).repeated = {
    unique: true
    max_items: 32
    items: {
      string: {
        min_len: 1
        max_len: 128
      }
    }
  }];
  // Spares number of spares for the raid array
  int32 spares = 5;
}

// DiskPartition
message DiskPartition {
  // Number partition number, will be appended to partitionprefix to create the final devicename
  uint32 number = 1;
  // optional label for this this partition
  optional string label = 2;
  // Size size in mebibytes (MiB) of this partition"
  uint64 size = 3;
  // GPTType the gpt partition table type of this partition
  optional GPTType gpt_type = 4 [
    (buf.validate.field).enum.defined_only = true,
    (buf.validate.field).required = true
  ];
}

// VolumeGroup
message VolumeGroup {
  // Name the name of the resulting volume group
  string name = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Devices list of devices to form the volume group from
  repeated string devices = 2;
  // Tags list of tags to add to the volume group
  repeated string tags = 3;
}

// LogicalVolume
message LogicalVolume {
  // Name the name of the logical volume
  string name = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // VolumeGroup the name of the volume group where to create the logical volume onto
  string volume_group = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Size size in mebibytes (MiB) of this volume
  uint64 size = 3;
  // LVMType the type of this logical volume can be either linear|striped|raid1
  LVMType lvm_type = 4 [(buf.validate.field).enum.defined_only = true];
}

// LVMType
enum LVMType {
  // LVM_TYPE_UNSPECIFIED is not specified
  LVM_TYPE_UNSPECIFIED = 0;
  // LVM_TYPE_LINEAR append across all physical volumes
  LVM_TYPE_LINEAR = 1 [(enum_string_value) = "linear"];
  // LVM_TYPE_STRIPED stripe across all physical volumes
  LVM_TYPE_STRIPED = 2 [(enum_string_value) = "striped"];
  // LVM_TYPE_RAID1 mirror with raid across all physical volumes
  LVM_TYPE_RAID1 = 3 [(enum_string_value) = "raid1"];
}

// Format specifies the filesystem to use on a volume
enum Format {
  // FORMAT_UNSPECIFIED
  FORMAT_UNSPECIFIED = 0;
  // FORMAT_VFAT is used for the UEFI boot partition
  FORMAT_VFAT = 1 [(enum_string_value) = "vfat"];
  // FORMAT_EXT3 is usually only used for /boot
  FORMAT_EXT3 = 2 [(enum_string_value) = "ext3"];
  // FORMAT_EXT4 is the default fs
  FORMAT_EXT4 = 3 [(enum_string_value) = "ext4"];
  // FORMAT_SWAP is for the swap partition
  FORMAT_SWAP = 4 [(enum_string_value) = "swap"];
  // FORMAT_TMPFS is used for a memory filesystem typically /tmp
  FORMAT_TMPFS = 5 [(enum_string_value) = "tmpfs"];
  // FORMAT_NONE
  FORMAT_NONE = 6 [(enum_string_value) = "none"];
}

// GPTType specifies the partition type in uefi systems
enum GPTType {
  // GPT_TYPE_UNSPECIFIED is no specified
  GPT_TYPE_UNSPECIFIED = 0;
  // GPT_TYPE_BOOT EFI Boot Partition
  GPT_TYPE_BOOT = 1 [(enum_string_value) = "ef00"];
  // GPT_TYPE_LINUX Linux Partition
  GPT_TYPE_LINUX = 2 [(enum_string_value) = "8300"];
  // GPT_TYPE_LINUX_RAID Linux Raid Partition
  GPT_TYPE_LINUX_RAID = 3 [(enum_string_value) = "fd00"];
  // GPT_TYPE_LINUX_LVM Linux LVM Partition
  GPT_TYPE_LINUX_LVM = 4 [(enum_string_value) = "8e00"];
}

// RaidLevel defines howto mirror two or more block devices
enum RaidLevel {
  // RAID_LEVEL_UNSPECIFIED is not specified
  RAID_LEVEL_UNSPECIFIED = 0;
  // RAID_LEVEL_0 is a stripe of two or more disks
  RAID_LEVEL_0 = 1;
  // RAID_LEVEL_1 is a mirror of two disks
  RAID_LEVEL_1 = 2;
}
