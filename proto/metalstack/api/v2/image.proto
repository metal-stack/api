syntax = "proto3";

package metalstack.api.v2;

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";
import "metalstack/api/v2/common.proto";
import "metalstack/api/v2/predefined_string_rules.proto";

// ImageService serves image related functions
service ImageService {
  // Get a image
  rpc Get(ImageServiceGetRequest) returns (ImageServiceGetResponse) {
    option (visibility) = VISIBILITY_SELF;
    option (auditing) = AUDITING_EXCLUDED;
  }
  // List all images
  rpc List(ImageServiceListRequest) returns (ImageServiceListResponse) {
    option (visibility) = VISIBILITY_SELF;
    option (auditing) = AUDITING_EXCLUDED;
  }
  // Latest image for a specific os
  rpc Latest(ImageServiceLatestRequest) returns (ImageServiceLatestResponse) {
    option (visibility) = VISIBILITY_SELF;
    option (auditing) = AUDITING_EXCLUDED;
  }
}

// ImageServiceGetRequest is the request payload for a image get request
message ImageServiceGetRequest {
  // ID of the image to get
  string id = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
}

// ImageServiceListRequest is the request payload for a image list request
message ImageServiceListRequest {
  // Query for images
  ImageQuery query = 1;
}

// ImageServiceLatestRequest is the request payload for a image latest request
message ImageServiceLatestRequest {
  // OS for which the latest image should be fetched
  // should contain os and major.minor then latest patch version of this os is returned
  string os = 1;
}

// ImageServiceGetResponse is the response payload for a image get request
message ImageServiceGetResponse {
  // Image the image
  Image image = 1;
}

// ImageServiceListResponse is the response payload for a image list request
message ImageServiceListResponse {
  // Images the images
  repeated Image images = 1;
}

// ImageServiceLatestResponse is the response payload for a image latest request
message ImageServiceLatestResponse {
  // Image which is the latest for one os
  Image image = 1;
}

// Image
message Image {
  // Id of this imageLayout
  string id = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Meta for this ip
  Meta meta = 2;
  // URL where this image is located
  string url = 3 [(buf.validate.field).cel = {
    id: "valid_url"
    message: "url must be a valid URI"
    // `isUri` validates that a string is an absolute URI.
    // This expression validates that the uri field is an absolute URI.
    // Note: to allow relative URI, use `isUriRef`.
    expression: "this.isUri()"
  }];
  // Name of this imageLayout
  optional string name = 4 [(buf.validate.field).string.(is_name) = true];
  // Description of this imageLayout
  optional string description = 5 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Features of this image
  repeated ImageFeature features = 6 [(buf.validate.field).repeated = {
    min_items: 1
    items: {
      cel: [
        {
          id: "features"
          message: "feature must be valid"
          expression: "this >= 0 && this <= 2"
        }
      ]
    }
  }];
  // Classification of this image
  ImageClassification classification = 7 [(buf.validate.field).enum.defined_only = true];

  // ExpiresAt usage is not possible after this date
  google.protobuf.Timestamp expires_at = 8;
}

// ImageUsage reports which machines/firewalls actually use this image
message ImageUsage {
  // Image with usage
  Image image = 1;
  // UsedBy the following machines/firewalls
  repeated string used_by = 2;
}

// ImageQuery is used to search images
message ImageQuery {
  // ID of the image to get
  optional string id = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // OS of the image
  optional string os = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Version of the Image
  optional string version = 3 [(buf.validate.field).string = {
    min_len: 1
    max_len: 128
  }];
  // Name of the image to query
  optional string name = 4 [(buf.validate.field).string.(is_name) = true];
  // Description of the image to query
  optional string description = 5 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Url of the image to query
  optional string url = 6 [(buf.validate.field).cel = {
    id: "valid_url"
    message: "url must be a valid URI"
    // `isUri` validates that a string is an absolute URI.
    // This expression validates that the uri field is an absolute URI.
    // Note: to allow relative URI, use `isUriRef`.
    expression: "this.isUri()"
  }];
  // Feature of the image to query
  optional ImageFeature feature = 7 [(buf.validate.field).enum.defined_only = true];

  // Classification of the image to query
  optional ImageClassification classification = 8 [(buf.validate.field).enum.defined_only = true];

  // Labels lists only images containing the given labels
  optional Labels labels = 9;
}

// ImageFeature
enum ImageFeature {
  // IMAGE_FEATURE_UNSPECIFIED is not specified
  IMAGE_FEATURE_UNSPECIFIED = 0;
  // IMAGE_FEATURE_MACHINE indicates this image is usable for a machine
  IMAGE_FEATURE_MACHINE = 1 [(enum_string_value) = "machine"];
  // IMAGE_FEATURE_FIREWALL indicates this image is usable for a firewall
  IMAGE_FEATURE_FIREWALL = 2 [(enum_string_value) = "firewall"];
}

// Image
enum ImageClassification {
  // IMAGE_CLASSIFICATION_UNSPECIFIED is not specified
  IMAGE_CLASSIFICATION_UNSPECIFIED = 0;
  // IMAGE_CLASSIFICATION_PREVIEW indicates that this image is in preview
  IMAGE_CLASSIFICATION_PREVIEW = 1 [(enum_string_value) = "preview"];
  // IMAGE_CLASSIFICATION_SUPPORTED indicates that this image is supported
  IMAGE_CLASSIFICATION_SUPPORTED = 2 [(enum_string_value) = "supported"];
  // IMAGE_CLASSIFICATION_DEPRECATED indicates that this image is deprecated
  IMAGE_CLASSIFICATION_DEPRECATED = 3 [(enum_string_value) = "deprecated"];
}
