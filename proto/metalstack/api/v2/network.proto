syntax = "proto3";

package metalstack.api.v2;

import "buf/validate/validate.proto";
import "metalstack/api/v2/common.proto";
import "metalstack/api/v2/ip.proto";

// NetworkService serves network address related functions for end users, e.g. with project scope
service NetworkService {
  // Get a network
  rpc Get(NetworkServiceGetRequest) returns (NetworkServiceGetResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
    option (project_roles) = PROJECT_ROLE_VIEWER;
    option (auditing) = AUDITING_EXCLUDED;
  }
  // Create a child network from a super network.
  rpc Create(NetworkServiceCreateRequest) returns (NetworkServiceCreateResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
  }
  // Update a network
  rpc Update(NetworkServiceUpdateRequest) returns (NetworkServiceUpdateResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
  }
  // List all project networks
  rpc List(NetworkServiceListRequest) returns (NetworkServiceListResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
    option (project_roles) = PROJECT_ROLE_VIEWER;
    option (auditing) = AUDITING_EXCLUDED;
  }
  // ListBaseNetworks all unscoped networks
  rpc ListBaseNetworks(NetworkServiceListBaseNetworksRequest) returns (NetworkServiceListBaseNetworksResponse) {
    option (visibility) = VISIBILITY_SELF;
    option (auditing) = AUDITING_EXCLUDED;
  }
  // Delete a network
  rpc Delete(NetworkServiceDeleteRequest) returns (NetworkServiceDeleteResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
  }
}

// NetworkServiceGetRequest
message NetworkServiceGetRequest {
  // ID of the network to get
  string id = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Project of the network
  string project = 2 [(buf.validate.field).string.uuid = true];
}

// NetworkServiceGetResponse
message NetworkServiceGetResponse {
  // Network which was requested to get
  Network network = 1;
}

// NetworkServiceCreateRequest
message NetworkServiceCreateRequest {
  // Project where this network belongs to
  string project = 1 [(buf.validate.field).string.uuid = true];
  // Name of this network
  optional string name = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Description of this network
  optional string description = 3 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Partition where this network will be created
  optional string partition = 4 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Labels on this network
  Labels labels = 5;
  // Parent NetworkId points to the id of the parent network if any
  optional string parent_network_id = 6 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Bitlength per addressfamily
  optional ChildPrefixLength length = 7;
  // AddressFamily to create, defaults to the same as the parent
  optional IPAddressFamily address_family = 8 [(buf.validate.field).enum.defined_only = true];
}

// NetworkServiceCreateResponse
message NetworkServiceCreateResponse {
  // Network is the created network
  Network network = 1;
}

// NetworkServiceUpdateRequest
message NetworkServiceUpdateRequest {
  // ID of the network to get
  string id = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Project of the network
  string project = 2 [(buf.validate.field).string.uuid = true];
  // Name of this network
  optional string name = 3 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Description of this network
  optional string description = 4 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Labels on this network
  optional UpdateLabels labels = 5;
}

// NetworkServiceUpdateResponse
message NetworkServiceUpdateResponse {
  // Network is the updated network
  Network network = 1;
}

// NetworkServiceListRequest
message NetworkServiceListRequest {
  // Project of the networks to list
  string project = 1 [(buf.validate.field).string.uuid = true];
  // Query which specifies which networks to return
  NetworkQuery query = 2;
}

// NetworkServiceListResponse
message NetworkServiceListResponse {
  // Networks are the requested networks
  repeated Network networks = 1;
}

// NetworkServiceListRequest
message NetworkServiceListBaseNetworksRequest {
  // Query which specifies which networks to return
  NetworkQuery query = 2;
}

// NetworkServiceListResponse
message NetworkServiceListBaseNetworksResponse {
  // Networks are the requested networks
  repeated Network networks = 1;
}

// NetworkServiceDeleteRequest
message NetworkServiceDeleteRequest {
  // ID of the network to get
  string id = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Project of the network
  string project = 2 [(buf.validate.field).string.uuid = true];
}

// NetworkServiceDeleteResponse
message NetworkServiceDeleteResponse {
  // Network is the deleted network
  Network network = 1;
}

// Network
message Network {
  // Id of this network
  string id = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Meta for this ip
  Meta meta = 2;
  // Name of this network
  optional string name = 3 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Description of this network
  optional string description = 4 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Partition where this network will be created
  optional string partition = 5 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Project where this network belongs to
  optional string project = 6 [(buf.validate.field).string.uuid = true];
  // Namespace if specified, this network is namespaced and can therefore overlap with others
  // Will be equal with project most of the time
  optional string namespace = 7 [(buf.validate.field).string.uuid = true];
  option (buf.validate.message).cel = {
    id: "prefixes"
    message: "given prefixes must be valid"
    expression: "this.prefixes.all(m, m.isIpPrefix())"
  };
  // Prefixes in this network
  repeated string prefixes = 8;
  option (buf.validate.message).cel = {
    id: "destination_prefixes"
    message: "given destination_prefixes must be valid"
    expression: "this.destination_prefixes.all(m, m.isIpPrefix())"
  };
  // Destination Prefixes in this network
  repeated string destination_prefixes = 9;
  // Default Child Prefix length defines the bitlength of a child network created per addressfamily, of not specified during the allocate request
  ChildPrefixLength default_child_prefix_length = 10;
  // Min Child Prefix length defines the min bitlength of a child network created per addressfamily during a allocate request
  ChildPrefixLength min_child_prefix_length = 11;
  // Type of the network
  optional NetworkType type = 12 [(buf.validate.field).enum.defined_only = true];
  // NATType of this network
  optional NATType nat_type = 13 [(buf.validate.field).enum.defined_only = true];
  // Vrf ID of this network
  optional uint32 vrf = 14;
  // Parent NetworkId points to the id of the parent network if any
  optional string parent_network_id = 15 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  option (buf.validate.message).cel = {
    id: "additional_announcable_cidrs"
    message: "given additional_announcable_cidrs must be valid"
    expression: "this.additional_announcable_cidrs.all(m, m.isIpPrefix())"
  };
  // AdditionalAnnouncableCidrs will be added to the allow list on the switch which prefixes might be announced
  repeated string additional_announcable_cidrs = 16;
  // Consumption of ips and prefixes in this networks
  NetworkConsumption consumption = 17;
}

// NetworkQuery defines which networks to query
message NetworkQuery {
  // Id of the network to query
  optional string id = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Name of this network
  optional string name = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Description of this network
  optional string description = 3 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Partition where this network will be created
  optional string partition = 4 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Project where this network belongs to
  optional string project = 5 [(buf.validate.field).string.uuid = true];
  option (buf.validate.message).cel = {
    id: "prefixes"
    message: "given prefixes must be valid"
    expression: "this.prefixes.all(m, m.isIpPrefix())"
  };
  // Prefixes in this network
  repeated string prefixes = 6;
  option (buf.validate.message).cel = {
    id: "destination_prefixes"
    message: "given destination_prefixes must be valid"
    expression: "this.destination_prefixes.all(m, m.isIpPrefix())"
  };
  // Destination Prefixes in this network
  repeated string destination_prefixes = 7;
  // Vrf ID of this network
  optional uint32 vrf = 8;
  // Parent NetworkId points to the id of the parent network if any
  optional string parent_network_id = 9 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Addressfamily to query
  optional IPAddressFamily address_family = 10 [(buf.validate.field).enum.defined_only = true];
  // Type of the network to query for
  optional NetworkType type = 11 [(buf.validate.field).enum.defined_only = true];
  // NATType configured
  optional NATType nat_type = 12 [(buf.validate.field).enum.defined_only = true];
  // Labels on this network
  Labels labels = 13;
}

// NATType defines how and if outgoing traffic is translated
enum NATType {
  // NAT_TYPE_UNSPECIFIED indicates a unspecified nat type
  NAT_TYPE_UNSPECIFIED = 0;
  // NAT_TYPE_NONE indicates that no nat is configured
  NAT_TYPE_NONE = 1 [(enum_string_value) = "none"];
  // NAT_TYPE_IPV4_MASQUERADE masquerade ipv4 behind gateway ip when traffic enters this network
  NAT_TYPE_IPV4_MASQUERADE = 2 [(enum_string_value) = "ipv4-masquerade"];
}

// NetworkType indicates the purpose of the network, it cannot be changed after creation
enum NetworkType {
  // NETWORK_TYPE_UNSPECIFIED indicates a unknown network type
  NETWORK_TYPE_UNSPECIFIED = 0;
  // NETWORK_TYPE_EXTERNAL indicates network where multiple projects can allocate ips, it offers connectivity to external networks
  // In most cases this is the internet network or a network which offers connectivity to legacy datacenter networks.
  // If it is not project scoped everyone can allocate Ips in this network, otherwise only from the same project ip allocation is possible.
  NETWORK_TYPE_EXTERNAL = 1 [(enum_string_value) = "external"];
  // NETWORK_TYPE_UNDERLAY indicates a underlay network
  // The underlay network connects all switches and the firewalls to build a EVPN dataplane
  // It is not project scoped. Is part of the dataplane and reserved for administrative purposes.
  NETWORK_TYPE_UNDERLAY = 2 [(enum_string_value) = "underlay"];

  // NETWORK_TYPE_SUPER indicates a super network which is only used to create child networks
  // If the vrf id is given, child networks will inherit this vrf.
  // If the vrf id is nil in this network, child vrf is taken from the pool.
  // If the partition is given, child networks inherit the partition.
  // If the partition is nil, child networks also do not have a partition (i.e. requires vrf is distributed across all partitions).
  // For child creation destination prefixes will be inherited
  // If this is project scoped, child project must match, otherwise can be freely specified.
  NETWORK_TYPE_SUPER = 3 [(enum_string_value) = "super"];
  // NETWORK_TYPE_SUPER_NAMESPACED indicates a super network which is only used to create child networks.
  // All rules from NETWORK_TYPE_SUPER apply for them as well.
  // In addition, a network namespace will be created for every project. Child networks per project will have disjunct prefixes.
  // Prefix allocation will start again with the same base cidr for every project / namespace.
  // This will allow the creation of much more child networks from a given super network size.
  NETWORK_TYPE_SUPER_NAMESPACED = 4 [(enum_string_value) = "super-namespaced"];

  // NETWORK_TYPE_CHILD indicates a child network of a project.
  // This is the only network type that can be created by a user.
  // Connectivity to external networks is not possible without going through an additional firewall in this network which creates connectivity to other networks.
  // Such a network will be created either from a super, or super namespaced.
  NETWORK_TYPE_CHILD = 5 [(enum_string_value) = "child"];
  // NETWORK_TYPE_CHILD_SHARED indicates a child network of a project which allows the allocation of ips from different projects.
  // Connectivity to external networks is not possible, as for normal child networks.
  // These networks are usually used to provide connectivity to shared services which are created in child networks, e.g. storage.
  // With this approach the number of hops can be reduced to the bare minimum in order to increase availability and performance.
  NETWORK_TYPE_CHILD_SHARED = 6 [(enum_string_value) = "child-shared"];
}

// ChildPrefixLength
message ChildPrefixLength {
  // IPv4 bit Length of this network in this addressfamily
  optional uint32 ipv4 = 1 [(buf.validate.field).uint32 = {
    gt: 0
    lte: 32
  }];
  // IPv6 bit Length of this network in this addressfamily
  optional uint32 ipv6 = 2 [(buf.validate.field).uint32 = {
    gt: 0
    lte: 128
  }];
}

// NetworkConsumption contains ip and prefix usage by addressfamily
message NetworkConsumption {
  // IPv4 network usage
  NetworkUsage ipv4 = 1;
  // IPv6 network usage
  NetworkUsage ipv6 = 2;
}

// NetworkUsage reports core metrics about available and used IPs or Prefixes in a Network.
message NetworkUsage {
  // the total available IPs
  uint64 available_ips = 2;
  // the total used IPs
  uint64 used_ips = 3;
  // the total available 2 bit Prefixes
  uint64 available_prefixes = 4;
  // the total used Prefixes
  uint64 used_prefixes = 5;
}
