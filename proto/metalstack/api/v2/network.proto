syntax = "proto3";

package metalstack.api.v2;

import "buf/validate/validate.proto";
import "metalstack/api/v2/common.proto";
import "metalstack/api/v2/ip.proto";

// NetworkService serves network address related functions
service NetworkService {
  // Get a network
  rpc Get(NetworkServiceGetRequest) returns (NetworkServiceGetResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
    option (project_roles) = PROJECT_ROLE_VIEWER;
    option (auditing) = AUDITING_EXCLUDED;
  }
  // Create a network
  rpc Create(NetworkServiceCreateRequest) returns (NetworkServiceCreateResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
  }
  // Update a network
  rpc Update(NetworkServiceUpdateRequest) returns (NetworkServiceUpdateResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
  }
  // List all networks
  rpc List(NetworkServiceListRequest) returns (NetworkServiceListResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
    option (project_roles) = PROJECT_ROLE_VIEWER;
    option (auditing) = AUDITING_EXCLUDED;
  }
  // Delete a network
  rpc Delete(NetworkServiceDeleteRequest) returns (NetworkServiceDeleteResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
  }
}

// NetworkServiceGetRequest
message NetworkServiceGetRequest {
  // ID of the network to get
  string id = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Project of the network
  string project = 2 [(buf.validate.field).string.uuid = true];
}

// NetworkServiceGetResponse
message NetworkServiceGetResponse {
  // Network which was requested to get
  Network network = 1;
}

// NetworkServiceCreateRequest
message NetworkServiceCreateRequest {
  // Project where this network belongs to
  string project = 1 [(buf.validate.field).string.uuid = true];
  // Name of this network
  optional string name = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Description of this network
  optional string description = 3 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Partition where this network will be created
  optional string partition = 4 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];

  // Labels on this network
  Labels labels = 5;
  // Parent NetworkId points to the id of the parent network if any
  optional string parent_network_id = 6 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Bitlength per addressfamily
  repeated ChildPrefixLength length = 7;
  // AddressFamily to create, defaults to the same as the parent
  optional IPAddressFamily address_family = 8 [(buf.validate.field).enum.defined_only = true];
  option (buf.validate.message).cel = {
    id: "destination_prefixes"
    message: "given destination_prefixes must be valid"
    expression: "this.destination_prefixes.all(m, m.isIpPrefix())"
  };
  // Destination Prefixes in this network
  // TODO is this really required here
  repeated string destination_prefixes = 9;
  // Options of this network
  metalstack.api.v2.NetworkOptions options = 10;
}

// NetworkServiceCreateResponse
message NetworkServiceCreateResponse {
  // Network is the created network
  Network network = 1;
}

// NetworkServiceUpdateRequest
message NetworkServiceUpdateRequest {
  // ID of the network to get
  string id = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Project of the network
  string project = 2 [(buf.validate.field).string.uuid = true];
  // FIXME which fields should be updateable ?
}

// NetworkServiceUpdateResponse
message NetworkServiceUpdateResponse {
  // Network is the updated network
  Network network = 1;
}

// NetworkServiceListRequest
message NetworkServiceListRequest {
  // Project of the networks to list
  string project = 1 [(buf.validate.field).string.uuid = true];
  // Query which specifies which networks to return
  NetworkQuery query = 2;
}

// NetworkServiceListResponse
message NetworkServiceListResponse {
  // Networks are the requested networks
  repeated Network networks = 1;
}

// NetworkServiceDeleteRequest
message NetworkServiceDeleteRequest {
  // ID of the network to get
  string id = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Project of the network
  string project = 2 [(buf.validate.field).string.uuid = true];
}

// NetworkServiceDeleteResponse
message NetworkServiceDeleteResponse {
  // Network is the deleted network
  Network network = 1;
}

// Network
message Network {
  // Id of this network
  string id = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Meta for this ip
  Meta meta = 2;
  // Name of this network
  optional string name = 3 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Description of this network
  optional string description = 4 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Partition where this network will be created
  optional string partition = 5 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Project where this network belongs to
  optional string project = 6 [(buf.validate.field).string.uuid = true];
  option (buf.validate.message).cel = {
    id: "prefixes"
    message: "given prefixes must be valid"
    expression: "this.prefixes.all(m, m.isIpPrefix())"
  };
  // Prefixes in this network
  repeated string prefixes = 8;
  option (buf.validate.message).cel = {
    id: "destination_prefixes"
    message: "given destination_prefixes must be valid"
    expression: "this.destination_prefixes.all(m, m.isIpPrefix())"
  };
  // Destination Prefixes in this network
  repeated string destination_prefixes = 9;
  // Default Child Prefix length defines the bitlength of a child network created per addressfamily, of not specified during the allocate request
  repeated ChildPrefixLength default_child_prefix_length = 10;
  // Options of this network
  NetworkOptions options = 11;
  // Vrf ID of this network
  optional uint32 vrf = 12;
  // Parent NetworkId points to the id of the parent network if any
  optional string parent_network_id = 13 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  option (buf.validate.message).cel = {
    id: "additional_announceble_cidrs"
    message: "given additional_announceble_cidrs must be valid"
    expression: "this.additional_announceble_cidrs.all(m, m.isIpPrefix())"
  };
  // AdditionalAnnouncableCidrs will be added to the allow list on the switch which prefixes might be announced
  repeated string additional_announceble_cidrs = 14;
  // Consumption of ips and prefixes in this networks
  NetworkConsumption consumption = 15;
}

// NetworkQuery defines which networks to query
message NetworkQuery {
  // Id of the network to query
  optional string id = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Name of this network
  optional string name = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Description of this network
  optional string description = 3 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Partition where this network will be created
  optional string partition = 4 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Project where this network belongs to
  optional string project = 5 [(buf.validate.field).string.uuid = true];
  option (buf.validate.message).cel = {
    id: "prefixes"
    message: "given prefixes must be valid"
    expression: "this.prefixes.all(m, m.isIpPrefix())"
  };
  // Prefixes in this network
  repeated string prefixes = 6;
  option (buf.validate.message).cel = {
    id: "destination_prefixes"
    message: "given destination_prefixes must be valid"
    expression: "this.destination_prefixes.all(m, m.isIpPrefix())"
  };
  // Destination Prefixes in this network
  repeated string destination_prefixes = 7;
  // Vrf ID of this network
  optional uint32 vrf = 8;
  // Parent NetworkId points to the id of the parent network if any
  optional string parent_network_id = 9 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Addressfamily to query
  optional IPAddressFamily address_family = 10 [(buf.validate.field).enum.defined_only = true];
  // Labels on this network
  Labels labels = 11;
  // NetworkOptions to query for
  message Options {
    // Shared indicates if this network could be shared between projects
    optional bool shared = 1;
    // Nat defines that outgoing traffic is natted
    optional bool nat = 2;
    // PrivateSuper indicates that this network serves a super network for project networks
    optional bool private_super = 3;
    // Underlay indicates that this network is a underlay network
    optional bool underlay = 4;
    // VrfShared indicates if this network shares the vrf id with other networks
    optional bool vrf_shared = 5;
  }
  // Options to query for
  Options options = 12;
}

// NetworkOptions
message NetworkOptions {
  // Shared indicates if this network could be shared between projects
  bool shared = 1;
  // Nat defines that outgoing traffic is natted
  bool nat = 2;
  // PrivateSuper indicates that this network serves a super network for project networks
  bool private_super = 3;
  // Underlay indicates that this network is a underlay network
  bool underlay = 4;
  // VrfShared indicates if this network shares the vrf id with other networks
  bool vrf_shared = 5;
}

// ChildPrefixLength
message ChildPrefixLength {
  // AddressFamily of this network
  IPAddressFamily address_family = 1 [(buf.validate.field).enum.defined_only = true];
  // Bit Length of this network in this addressfamily
  uint32 length = 2;
}

// NetworkConsumption
message NetworkConsumption {
  // ip and prefix consumption in the ipv4 addressfamily
  NetworkUsage ipv4 = 1;
  // ip and prefix consumption in the ipv6 addressfamily
  NetworkUsage ipv6 = 2;
}

// NetworkUsage reports core metrics about available and used IPs or Prefixes in a Network.
message NetworkUsage {
  // the total available IPs
  uint64 available_ips = 1;
  // the total used IPs
  uint64 used_ips = 2;
  // the total available 2 bit Prefixes
  uint64 available_prefixes = 3;
  // the total used Prefixes
  uint64 used_prefixes = 4;
}
