syntax = "proto3";

package metalstack.admin.v2;

import "buf/validate/validate.proto";
import "metalstack/api/v2/common.proto";
import "metalstack/api/v2/image.proto";

// ImageService serves image related functions
service ImageService {
  // Create a image
  rpc Create(ImageServiceCreateRequest) returns (ImageServiceCreateResponse) {
    option (metalstack.api.v2.admin_roles) = ADMIN_ROLE_EDITOR;
    option (metalstack.api.v2.auditing) = AUDITING_INCLUDED;
  }
  // Update a image
  rpc Update(ImageServiceUpdateRequest) returns (ImageServiceUpdateResponse) {
    option (metalstack.api.v2.admin_roles) = ADMIN_ROLE_EDITOR;
    option (metalstack.api.v2.auditing) = AUDITING_INCLUDED;
  }
  // Delete a image
  rpc Delete(ImageServiceDeleteRequest) returns (ImageServiceDeleteResponse) {
    option (metalstack.api.v2.admin_roles) = ADMIN_ROLE_EDITOR;
    option (metalstack.api.v2.auditing) = AUDITING_INCLUDED;
  }
  // Usage of images
  rpc Usage(ImageServiceUsageRequest) returns (ImageServiceUsageResponse) {
    option (metalstack.api.v2.admin_roles) = ADMIN_ROLE_EDITOR;
    option (metalstack.api.v2.admin_roles) = ADMIN_ROLE_VIEWER;
  }
}

// ImageServiceCreateRequest
message ImageServiceCreateRequest {
  // Image is the image
  metalstack.api.v2.Image image = 1;
}

// ImageServiceCreateResponse
message ImageServiceCreateResponse {
  // Image is the image
  metalstack.api.v2.Image image = 1;
}

// ImageServiceUpdateRequest
message ImageServiceUpdateRequest {
  // ID of the image to update
  string id = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Image is the image
  metalstack.api.v2.Image image = 2;
}

// ImageServiceUpdateResponse
message ImageServiceUpdateResponse {
  // Image is the image
  metalstack.api.v2.Image image = 1;
}

// ImageServiceDeleteRequest
message ImageServiceDeleteRequest {
  // ID of the image to delete
  string id = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
}

// message ImageServiceDeleteResponse {
message ImageServiceDeleteResponse {
  // ImageLayout the imagelayout
  metalstack.api.v2.Image image = 1;
}

// ImageServiceUsageRequest
message ImageServiceUsageRequest {
  // Query for which images the usage should be reported
  metalstack.api.v2.ImageQuery query = 1;
}

// ImageServiceUsageResponse
message ImageServiceUsageResponse {
  // Images with usage
  repeated metalstack.api.v2.ImageUsage image_usage = 1;
}
