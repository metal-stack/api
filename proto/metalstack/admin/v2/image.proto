syntax = "proto3";

package metalstack.admin.v2;

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";
import "metalstack/api/v2/common.proto";
import "metalstack/api/v2/image.proto";

// ImageService serves image related functions
service ImageService {
  // Create a image
  rpc Create(ImageServiceCreateRequest) returns (ImageServiceCreateResponse) {
    option (metalstack.api.v2.admin_roles) = ADMIN_ROLE_EDITOR;
    option (metalstack.api.v2.auditing) = AUDITING_INCLUDED;
  }
  // Update a image
  rpc Update(ImageServiceUpdateRequest) returns (ImageServiceUpdateResponse) {
    option (metalstack.api.v2.admin_roles) = ADMIN_ROLE_EDITOR;
    option (metalstack.api.v2.auditing) = AUDITING_INCLUDED;
  }
  // Delete a image
  rpc Delete(ImageServiceDeleteRequest) returns (ImageServiceDeleteResponse) {
    option (metalstack.api.v2.admin_roles) = ADMIN_ROLE_EDITOR;
    option (metalstack.api.v2.auditing) = AUDITING_INCLUDED;
  }
  // Usage of images
  rpc Usage(ImageServiceUsageRequest) returns (ImageServiceUsageResponse) {
    option (metalstack.api.v2.admin_roles) = ADMIN_ROLE_EDITOR;
    option (metalstack.api.v2.admin_roles) = ADMIN_ROLE_VIEWER;
  }
}

// ImageServiceCreateRequest
message ImageServiceCreateRequest {
  // Image is the image
  metalstack.api.v2.Image image = 1;
}

// ImageServiceCreateResponse
message ImageServiceCreateResponse {
  // Image is the image
  metalstack.api.v2.Image image = 1;
}

// ImageServiceUpdateRequest
message ImageServiceUpdateRequest {
  // Id of this image
  string id = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // UpdatedAt is the date when this entity was updated
  // must be part of the update request to ensure optimistic locking
  google.protobuf.Timestamp updated_at = 2;
  // URL where this image is located
  optional string url = 3 [(buf.validate.field).cel = {
    id: "valid_url"
    message: "url must be a valid URI"
    // `isUri` validates that a string is an absolute URI.
    // This expression validates that the uri field is an absolute URI.
    // Note: to allow relative URI, use `isUriRef`.
    expression: "this.isUri()"
  }];
  // Name of this imageLayout
  optional string name = 4 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Description of this imageLayout
  optional string description = 5 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Features of this image
  repeated metalstack.api.v2.ImageFeature features = 6 [(buf.validate.field).repeated = {
    min_items: 1
    items: {
      cel: [
        {
          id: "features"
          message: "feature must be valid"
          expression: "this >= 0 && this <= 2"
        }
      ]
    }
  }];
  // Classification of this image
  metalstack.api.v2.ImageClassification classification = 7 [(buf.validate.field).enum.defined_only = true];

  // ExpiresAt usage is not possible after this date
  google.protobuf.Timestamp expires_at = 8;
}

// ImageServiceUpdateResponse
message ImageServiceUpdateResponse {
  // Image is the image
  metalstack.api.v2.Image image = 1;
}

// ImageServiceDeleteRequest
message ImageServiceDeleteRequest {
  // ID of the image to delete
  string id = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
}

// message ImageServiceDeleteResponse {
message ImageServiceDeleteResponse {
  // ImageLayout the imagelayout
  metalstack.api.v2.Image image = 1;
}

// ImageServiceUsageRequest
message ImageServiceUsageRequest {
  // Query for which images the usage should be reported
  metalstack.api.v2.ImageQuery query = 1;
}

// ImageServiceUsageResponse
message ImageServiceUsageResponse {
  // Images with usage
  repeated metalstack.api.v2.ImageUsage image_usage = 1;
}
