syntax = "proto3";

package metalstack.admin.v2;

import "buf/validate/validate.proto";
import "metalstack/api/v2/common.proto";
import "metalstack/api/v2/network.proto";
import "metalstack/api/v2/predefined_string_rules.proto";

// NetworkService serves network address related functions
service NetworkService {
  // Get a network
  rpc Get(NetworkServiceGetRequest) returns (NetworkServiceGetResponse) {
    option (metalstack.api.v2.admin_roles) = ADMIN_ROLE_EDITOR;
    option (metalstack.api.v2.admin_roles) = ADMIN_ROLE_VIEWER;
    option (metalstack.api.v2.auditing) = AUDITING_EXCLUDED;
  }
  // Create a network
  rpc Create(NetworkServiceCreateRequest) returns (NetworkServiceCreateResponse) {
    option (metalstack.api.v2.admin_roles) = ADMIN_ROLE_EDITOR;
    option (metalstack.api.v2.auditing) = AUDITING_INCLUDED;
  }
  // Update a network
  rpc Update(NetworkServiceUpdateRequest) returns (NetworkServiceUpdateResponse) {
    option (metalstack.api.v2.admin_roles) = ADMIN_ROLE_EDITOR;
    option (metalstack.api.v2.auditing) = AUDITING_INCLUDED;
  }
  // Delete a network
  rpc Delete(NetworkServiceDeleteRequest) returns (NetworkServiceDeleteResponse) {
    option (metalstack.api.v2.admin_roles) = ADMIN_ROLE_EDITOR;
    option (metalstack.api.v2.auditing) = AUDITING_INCLUDED;
  }
  // List all networks
  rpc List(NetworkServiceListRequest) returns (NetworkServiceListResponse) {
    option (metalstack.api.v2.admin_roles) = ADMIN_ROLE_EDITOR;
    option (metalstack.api.v2.admin_roles) = ADMIN_ROLE_VIEWER;
    option (metalstack.api.v2.auditing) = AUDITING_EXCLUDED;
  }
}

// NetworkServiceGetRequest
message NetworkServiceGetRequest {
  // ID of the network to get
  string id = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
}

// NetworkServiceGetResponse
message NetworkServiceGetResponse {
  // Network which was requested to get
  metalstack.api.v2.Network network = 1;
}

// NetworkServiceCreateRequest
message NetworkServiceCreateRequest {
  // Id of this network
  optional string id = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Name of this network
  optional string name = 2 [(buf.validate.field).string.(metalstack.api.v2.is_name) = true];
  // Description of this network
  optional string description = 3 [(buf.validate.field).string.(metalstack.api.v2.is_description) = true];
  // Partition where this network will be created
  optional string partition = 4 [(buf.validate.field).string.(metalstack.api.v2.is_partition) = true];
  // Project where this network belongs to
  optional string project = 5 [(buf.validate.field).string.uuid = true];
  // Type of the network to create
  metalstack.api.v2.NetworkType type = 6 [(buf.validate.field).enum.defined_only = true];
  // Labels on this network
  optional metalstack.api.v2.Labels labels = 7;
  // Prefixes in this network
  repeated string prefixes = 8 [(buf.validate.field).repeated.(metalstack.api.v2.prefixes) = true];
  // Destination Prefixes in this network
  repeated string destination_prefixes = 9 [(buf.validate.field).repeated.(metalstack.api.v2.prefixes) = true];
  // Default Child Prefix length defines the bitlength of a child network created per addressfamily, if not specified during the allocate request
  metalstack.api.v2.ChildPrefixLength default_child_prefix_length = 10;
  // Min Child Prefix length asserts that during child network creation the requested bit length is greater or equal the min child prefix length
  metalstack.api.v2.ChildPrefixLength min_child_prefix_length = 11;
  // NATType of this network
  optional metalstack.api.v2.NATType nat_type = 12 [(buf.validate.field).enum.defined_only = true];
  // VRF of this network has this VNI.
  optional uint32 vrf = 13;
  // Parent Network points to the id of the parent network if any
  optional string parent_network = 14 [(buf.validate.field).string.(metalstack.api.v2.is_name) = true];
  // AdditionalAnnouncableCidrs will be added to the allow list on the switch which prefixes might be announced
  repeated string additional_announcable_cidrs = 15 [(buf.validate.field).repeated.(metalstack.api.v2.prefixes) = true];
  // Length per addressfamily
  optional metalstack.api.v2.ChildPrefixLength length = 16;
  // AddressFamily to create, defaults to the same as the parent
  optional metalstack.api.v2.NetworkAddressFamily address_family = 17 [(buf.validate.field).enum.defined_only = true];
}

// NetworkServiceUpdateRequest is the request payload for a network update request
message NetworkServiceUpdateRequest {
  // Id of this network
  string id = 1 [(buf.validate.field).string.(metalstack.api.v2.is_name) = true];
  // UpdateMeta contains the timestamp and strategy to be used in this update request
  metalstack.api.v2.UpdateMeta update_meta = 2 [(buf.validate.field).required = true];
  // Name of this network
  optional string name = 3 [(buf.validate.field).string.(metalstack.api.v2.is_name) = true];
  // Description of this network
  optional string description = 4 [(buf.validate.field).string.(metalstack.api.v2.is_description) = true];
  // Labels to update on this network
  optional metalstack.api.v2.UpdateLabels labels = 5;

  // Prefixes in this network
  repeated string prefixes = 6 [(buf.validate.field).repeated.(metalstack.api.v2.prefixes) = true];
  // Destination Prefixes in this network
  repeated string destination_prefixes = 7 [(buf.validate.field).repeated.(metalstack.api.v2.prefixes) = true];
  // Default Child Prefix length defines the bit length of a child network created per addressfamily, of not specified during the allocate request
  optional metalstack.api.v2.ChildPrefixLength default_child_prefix_length = 10;
  // Min Child Prefix length asserts that during child network creation the requested bit length is greater or equal the min child prefix length
  optional metalstack.api.v2.ChildPrefixLength min_child_prefix_length = 11;
  // NATType of this network
  optional metalstack.api.v2.NATType nat_type = 13 [(buf.validate.field).enum.defined_only = true];
  // AdditionalAnnouncableCidrs will be added to the allow list on the switch which prefixes might be announced
  repeated string additional_announcable_cidrs = 16 [(buf.validate.field).repeated.(metalstack.api.v2.prefixes) = true];

  // Force update, actually only prevents accidental removal of additional_announcable_cidrs which will destroy your dataplane in fact.
  bool force = 20;
}

// NetworkServiceDeleteRequest is the request payload for a network delete request
message NetworkServiceDeleteRequest {
  // ID of the network to get
  string id = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
}

// NetworkServiceListRequest
message NetworkServiceListRequest {
  // Query which specifies which networks to return
  metalstack.api.v2.NetworkQuery query = 2;
}

// NetworkServiceCreateResponse is the response payload for a network create request
message NetworkServiceCreateResponse {
  // Network the network
  metalstack.api.v2.Network network = 1;
}

// NetworkServiceUpdateResponse is the response payload for a network update request
message NetworkServiceUpdateResponse {
  // Network the network
  metalstack.api.v2.Network network = 1;
}

// NetworkServiceCapacityResponse is the response payload for a network delete request
message NetworkServiceDeleteResponse {
  // Network the network
  metalstack.api.v2.Network network = 1;
}

// NetworkServiceListResponse
message NetworkServiceListResponse {
  // Networks are the requested networks
  repeated metalstack.api.v2.Network networks = 1;
}
