syntax = "proto3";

package metalstack.infra.v2;

import "metalstack/api/v2/common.proto";

// BootService is used for all boot related requests, either pixiecore or metal-hammer
service BootService {
  // Pixiecore

  // Dhcp is the first dhcp request (option 97). A ProvisioningEventPXEBooting is fired
  rpc Dhcp(BootServiceDhcpRequest) returns (BootServiceDhcpResponse) {
    option (metalstack.api.v2.infra_roles) = INFRA_ROLE_EDITOR;
    option (metalstack.api.v2.infra_roles) = INFRA_ROLE_VIEWER;
    option (metalstack.api.v2.auditing) = AUDITING_EXCLUDED;
  }
  // Boot is called from pixie once the machine got the first dhcp response and ipxie asks for subsequent kernel and initrd
  rpc Boot(BootServiceBootRequest) returns (BootServiceBootResponse) {
    option (metalstack.api.v2.infra_roles) = INFRA_ROLE_EDITOR;
    option (metalstack.api.v2.infra_roles) = INFRA_ROLE_VIEWER;
    option (metalstack.api.v2.auditing) = AUDITING_EXCLUDED;
  }

  // Metal Hammer

  // SuperUserPassword metal-hammer takes the configured root password for the bmc from metal-api and configure the bmc accordingly
  rpc SuperUserPassword(BootServiceSuperUserPasswordRequest) returns (BootServiceSuperUserPasswordResponse) {
    option (metalstack.api.v2.machine_roles) = MACHINE_ROLE_EDITOR;
    option (metalstack.api.v2.machine_roles) = MACHINE_ROLE_VIEWER;
    option (metalstack.api.v2.auditing) = AUDITING_EXCLUDED;
  }
  // Register is called from metal-hammer after hardware inventory is finished, tells metal-api all glory details about that machine
  rpc Register(BootServiceRegisterRequest) returns (BootServiceRegisterResponse) {
    option (metalstack.api.v2.machine_roles) = MACHINE_ROLE_EDITOR;
    option (metalstack.api.v2.machine_roles) = MACHINE_ROLE_VIEWER;
    option (metalstack.api.v2.auditing) = AUDITING_EXCLUDED;
  }
  // Wait is a hanging call that waits until the machine gets allocated by a user
  rpc Wait(BootServiceWaitRequest) returns (stream BootServiceWaitResponse) {
    option (metalstack.api.v2.machine_roles) = MACHINE_ROLE_EDITOR;
    option (metalstack.api.v2.machine_roles) = MACHINE_ROLE_VIEWER;
    option (metalstack.api.v2.auditing) = AUDITING_EXCLUDED;
  }

  // FIXME after wait finished a MachineServiceGetRequest is required which must be possible with a machine_role_viewer
  // This should be part of machine.proto

  // Report tells metal-api installation was either successful or failed
  rpc Report(BootServiceReportRequest) returns (BootServiceReportResponse) {
    option (metalstack.api.v2.machine_roles) = MACHINE_ROLE_EDITOR;
    option (metalstack.api.v2.machine_roles) = MACHINE_ROLE_VIEWER;
    option (metalstack.api.v2.auditing) = AUDITING_EXCLUDED;
  }
  // If reinstall failed and tell metal-api to restore to previous state
  rpc AbortReinstall(BootServiceAbortReinstallRequest) returns (BootServiceAbortReinstallResponse) {
    option (metalstack.api.v2.machine_roles) = MACHINE_ROLE_EDITOR;
    option (metalstack.api.v2.machine_roles) = MACHINE_ROLE_VIEWER;
    option (metalstack.api.v2.auditing) = AUDITING_EXCLUDED;
  }
}

// BootServiceDhcpRequest is called once a machine issues a dhcp request
message BootServiceDhcpRequest {
  // UUID of the machine
  string uuid = 1;
}

// BootServiceDhcpResponse contains the response to a dhcp request
message BootServiceDhcpResponse {}

// BootServiceBootRequest is called to get specified parameters to boot a machine with the given mac
message BootServiceBootRequest {
  // Mac address of the machein
  string mac = 1;
  // Partition where this machine is located
  string partition_id = 2;
}

// BootServiceBootResponse contains additional infos which are required to boot a machine
message BootServiceBootResponse {
  // Kernel is the url to the linux kernel to boot
  string kernel = 1;
  // Initial ram disk is the url to the initial ram disk to boot
  repeated string init_ram_disks = 2;
  // CMDLine contains kernel command line parameters to boot
  optional string cmdline = 3;
}

// BootServiceRegisterRequest is called from metal-hammer to register a machine with as much hardware details as possible
message BootServiceRegisterRequest {
  // UUID of this machine
  string uuid = 1;
  // Hardware details of this machine
  MachineHardware hardware = 2;
  // Bios details of this machine
  MachineBIOS bios = 3;
  // IPMI details of this machine
  MachineIPMI ipmi = 4;
  // Tags of this machine
  repeated string tags = 5;
  // MetalHammer version this machine was bootet into
  string metal_hammer_version = 6;
  // Partition where this machine is located
  string partition_id = 7;
}

// BootServiceRegisterResponse response to a BootServiceRegisterResponse request
message BootServiceRegisterResponse {
  // UUID of this machine
  string uuid = 1;
  // Size is the calculated size from given hardware details
  string size = 2;
  // Partition of this machine
  string partition_id = 3;
}

// BootServiceWaitRequest is called when a machine was registered and is waiting for allocation
message BootServiceWaitRequest {
  // UUID of this machine
  string uuid = 1;
}

// BootServiceWaitResponse response to a wait request
message BootServiceWaitResponse {}

// MachineHardware contains hardware details of this machine
message MachineHardware {
  // Memory in bytes
  uint64 memory = 1;
  // Disks which are built into this machine
  repeated MachineBlockDevice disks = 3;
  // Nics are network interface cards built into this machein
  repeated MachineNic nics = 4;
  // CPUs in this machine
  repeated MachineCPU cpus = 5;
  // GPUs in this machine
  repeated MachineGPU gpus = 6;
}

// MachineCPU describes a physical CPU
message MachineCPU {
  // Vendor of this cpu
  string vendor = 1;
  // Model of this cpu
  string model = 2;
  // Cores in this cpu
  uint32 cores = 3;
  // Threads total in this cpu
  uint32 threads = 4;
}

// MachineGPU describes a physical GPU
message MachineGPU {
  // Vendor of this gpu
  string vendor = 1;
  // Model of this gpu
  string model = 2;
}

// MachineNIC describes a network interface card
message MachineNic {
  // Mac address of this network card
  string mac = 1;
  // Name in the os of this network card, e.g. eth0
  string name = 2;
  // Vendor of this network card
  string vendor = 3;
  // Model of this network card
  string model = 4;
  // Speed in bits/second of this network card
  uint64 speed = 5;
  // Neighbors connected to this network card
  repeated MachineNic neighbors = 6;
  // Hostname FIXME clarify usage
  string hostname = 7;
  // Identifier of this network card
  string identifier = 8;
}

// MachineBlockDevice defines a disk built into a machine
message MachineBlockDevice {
  // Name of this device
  string name = 1;
  // Size in bytes of this device
  uint64 size = 2;
}

// MachineBIOS describes details of the machine bios
message MachineBIOS {
  // Version of the bios
  string version = 1;
  // Vendor of the bios
  string vendor = 2;
  // Date of the bios
  string date = 3;
}

// MachineIPMI describe details of the ipmi or out of band device
message MachineIPMI {
  // Address of this ipmi device from outside
  string address = 1;
  // Mac address of the network interface of this ipmi device
  string mac = 2;
  // User of this ipmi device
  string user = 3;
  // Password of this ipmi device
  string password = 4;
  // Interface of this ipmi device
  string interface = 5;
  // FRU field replaceable unit details for this machine
  MachineFRU fru = 6;
  // BMCVersion of this ipmi device
  string bmc_version = 7;
  // PowerState of this machine
  string power_state = 8;
}

// MachineFRU describes details to the machine which are required in case of a necessary replacement
message MachineFRU {
  // ChassisPartNumber is the part number of the machine chassis
  optional string chassis_part_number = 1;
  // ChassisPartSerial is the serial number of the machine chassis
  optional string chassis_part_serial = 2;
  // BoardMFG is the short description of the mainboard
  optional string board_mfg = 3;
  // BoardSerial is the serial number of the mainboard
  optional string board_mfg_serial = 4;
  // BoardPartNumber is the part number of the mainboard
  optional string board_part_number = 5;
  // ProductManufacturer is the manufacturer of the machine
  optional string product_manufacturer = 6;
  // ProductPartNumber is the part number of the machine
  optional string product_part_number = 7;
  // ProductSerial is the serial number of the machine
  optional string product_serial = 8;
}

// BootServiceReportRequest is sent from metal-hammer to the api to report the outcome of the register
message BootServiceReportRequest {
  // UUID of the machine to boot
  string uuid = 1;
  // Console_Password
  string console_password = 2;
  // BootInfo contains all details which are the result of registration and allocation
  BootInfo boot_info = 3;
  // Success is set to true of the allocation succeeded
  bool success = 4;
  // Message contains additional information if installation failed
  string message = 5;
}

// BootServiceReportRequest is the response to a BootServiceReportRequest
message BootServiceReportResponse {}

// BootInfo contains calculated values of a allocation
message BootInfo {
  // Image which is going to be installed
  string image_id = 1;
  // PrimaryDisk the machine boots from
  string primary_disk = 2;
  // OSPartition where the operating system is stored
  string os_partition = 3;
  // Initrd the name of the initial ram disk
  string initrd = 4;
  // Cmdline of the kernel
  string cmdline = 5;
  // Kernel to boot from
  string kernel = 6;
  // BootloadID which is used to boot
  string bootloader_id = 8;
}

// BootServiceAbortReinstallRequest is called if the reinstallation failed and must aborted
message BootServiceAbortReinstallRequest {
  // UUID of this machine
  string uuid = 1;
  // PrimaryDiskWiped is set to true if the primary disk was wiped
  bool primary_disk_wiped = 2;
}

// BootServiceAbortReinstallResponse response if a reinstall abort command was called
message BootServiceAbortReinstallResponse {
  // BootInfo contains details to the boot
  BootInfo boot_info = 1;
}

// BootServiceSuperUserPasswordRequest this call returns the password for the machine superuser
message BootServiceSuperUserPasswordRequest {
  // UUID of this machine
  string uuid = 1;
}

// BootServiceSuperUserPasswordResponse the super user password is returned
message BootServiceSuperUserPasswordResponse {
  // FeatureDisable FIXME
  bool feature_disabled = 1;
  // SuperUserPassword is the password of the superuser on the ipmi device
  string super_user_password = 2;
}
