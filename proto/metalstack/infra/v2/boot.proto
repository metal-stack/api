syntax = "proto3";

package metalstack.infra.v2;

import "buf/validate/validate.proto";
import "metalstack/api/v2/common.proto";
import "metalstack/api/v2/machine.proto";

// BootService is used for all boot related requests, either pixiecore or metal-hammer
service BootService {
  // Pixiecore

  // Dhcp is the first dhcp request (option 97). A ProvisioningEventPXEBooting is fired
  rpc Dhcp(BootServiceDhcpRequest) returns (BootServiceDhcpResponse) {
    option (metalstack.api.v2.infra_roles) = INFRA_ROLE_EDITOR;
    option (metalstack.api.v2.infra_roles) = INFRA_ROLE_VIEWER;
    option (metalstack.api.v2.auditing) = AUDITING_EXCLUDED;
  }
  // Boot is called from pixie once the machine got the first dhcp response and ipxie asks for subsequent kernel and initrd
  rpc Boot(BootServiceBootRequest) returns (BootServiceBootResponse) {
    option (metalstack.api.v2.infra_roles) = INFRA_ROLE_EDITOR;
    option (metalstack.api.v2.infra_roles) = INFRA_ROLE_VIEWER;
    option (metalstack.api.v2.auditing) = AUDITING_EXCLUDED;
  }

  // Metal Hammer

  // SuperUserPassword metal-hammer takes the configured root password for the bmc from metal-api and configure the bmc accordingly
  rpc SuperUserPassword(BootServiceSuperUserPasswordRequest) returns (BootServiceSuperUserPasswordResponse) {
    option (metalstack.api.v2.machine_roles) = MACHINE_ROLE_EDITOR;
    option (metalstack.api.v2.auditing) = AUDITING_EXCLUDED;
  }
  // Register is called from metal-hammer after hardware inventory is finished, tells metal-api all glory details about that machine
  rpc Register(BootServiceRegisterRequest) returns (BootServiceRegisterResponse) {
    option (metalstack.api.v2.machine_roles) = MACHINE_ROLE_EDITOR;
    option (metalstack.api.v2.auditing) = AUDITING_EXCLUDED;
  }
  // Wait is a hanging call that waits until the machine gets allocated by a user
  rpc Wait(BootServiceWaitRequest) returns (stream BootServiceWaitResponse) {
    option (metalstack.api.v2.machine_roles) = MACHINE_ROLE_EDITOR;
    option (metalstack.api.v2.auditing) = AUDITING_EXCLUDED;
  }

  // FIXME after wait finished a MachineServiceGetRequest is required which must be possible with a machine_role_viewer
  // This should be part of machine.proto

  // Report tells metal-api installation was either successful or failed
  rpc Report(BootServiceReportRequest) returns (BootServiceReportResponse) {
    option (metalstack.api.v2.machine_roles) = MACHINE_ROLE_EDITOR;
    option (metalstack.api.v2.auditing) = AUDITING_EXCLUDED;
  }
}

// BootServiceDhcpRequest is called once a machine issues a dhcp request
message BootServiceDhcpRequest {
  // UUID of the machine
  string uuid = 1 [(buf.validate.field).string.uuid = true];
  // Partition where this machine is located
  string partition = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
}

// BootServiceDhcpResponse contains the response to a dhcp request
message BootServiceDhcpResponse {}

// BootServiceBootRequest is called to get specified parameters to boot a machine with the given mac
message BootServiceBootRequest {
  // Mac address of the machine
  string mac = 1 [(buf.validate.field).cel = {
    id: "mac"
    message: "mac must be a valid mac address"
    expression: "this.matches('^(?:[0-9A-Fa-f]{2}[:-]){5}(?:[0-9A-Fa-f]{2})$')"
  }];
  // Partition where this machine is located
  string partition = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
}

// BootServiceBootResponse contains additional infos which are required to boot a machine
message BootServiceBootResponse {
  // Kernel is the url to the linux kernel to boot
  string kernel = 1 [(buf.validate.field).cel = {
    id: "valid_kernel_uri"
    message: "kernel must be a valid URI"
    // `isUri` validates that a string is an absolute URI.
    // This expression validates that the uri field is an absolute URI.
    // Note: to allow relative URI, use `isUriRef`.
    expression: "this.isUri()"
  }];
  // Initial ram disk is the url to the initial ram disk to boot
  repeated string init_ram_disks = 2;
  // CMDLine contains kernel command line parameters to boot
  optional string cmdline = 3 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
}

// BootServiceRegisterRequest is called from metal-hammer to register a machine with as much hardware details as possible
message BootServiceRegisterRequest {
  // UUID of this machine
  string uuid = 1 [(buf.validate.field).string.uuid = true];
  // Hardware details of this machine
  metalstack.api.v2.MachineHardware hardware = 2;
  // Bios details of this machine
  metalstack.api.v2.MachineBios bios = 3;
  // IPMI details of this machine
  metalstack.api.v2.MachineIPMI ipmi = 4;
  // Tags of this machine
  repeated string tags = 5;
  // MetalHammer version this machine was bootet into
  string metal_hammer_version = 6 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Partition where this machine is located
  string partition = 7 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
}

// BootServiceRegisterResponse response to a BootServiceRegisterResponse request
message BootServiceRegisterResponse {
  // UUID of this machine
  string uuid = 1 [(buf.validate.field).string.uuid = true];
  // Size is the calculated size from given hardware details
  string size = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Partition of this machine
  string partition = 3 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
}

// BootServiceWaitRequest is called when a machine was registered and is waiting for allocation
message BootServiceWaitRequest {
  // UUID of this machine
  string uuid = 1 [(buf.validate.field).string.uuid = true];
}

// BootServiceWaitResponse response to a wait request
message BootServiceWaitResponse {
  // Allocation contains the machine.allocation to actually install the machine
  metalstack.api.v2.MachineAllocation allocation = 1;
}

// BootServiceReportRequest is sent from metal-hammer to the api to report the outcome of the register
message BootServiceReportRequest {
  // UUID of the machine to boot
  string uuid = 1 [(buf.validate.field).string.uuid = true];
  // Console_Password
  string console_password = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Success is set to true of the allocation succeeded
  bool success = 4;
  // Message contains additional information if installation failed
  string message = 5 [(buf.validate.field).string = {
    min_len: 2
    max_len: 512
  }];
}

// BootServiceReportRequest is the response to a BootServiceReportRequest
message BootServiceReportResponse {}

// BootServiceSuperUserPasswordRequest this call returns the password for the machine superuser
message BootServiceSuperUserPasswordRequest {
  // UUID of this machine
  string uuid = 1 [(buf.validate.field).string.uuid = true];
}

// BootServiceSuperUserPasswordResponse the super user password is returned
message BootServiceSuperUserPasswordResponse {
  // FeatureDisable FIXME
  bool feature_disabled = 1;
  // SuperUserPassword is the password of the superuser on the ipmi device
  string super_user_password = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
}
