# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: metalstack/api/v2/filesystem.proto

from typing import Optional, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext

import metalstack.api.v2.filesystem_pb2 as _pb2


class FilesystemService(Protocol):
    async def Get(self, req: _pb2.FilesystemServiceGetRequest, ctx: ServiceContext) -> _pb2.FilesystemServiceGetResponse: ...
    async def List(self, req: _pb2.FilesystemServiceListRequest, ctx: ServiceContext) -> _pb2.FilesystemServiceListResponse: ...
    async def Try(self, req: _pb2.FilesystemServiceTryRequest, ctx: ServiceContext) -> _pb2.FilesystemServiceTryResponse: ...
    async def Match(self, req: _pb2.FilesystemServiceMatchRequest, ctx: ServiceContext) -> _pb2.FilesystemServiceMatchResponse: ...


class FilesystemServiceServer(ConnecpyServer):
    def __init__(self, *, service: FilesystemService, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/metalstack.api.v2.FilesystemService"
        self._endpoints = {
            "Get": Endpoint[_pb2.FilesystemServiceGetRequest, _pb2.FilesystemServiceGetResponse](
                service_name="FilesystemService",
                name="Get",
                function=getattr(service, "Get"),
                input=_pb2.FilesystemServiceGetRequest,
                output=_pb2.FilesystemServiceGetResponse,
                allowed_methods=("POST",),
            ),
            "List": Endpoint[_pb2.FilesystemServiceListRequest, _pb2.FilesystemServiceListResponse](
                service_name="FilesystemService",
                name="List",
                function=getattr(service, "List"),
                input=_pb2.FilesystemServiceListRequest,
                output=_pb2.FilesystemServiceListResponse,
                allowed_methods=("POST",),
            ),
            "Try": Endpoint[_pb2.FilesystemServiceTryRequest, _pb2.FilesystemServiceTryResponse](
                service_name="FilesystemService",
                name="Try",
                function=getattr(service, "Try"),
                input=_pb2.FilesystemServiceTryRequest,
                output=_pb2.FilesystemServiceTryResponse,
                allowed_methods=("POST",),
            ),
            "Match": Endpoint[_pb2.FilesystemServiceMatchRequest, _pb2.FilesystemServiceMatchResponse](
                service_name="FilesystemService",
                name="Match",
                function=getattr(service, "Match"),
                input=_pb2.FilesystemServiceMatchRequest,
                output=_pb2.FilesystemServiceMatchResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "metalstack.api.v2.FilesystemService"


class FilesystemServiceSync(Protocol):
    def Get(self, req: _pb2.FilesystemServiceGetRequest, ctx: ServiceContext) -> _pb2.FilesystemServiceGetResponse: ...
    def List(self, req: _pb2.FilesystemServiceListRequest, ctx: ServiceContext) -> _pb2.FilesystemServiceListResponse: ...
    def Try(self, req: _pb2.FilesystemServiceTryRequest, ctx: ServiceContext) -> _pb2.FilesystemServiceTryResponse: ...
    def Match(self, req: _pb2.FilesystemServiceMatchRequest, ctx: ServiceContext) -> _pb2.FilesystemServiceMatchResponse: ...


class FilesystemServiceServerSync(ConnecpyServer):
    def __init__(self, *, service: FilesystemServiceSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/metalstack.api.v2.FilesystemService"
        self._endpoints = {
            "Get": Endpoint[_pb2.FilesystemServiceGetRequest, _pb2.FilesystemServiceGetResponse](
                service_name="FilesystemService",
                name="Get",
                function=getattr(service, "Get"),
                input=_pb2.FilesystemServiceGetRequest,
                output=_pb2.FilesystemServiceGetResponse,
                allowed_methods=("POST",),
            ),
            "List": Endpoint[_pb2.FilesystemServiceListRequest, _pb2.FilesystemServiceListResponse](
                service_name="FilesystemService",
                name="List",
                function=getattr(service, "List"),
                input=_pb2.FilesystemServiceListRequest,
                output=_pb2.FilesystemServiceListResponse,
                allowed_methods=("POST",),
            ),
            "Try": Endpoint[_pb2.FilesystemServiceTryRequest, _pb2.FilesystemServiceTryResponse](
                service_name="FilesystemService",
                name="Try",
                function=getattr(service, "Try"),
                input=_pb2.FilesystemServiceTryRequest,
                output=_pb2.FilesystemServiceTryResponse,
                allowed_methods=("POST",),
            ),
            "Match": Endpoint[_pb2.FilesystemServiceMatchRequest, _pb2.FilesystemServiceMatchResponse](
                service_name="FilesystemService",
                name="Match",
                function=getattr(service, "Match"),
                input=_pb2.FilesystemServiceMatchRequest,
                output=_pb2.FilesystemServiceMatchResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "metalstack.api.v2.FilesystemService"


class FilesystemServiceClient(ConnecpyClient):
    def Get(
        self,
        *,
        request: _pb2.FilesystemServiceGetRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.FilesystemServiceGetResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/metalstack.api.v2.FilesystemService/Get",
            ctx=ctx,
            request=request,
            response_class=_pb2.FilesystemServiceGetResponse,
            method=method,
            **kwargs,
        )

    def List(
        self,
        *,
        request: _pb2.FilesystemServiceListRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.FilesystemServiceListResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/metalstack.api.v2.FilesystemService/List",
            ctx=ctx,
            request=request,
            response_class=_pb2.FilesystemServiceListResponse,
            method=method,
            **kwargs,
        )

    def Try(
        self,
        *,
        request: _pb2.FilesystemServiceTryRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.FilesystemServiceTryResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/metalstack.api.v2.FilesystemService/Try",
            ctx=ctx,
            request=request,
            response_class=_pb2.FilesystemServiceTryResponse,
            method=method,
            **kwargs,
        )

    def Match(
        self,
        *,
        request: _pb2.FilesystemServiceMatchRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.FilesystemServiceMatchResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/metalstack.api.v2.FilesystemService/Match",
            ctx=ctx,
            request=request,
            response_class=_pb2.FilesystemServiceMatchResponse,
            method=method,
            **kwargs,
        )


class AsyncFilesystemServiceClient(AsyncConnecpyClient):
    async def Get(
        self,
        *,
        request: _pb2.FilesystemServiceGetRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.FilesystemServiceGetResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/metalstack.api.v2.FilesystemService/Get",
            ctx=ctx,
            request=request,
            response_class=_pb2.FilesystemServiceGetResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def List(
        self,
        *,
        request: _pb2.FilesystemServiceListRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.FilesystemServiceListResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/metalstack.api.v2.FilesystemService/List",
            ctx=ctx,
            request=request,
            response_class=_pb2.FilesystemServiceListResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Try(
        self,
        *,
        request: _pb2.FilesystemServiceTryRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.FilesystemServiceTryResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/metalstack.api.v2.FilesystemService/Try",
            ctx=ctx,
            request=request,
            response_class=_pb2.FilesystemServiceTryResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Match(
        self,
        *,
        request: _pb2.FilesystemServiceMatchRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.FilesystemServiceMatchResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/metalstack.api.v2.FilesystemService/Match",
            ctx=ctx,
            request=request,
            response_class=_pb2.FilesystemServiceMatchResponse,
            method=method,
            session=session,
            **kwargs,
        )
