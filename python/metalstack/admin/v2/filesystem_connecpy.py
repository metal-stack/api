# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: metalstack/admin/v2/filesystem.proto

from typing import Optional, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext

import metalstack.admin.v2.filesystem_pb2 as _pb2


class FilesystemService(Protocol):
    async def Create(self, req: _pb2.FilesystemServiceCreateRequest, ctx: ServiceContext) -> _pb2.FilesystemServiceCreateResponse: ...
    async def Update(self, req: _pb2.FilesystemServiceUpdateRequest, ctx: ServiceContext) -> _pb2.FilesystemServiceUpdateResponse: ...
    async def Delete(self, req: _pb2.FilesystemServiceDeleteRequest, ctx: ServiceContext) -> _pb2.FilesystemServiceDeleteResponse: ...


class FilesystemServiceServer(ConnecpyServer):
    def __init__(self, *, service: FilesystemService, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/metalstack.admin.v2.FilesystemService"
        self._endpoints = {
            "Create": Endpoint[_pb2.FilesystemServiceCreateRequest, _pb2.FilesystemServiceCreateResponse](
                service_name="FilesystemService",
                name="Create",
                function=getattr(service, "Create"),
                input=_pb2.FilesystemServiceCreateRequest,
                output=_pb2.FilesystemServiceCreateResponse,
                allowed_methods=("POST",),
            ),
            "Update": Endpoint[_pb2.FilesystemServiceUpdateRequest, _pb2.FilesystemServiceUpdateResponse](
                service_name="FilesystemService",
                name="Update",
                function=getattr(service, "Update"),
                input=_pb2.FilesystemServiceUpdateRequest,
                output=_pb2.FilesystemServiceUpdateResponse,
                allowed_methods=("POST",),
            ),
            "Delete": Endpoint[_pb2.FilesystemServiceDeleteRequest, _pb2.FilesystemServiceDeleteResponse](
                service_name="FilesystemService",
                name="Delete",
                function=getattr(service, "Delete"),
                input=_pb2.FilesystemServiceDeleteRequest,
                output=_pb2.FilesystemServiceDeleteResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "metalstack.admin.v2.FilesystemService"


class FilesystemServiceSync(Protocol):
    def Create(self, req: _pb2.FilesystemServiceCreateRequest, ctx: ServiceContext) -> _pb2.FilesystemServiceCreateResponse: ...
    def Update(self, req: _pb2.FilesystemServiceUpdateRequest, ctx: ServiceContext) -> _pb2.FilesystemServiceUpdateResponse: ...
    def Delete(self, req: _pb2.FilesystemServiceDeleteRequest, ctx: ServiceContext) -> _pb2.FilesystemServiceDeleteResponse: ...


class FilesystemServiceServerSync(ConnecpyServer):
    def __init__(self, *, service: FilesystemServiceSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/metalstack.admin.v2.FilesystemService"
        self._endpoints = {
            "Create": Endpoint[_pb2.FilesystemServiceCreateRequest, _pb2.FilesystemServiceCreateResponse](
                service_name="FilesystemService",
                name="Create",
                function=getattr(service, "Create"),
                input=_pb2.FilesystemServiceCreateRequest,
                output=_pb2.FilesystemServiceCreateResponse,
                allowed_methods=("POST",),
            ),
            "Update": Endpoint[_pb2.FilesystemServiceUpdateRequest, _pb2.FilesystemServiceUpdateResponse](
                service_name="FilesystemService",
                name="Update",
                function=getattr(service, "Update"),
                input=_pb2.FilesystemServiceUpdateRequest,
                output=_pb2.FilesystemServiceUpdateResponse,
                allowed_methods=("POST",),
            ),
            "Delete": Endpoint[_pb2.FilesystemServiceDeleteRequest, _pb2.FilesystemServiceDeleteResponse](
                service_name="FilesystemService",
                name="Delete",
                function=getattr(service, "Delete"),
                input=_pb2.FilesystemServiceDeleteRequest,
                output=_pb2.FilesystemServiceDeleteResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "metalstack.admin.v2.FilesystemService"


class FilesystemServiceClient(ConnecpyClient):
    def Create(
        self,
        *,
        request: _pb2.FilesystemServiceCreateRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.FilesystemServiceCreateResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/metalstack.admin.v2.FilesystemService/Create",
            ctx=ctx,
            request=request,
            response_class=_pb2.FilesystemServiceCreateResponse,
            method=method,
            **kwargs,
        )

    def Update(
        self,
        *,
        request: _pb2.FilesystemServiceUpdateRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.FilesystemServiceUpdateResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/metalstack.admin.v2.FilesystemService/Update",
            ctx=ctx,
            request=request,
            response_class=_pb2.FilesystemServiceUpdateResponse,
            method=method,
            **kwargs,
        )

    def Delete(
        self,
        *,
        request: _pb2.FilesystemServiceDeleteRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.FilesystemServiceDeleteResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/metalstack.admin.v2.FilesystemService/Delete",
            ctx=ctx,
            request=request,
            response_class=_pb2.FilesystemServiceDeleteResponse,
            method=method,
            **kwargs,
        )


class AsyncFilesystemServiceClient(AsyncConnecpyClient):
    async def Create(
        self,
        *,
        request: _pb2.FilesystemServiceCreateRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.FilesystemServiceCreateResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/metalstack.admin.v2.FilesystemService/Create",
            ctx=ctx,
            request=request,
            response_class=_pb2.FilesystemServiceCreateResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Update(
        self,
        *,
        request: _pb2.FilesystemServiceUpdateRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.FilesystemServiceUpdateResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/metalstack.admin.v2.FilesystemService/Update",
            ctx=ctx,
            request=request,
            response_class=_pb2.FilesystemServiceUpdateResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Delete(
        self,
        *,
        request: _pb2.FilesystemServiceDeleteRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.FilesystemServiceDeleteResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/metalstack.admin.v2.FilesystemService/Delete",
            ctx=ctx,
            request=request,
            response_class=_pb2.FilesystemServiceDeleteResponse,
            method=method,
            session=session,
            **kwargs,
        )
