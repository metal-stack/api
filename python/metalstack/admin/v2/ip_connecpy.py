# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: metalstack/admin/v2/ip.proto

from typing import Optional, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext

import metalstack.admin.v2.ip_pb2 as _pb2


class IPService(Protocol):
    async def List(self, req: _pb2.IPServiceListRequest, ctx: ServiceContext) -> _pb2.IPServiceListResponse: ...
    async def Issues(self, req: _pb2.IPServiceIssuesRequest, ctx: ServiceContext) -> _pb2.IPServiceIssuesResponse: ...


class IPServiceServer(ConnecpyServer):
    def __init__(self, *, service: IPService, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/metalstack.admin.v2.IPService"
        self._endpoints = {
            "List": Endpoint[_pb2.IPServiceListRequest, _pb2.IPServiceListResponse](
                service_name="IPService",
                name="List",
                function=getattr(service, "List"),
                input=_pb2.IPServiceListRequest,
                output=_pb2.IPServiceListResponse,
                allowed_methods=("POST",),
            ),
            "Issues": Endpoint[_pb2.IPServiceIssuesRequest, _pb2.IPServiceIssuesResponse](
                service_name="IPService",
                name="Issues",
                function=getattr(service, "Issues"),
                input=_pb2.IPServiceIssuesRequest,
                output=_pb2.IPServiceIssuesResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "metalstack.admin.v2.IPService"


class IPServiceSync(Protocol):
    def List(self, req: _pb2.IPServiceListRequest, ctx: ServiceContext) -> _pb2.IPServiceListResponse: ...
    def Issues(self, req: _pb2.IPServiceIssuesRequest, ctx: ServiceContext) -> _pb2.IPServiceIssuesResponse: ...


class IPServiceServerSync(ConnecpyServer):
    def __init__(self, *, service: IPServiceSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/metalstack.admin.v2.IPService"
        self._endpoints = {
            "List": Endpoint[_pb2.IPServiceListRequest, _pb2.IPServiceListResponse](
                service_name="IPService",
                name="List",
                function=getattr(service, "List"),
                input=_pb2.IPServiceListRequest,
                output=_pb2.IPServiceListResponse,
                allowed_methods=("POST",),
            ),
            "Issues": Endpoint[_pb2.IPServiceIssuesRequest, _pb2.IPServiceIssuesResponse](
                service_name="IPService",
                name="Issues",
                function=getattr(service, "Issues"),
                input=_pb2.IPServiceIssuesRequest,
                output=_pb2.IPServiceIssuesResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "metalstack.admin.v2.IPService"


class IPServiceClient(ConnecpyClient):
    def List(
        self,
        *,
        request: _pb2.IPServiceListRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.IPServiceListResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/metalstack.admin.v2.IPService/List",
            ctx=ctx,
            request=request,
            response_class=_pb2.IPServiceListResponse,
            method=method,
            **kwargs,
        )

    def Issues(
        self,
        *,
        request: _pb2.IPServiceIssuesRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.IPServiceIssuesResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/metalstack.admin.v2.IPService/Issues",
            ctx=ctx,
            request=request,
            response_class=_pb2.IPServiceIssuesResponse,
            method=method,
            **kwargs,
        )


class AsyncIPServiceClient(AsyncConnecpyClient):
    async def List(
        self,
        *,
        request: _pb2.IPServiceListRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.IPServiceListResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/metalstack.admin.v2.IPService/List",
            ctx=ctx,
            request=request,
            response_class=_pb2.IPServiceListResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Issues(
        self,
        *,
        request: _pb2.IPServiceIssuesRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.IPServiceIssuesResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/metalstack.admin.v2.IPService/Issues",
            ctx=ctx,
            request=request,
            response_class=_pb2.IPServiceIssuesResponse,
            method=method,
            session=session,
            **kwargs,
        )
