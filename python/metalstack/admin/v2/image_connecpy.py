# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: metalstack/admin/v2/image.proto

from typing import Optional, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext

import metalstack.admin.v2.image_pb2 as _pb2


class ImageService(Protocol):
    async def Create(self, req: _pb2.ImageServiceCreateRequest, ctx: ServiceContext) -> _pb2.ImageServiceCreateResponse: ...
    async def Update(self, req: _pb2.ImageServiceUpdateRequest, ctx: ServiceContext) -> _pb2.ImageServiceUpdateResponse: ...
    async def Delete(self, req: _pb2.ImageServiceDeleteRequest, ctx: ServiceContext) -> _pb2.ImageServiceDeleteResponse: ...
    async def Usage(self, req: _pb2.ImageServiceUsageRequest, ctx: ServiceContext) -> _pb2.ImageServiceUsageResponse: ...


class ImageServiceServer(ConnecpyServer):
    def __init__(self, *, service: ImageService, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/metalstack.admin.v2.ImageService"
        self._endpoints = {
            "Create": Endpoint[_pb2.ImageServiceCreateRequest, _pb2.ImageServiceCreateResponse](
                service_name="ImageService",
                name="Create",
                function=getattr(service, "Create"),
                input=_pb2.ImageServiceCreateRequest,
                output=_pb2.ImageServiceCreateResponse,
                allowed_methods=("POST",),
            ),
            "Update": Endpoint[_pb2.ImageServiceUpdateRequest, _pb2.ImageServiceUpdateResponse](
                service_name="ImageService",
                name="Update",
                function=getattr(service, "Update"),
                input=_pb2.ImageServiceUpdateRequest,
                output=_pb2.ImageServiceUpdateResponse,
                allowed_methods=("POST",),
            ),
            "Delete": Endpoint[_pb2.ImageServiceDeleteRequest, _pb2.ImageServiceDeleteResponse](
                service_name="ImageService",
                name="Delete",
                function=getattr(service, "Delete"),
                input=_pb2.ImageServiceDeleteRequest,
                output=_pb2.ImageServiceDeleteResponse,
                allowed_methods=("POST",),
            ),
            "Usage": Endpoint[_pb2.ImageServiceUsageRequest, _pb2.ImageServiceUsageResponse](
                service_name="ImageService",
                name="Usage",
                function=getattr(service, "Usage"),
                input=_pb2.ImageServiceUsageRequest,
                output=_pb2.ImageServiceUsageResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "metalstack.admin.v2.ImageService"


class ImageServiceSync(Protocol):
    def Create(self, req: _pb2.ImageServiceCreateRequest, ctx: ServiceContext) -> _pb2.ImageServiceCreateResponse: ...
    def Update(self, req: _pb2.ImageServiceUpdateRequest, ctx: ServiceContext) -> _pb2.ImageServiceUpdateResponse: ...
    def Delete(self, req: _pb2.ImageServiceDeleteRequest, ctx: ServiceContext) -> _pb2.ImageServiceDeleteResponse: ...
    def Usage(self, req: _pb2.ImageServiceUsageRequest, ctx: ServiceContext) -> _pb2.ImageServiceUsageResponse: ...


class ImageServiceServerSync(ConnecpyServer):
    def __init__(self, *, service: ImageServiceSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/metalstack.admin.v2.ImageService"
        self._endpoints = {
            "Create": Endpoint[_pb2.ImageServiceCreateRequest, _pb2.ImageServiceCreateResponse](
                service_name="ImageService",
                name="Create",
                function=getattr(service, "Create"),
                input=_pb2.ImageServiceCreateRequest,
                output=_pb2.ImageServiceCreateResponse,
                allowed_methods=("POST",),
            ),
            "Update": Endpoint[_pb2.ImageServiceUpdateRequest, _pb2.ImageServiceUpdateResponse](
                service_name="ImageService",
                name="Update",
                function=getattr(service, "Update"),
                input=_pb2.ImageServiceUpdateRequest,
                output=_pb2.ImageServiceUpdateResponse,
                allowed_methods=("POST",),
            ),
            "Delete": Endpoint[_pb2.ImageServiceDeleteRequest, _pb2.ImageServiceDeleteResponse](
                service_name="ImageService",
                name="Delete",
                function=getattr(service, "Delete"),
                input=_pb2.ImageServiceDeleteRequest,
                output=_pb2.ImageServiceDeleteResponse,
                allowed_methods=("POST",),
            ),
            "Usage": Endpoint[_pb2.ImageServiceUsageRequest, _pb2.ImageServiceUsageResponse](
                service_name="ImageService",
                name="Usage",
                function=getattr(service, "Usage"),
                input=_pb2.ImageServiceUsageRequest,
                output=_pb2.ImageServiceUsageResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "metalstack.admin.v2.ImageService"


class ImageServiceClient(ConnecpyClient):
    def Create(
        self,
        *,
        request: _pb2.ImageServiceCreateRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.ImageServiceCreateResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/metalstack.admin.v2.ImageService/Create",
            ctx=ctx,
            request=request,
            response_class=_pb2.ImageServiceCreateResponse,
            method=method,
            **kwargs,
        )

    def Update(
        self,
        *,
        request: _pb2.ImageServiceUpdateRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.ImageServiceUpdateResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/metalstack.admin.v2.ImageService/Update",
            ctx=ctx,
            request=request,
            response_class=_pb2.ImageServiceUpdateResponse,
            method=method,
            **kwargs,
        )

    def Delete(
        self,
        *,
        request: _pb2.ImageServiceDeleteRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.ImageServiceDeleteResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/metalstack.admin.v2.ImageService/Delete",
            ctx=ctx,
            request=request,
            response_class=_pb2.ImageServiceDeleteResponse,
            method=method,
            **kwargs,
        )

    def Usage(
        self,
        *,
        request: _pb2.ImageServiceUsageRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.ImageServiceUsageResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/metalstack.admin.v2.ImageService/Usage",
            ctx=ctx,
            request=request,
            response_class=_pb2.ImageServiceUsageResponse,
            method=method,
            **kwargs,
        )


class AsyncImageServiceClient(AsyncConnecpyClient):
    async def Create(
        self,
        *,
        request: _pb2.ImageServiceCreateRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.ImageServiceCreateResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/metalstack.admin.v2.ImageService/Create",
            ctx=ctx,
            request=request,
            response_class=_pb2.ImageServiceCreateResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Update(
        self,
        *,
        request: _pb2.ImageServiceUpdateRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.ImageServiceUpdateResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/metalstack.admin.v2.ImageService/Update",
            ctx=ctx,
            request=request,
            response_class=_pb2.ImageServiceUpdateResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Delete(
        self,
        *,
        request: _pb2.ImageServiceDeleteRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.ImageServiceDeleteResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/metalstack.admin.v2.ImageService/Delete",
            ctx=ctx,
            request=request,
            response_class=_pb2.ImageServiceDeleteResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Usage(
        self,
        *,
        request: _pb2.ImageServiceUsageRequest,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.ImageServiceUsageResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/metalstack.admin.v2.ImageService/Usage",
            ctx=ctx,
            request=request,
            response_class=_pb2.ImageServiceUsageResponse,
            method=method,
            session=session,
            **kwargs,
        )
